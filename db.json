{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/image/AntDesignForm总结/modal.png","path":"image/AntDesignForm总结/modal.png","modified":1,"renderable":0},{"_id":"source/image/AntDesignPro探索/20190312150742764.png","path":"image/AntDesignPro探索/20190312150742764.png","modified":1,"renderable":0},{"_id":"source/image/AntDesignPro探索/20190312150929439.png","path":"image/AntDesignPro探索/20190312150929439.png","modified":1,"renderable":0},{"_id":"source/image/AntDesignPro探索/2019031215140926.png","path":"image/AntDesignPro探索/2019031215140926.png","modified":1,"renderable":0},{"_id":"source/image/AntDesignPro探索/20190312151053807.png","path":"image/AntDesignPro探索/20190312151053807.png","modified":1,"renderable":0},{"_id":"source/image/AntDesignPro探索/20190312152011733.png","path":"image/AntDesignPro探索/20190312152011733.png","modified":1,"renderable":0},{"_id":"source/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvODU2M2ZjOGJhZTU1ODI3Yy5wbmc.jpeg","path":"image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvODU2M2ZjOGJhZTU1ODI3Yy5wbmc.jpeg","modified":1,"renderable":0},{"_id":"source/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvYTkxMmI1YzhlNTk3YTYzYy5wbmc.jpeg","path":"image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvYTkxMmI1YzhlNTk3YTYzYy5wbmc.jpeg","modified":1,"renderable":0},{"_id":"source/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvZWIwYzBmODU2NDE0OGZjMC5wbmc.jpeg","path":"image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvZWIwYzBmODU2NDE0OGZjMC5wbmc.jpeg","modified":1,"renderable":0},{"_id":"source/image/React入门/20181123111537542.png","path":"image/React入门/20181123111537542.png","modified":1,"renderable":0},{"_id":"source/image/React入门/20181123143905811.png","path":"image/React入门/20181123143905811.png","modified":1,"renderable":0},{"_id":"source/image/React入门/20181123134126335.png","path":"image/React入门/20181123134126335.png","modified":1,"renderable":0},{"_id":"source/image/SpringBoot跨域/20190311105909443.png","path":"image/SpringBoot跨域/20190311105909443.png","modified":1,"renderable":0},{"_id":"source/image/SpringBoot跨域/20190311110735834.png","path":"image/SpringBoot跨域/20190311110735834.png","modified":1,"renderable":0},{"_id":"source/image/cover/HEXO.png","path":"image/cover/HEXO.png","modified":1,"renderable":0},{"_id":"source/image/cover/ANTD.png","path":"image/cover/ANTD.png","modified":1,"renderable":0},{"_id":"source/image/cover/JWT.png","path":"image/cover/JWT.png","modified":1,"renderable":0},{"_id":"source/image/cover/React.jpeg","path":"image/cover/React.jpeg","modified":1,"renderable":0},{"_id":"source/image/cover/KDpgvguMpGfqaHPjicRK.svg","path":"image/cover/KDpgvguMpGfqaHPjicRK.svg","modified":1,"renderable":0},{"_id":"source/image/cover/JavaScript.png","path":"image/cover/JavaScript.png","modified":1,"renderable":0},{"_id":"source/image/cover/antdP.png","path":"image/cover/antdP.png","modified":1,"renderable":0},{"_id":"source/image/cover/css.png","path":"image/cover/css.png","modified":1,"renderable":0},{"_id":"source/image/cover/http.png","path":"image/cover/http.png","modified":1,"renderable":0},{"_id":"source/image/cover/history.jpeg","path":"image/cover/history.jpeg","modified":1,"renderable":0},{"_id":"source/image/cover/springboot.png","path":"image/cover/springboot.png","modified":1,"renderable":0},{"_id":"source/image/cover/webpack.png","path":"image/cover/webpack.png","modified":1,"renderable":0},{"_id":"source/image/cover/decorator.png","path":"image/cover/decorator.png","modified":1,"renderable":0},{"_id":"source/image/WebpackCleanWebpackPlugin/20190622155123842.png","path":"image/WebpackCleanWebpackPlugin/20190622155123842.png","modified":1,"renderable":0},{"_id":"source/image/cover/web.jpeg","path":"image/cover/web.jpeg","modified":1,"renderable":0},{"_id":"source/image/httpHttps/15fc2525666dc96e.jpg","path":"image/httpHttps/15fc2525666dc96e.jpg","modified":1,"renderable":0},{"_id":"source/image/historyBack函数/20190318092239845.png","path":"image/historyBack函数/20190318092239845.png","modified":1,"renderable":0},{"_id":"source/image/深拷贝浅拷贝/20190428204522836.png","path":"image/深拷贝浅拷贝/20190428204522836.png","modified":1,"renderable":0},{"_id":"source/image/深拷贝浅拷贝/20190428204904611.png","path":"image/深拷贝浅拷贝/20190428204904611.png","modified":1,"renderable":0},{"_id":"source/image/深拷贝浅拷贝/20190428205350562.png","path":"image/深拷贝浅拷贝/20190428205350562.png","modified":1,"renderable":0},{"_id":"source/image/深拷贝浅拷贝/20190428205243797.png","path":"image/深拷贝浅拷贝/20190428205243797.png","modified":1,"renderable":0},{"_id":"source/image/深拷贝浅拷贝/20190428205853748.png","path":"image/深拷贝浅拷贝/20190428205853748.png","modified":1,"renderable":0},{"_id":"themes/Butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/DerrickAlipay.jpg","path":"img/DerrickAlipay.jpg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/DerrickWechat.png","path":"img/DerrickWechat.png","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/comment_bg.png","path":"img/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/icp.png","path":"img/icp.png","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/post_loadding.svg","path":"img/post_loadding.svg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/img/post.jpg","path":"img/post.jpg","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"source/image/AntDesignPro探索/2019031215120430.png","path":"image/AntDesignPro探索/2019031215120430.png","modified":1,"renderable":0},{"_id":"source/image/AntDesignPro探索/20190312151839845.png","path":"image/AntDesignPro探索/20190312151839845.png","modified":1,"renderable":0},{"_id":"source/image/CSSModules警告/aHR0cDovL2kyLnRpaW1nLmNvbS82OTE2NDMvMmVmODNhMzcxNjA4OWEwZS5wbmc.jpeg","path":"image/CSSModules警告/aHR0cDovL2kyLnRpaW1nLmNvbS82OTE2NDMvMmVmODNhMzcxNjA4OWEwZS5wbmc.jpeg","modified":1,"renderable":0},{"_id":"source/image/SpringBootJWT/20190325103836546.png","path":"image/SpringBootJWT/20190325103836546.png","modified":1,"renderable":0},{"_id":"source/image/SpringBoot跨域/20190311110721789.png","path":"image/SpringBoot跨域/20190311110721789.png","modified":1,"renderable":0},{"_id":"themes/Butterfly/source/img/1avatar.png","path":"img/1avatar.png","modified":1,"renderable":1},{"_id":"source/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvMGM4ZDhiNjZlMGNmZTY0Ny5wbmc.jpeg","path":"image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvMGM4ZDhiNjZlMGNmZTY0Ny5wbmc.jpeg","modified":1,"renderable":0},{"_id":"themes/Butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/activate-power-mode.js","path":"js/third-party/activate-power-mode.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/canvas-nest.js","path":"js/third-party/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/click_heart.js","path":"js/third-party/click_heart.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/fireworks.js","path":"js/third-party/fireworks.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/piao.js","path":"js/third-party/piao.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/ClickShowText.js","path":"js/third-party/ClickShowText.js","modified":1,"renderable":1},{"_id":"source/image/WebpackCleanWebpackPlugin/20190622155255789.png","path":"image/WebpackCleanWebpackPlugin/20190622155255789.png","modified":1,"renderable":0},{"_id":"themes/Butterfly/source/img/index.jpg","path":"img/index.jpg","modified":1,"renderable":1},{"_id":"source/image/AntDesignPro探索/2019031215175956.png","path":"image/AntDesignPro探索/2019031215175956.png","modified":1,"renderable":0},{"_id":"source/image/Web前端学习路线/20190328205449472.png","path":"image/Web前端学习路线/20190328205449472.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/Butterfly/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1586605512476},{"_id":"themes/Butterfly/README.md","hash":"820ea54f95d0bd44e335c7f644959ce87a425750","modified":1586605512476},{"_id":"themes/Butterfly/README_CN.md","hash":"06ef4ef4bffd1ac8f60e59c28f885c63a9481e0f","modified":1586605512477},{"_id":"themes/Butterfly/_config.yml","hash":"718fd905fcc1516f7dc2a3e04ef8ae7e7af0848c","modified":1586613085442},{"_id":"themes/Butterfly/package.json","hash":"95c1780b8d0bad746201bda689591ee1fed50d13","modified":1586605512502},{"_id":"source/_posts/5分钟快速精通Ant-Design-Form-1分钟快速构建复杂Ant-Design-Form表单.md","hash":"2d87ac645616954ea5dfd1711fbcf05df531b484","modified":1586613359783},{"_id":"source/_posts/JWT-spring-boot-JAVA-使用步骤-spring-boot2-0.md","hash":"d781489455e0b8bc3c4b057c7b6b582ba2f70acd","modified":1586614770233},{"_id":"source/_posts/HTTPHTTPS协议.md","hash":"7415a48a743d06b9136a96a56e9f5f8f9044189e","modified":1586614504948},{"_id":"source/_posts/Hexo+GitHub构建你的博客.md","hash":"584d6a48dabd7e4bddf58d495e200bf011c9f735","modified":1586614251998},{"_id":"source/_posts/JavaScript-浅拷贝-深拷贝-赋值-引用-JS.md","hash":"09620b19d06aeb85c8377c644b9b3a4b4784a41c","modified":1586614640324},{"_id":"source/_posts/React-Hook-useState-useEffect-componentDidMount-componentDidUpdate-componentWillUnmount.md","hash":"3aec0542efc4dbc049b171d8e0972a935f6357b9","modified":1586614870299},{"_id":"source/_posts/React-Hook-倒计时.md","hash":"7694c5a33c66f092ff7ef1e6d9866e13886225ee","modified":1586614832435},{"_id":"source/_posts/React入门（一）-State详解.md","hash":"4068f56713525b41b01b557aa733297d310d3505","modified":1586615017189},{"_id":"source/_posts/Web前端-学习目录-学习框架-系统性的学习Web前端.md","hash":"e79e485450fe10853c8ed9869d175f827a534dfe","modified":1586615476062},{"_id":"source/_posts/Webpack-CleanWebpackPlugin-is-not-a-constructor.md","hash":"247dc4b03ea72155248dba984a15b92712259ce2","modified":1586615302096},{"_id":"source/_posts/ant-design-Form-组件总结-结合Modal-自定义Modal的实现-（Upload-Input-Select-DatePicker-Cascader）.md","hash":"0a330b026f8cf3cd2d605ff3996ca474dbbc941c","modified":1586613374464},{"_id":"source/_posts/ant-design-pro-2-0-新页面探索-umi-页面404-react.md","hash":"c5596a7160c99e1537258fb3bc65aa2b2259bc98","modified":1586613960830},{"_id":"source/_posts/chunk-0-mini-css-extract-plugin-解决-CSS-Modules-警告.md","hash":"cb9bbec9b6b2b5859c17b684b9b9e4b7fb3bbd26","modified":1586614223155},{"_id":"source/_posts/session和cookie的理解.md","hash":"34ff1c47bafc53fd4a3e4a56e979301c51478538","modified":1586615542199},{"_id":"source/about/index.md","hash":"11cc73f3bf986fc286e509d9563a6a2b0e0c612a","modified":1586612946142},{"_id":"source/_posts/sprng-boot-跨域-过滤器-fetch-react-Response-to-preflight-request-doesn-t-pass-access-control-check.md","hash":"24667f806224a025f7af9a391a9521de2be92dd4","modified":1586615102973},{"_id":"source/_posts/window-history-back-缓存-返回上级页面不刷新数据.md","hash":"2eb6f906606c5e820cd84eb296ec72519a962ca3","modified":1586615417830},{"_id":"source/_posts/装饰器(Decorator)和React高阶组件(HOC).md","hash":"80ed7d5a3f22629531d42f44d3efe3a4960a9fdb","modified":1586613291816},{"_id":"source/clean/index.md","hash":"b8c623e45e7a4d0f71c4a406101b55d787cbfbe1","modified":1586615656094},{"_id":"themes/Butterfly/.github/stale.yml","hash":"cd5a929ce25a6293a9f449e7b80dfe4307326797","modified":1586605512476},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE.md","hash":"6f7e5583ca1a141cd847a117715454175adfb61f","modified":1586605512475},{"_id":"themes/Butterfly/languages/default.yml","hash":"405d4413c47e87f00b3238b4ae8bb39b42ca22bb","modified":1586605512477},{"_id":"themes/Butterfly/languages/en.yml","hash":"405d4413c47e87f00b3238b4ae8bb39b42ca22bb","modified":1586605512478},{"_id":"themes/Butterfly/languages/zh-CN.yml","hash":"508065bba5376f5b24f783b75b599ffbc509a8d6","modified":1586605512478},{"_id":"themes/Butterfly/languages/zh-TW.yml","hash":"50b84f0379d433b6247a56de94d6b3f9b7eae11b","modified":1586605512478},{"_id":"themes/Butterfly/layout/404.pug","hash":"ca0740ff0bf095756dcecb4aaf2ac7ec222cd2df","modified":1586605512479},{"_id":"themes/Butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1586605512479},{"_id":"themes/Butterfly/layout/category.pug","hash":"6bf52ce6605972ae627dd169dcbc70a03184aa60","modified":1586605512480},{"_id":"themes/Butterfly/layout/flink.pug","hash":"2130228c1d0cff16deac551a98ef395830e5f36c","modified":1586605512480},{"_id":"themes/Butterfly/layout/index.pug","hash":"dd4b6760f799e990271f866d8d765e21df0d6838","modified":1586605512501},{"_id":"themes/Butterfly/layout/page.pug","hash":"c964aee467fa721618a7296904930c76fbe500a7","modified":1586605512502},{"_id":"themes/Butterfly/layout/page-tags.pug","hash":"110c07cd0cc829ebbb51a373dd0a3f6ff7d757c8","modified":1586605512501},{"_id":"themes/Butterfly/layout/post.pug","hash":"96e08b68df172fb1619f09358f1da8c50b584176","modified":1586605512502},{"_id":"themes/Butterfly/layout/tag.pug","hash":"5fda92181fbb8db726a3d3e97048b0672d4b7b8c","modified":1586605512502},{"_id":"source/image/AntDesignForm总结/modal.png","hash":"e2e06c1d4221e0d58ddf05bf54d3baf18770b7a8","modified":1586610622973},{"_id":"source/image/AntDesignPro探索/20190312150742764.png","hash":"7195c4a5006d0eae1be5a292557b450f65c6c911","modified":1586613495556},{"_id":"source/image/AntDesignPro探索/20190312150929439.png","hash":"95ea643ebfccad9d3dd13d32f2b3125d1dfc083d","modified":1586613495608},{"_id":"source/image/AntDesignPro探索/2019031215140926.png","hash":"aea2d3b14caffc9a8705c54fb054970b2ab76cee","modified":1586613495334},{"_id":"source/image/AntDesignPro探索/20190312151053807.png","hash":"71de09ee4a2571fe6f15bfb0ab72f57fecdff0ed","modified":1586613495683},{"_id":"source/image/AntDesignPro探索/20190312152011733.png","hash":"5ebfaa1f282713b2fad33b230bbcd661cac4059f","modified":1586613495770},{"_id":"source/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvODU2M2ZjOGJhZTU1ODI3Yy5wbmc.jpeg","hash":"5adc2f974658dcdcb1d2c5cf4d4946e551c5021e","modified":1586614008271},{"_id":"source/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvYTkxMmI1YzhlNTk3YTYzYy5wbmc.jpeg","hash":"124651411d1258ae1ca253eea3eecad3a47a3997","modified":1586614008398},{"_id":"source/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvZWIwYzBmODU2NDE0OGZjMC5wbmc.jpeg","hash":"6b84d92b26daaa7d70b6f275456a65495819e23b","modified":1586614008656},{"_id":"source/image/React入门/20181123111537542.png","hash":"c35997a4f68255b834c654fa46a03879c79a9e8a","modified":1586614956004},{"_id":"source/image/React入门/20181123143905811.png","hash":"bfd5e05a8109dc65f49e30e7e043e8220ffacd53","modified":1586614956261},{"_id":"source/image/React入门/20181123134126335.png","hash":"9c0a1f31428bcfd09f5540989ec0ceec23e52020","modified":1586614956094},{"_id":"source/image/SpringBoot跨域/20190311105909443.png","hash":"597ceaa3d51037162b08d1e5ce90e17d61a003e8","modified":1586615118312},{"_id":"source/image/SpringBoot跨域/20190311110735834.png","hash":"1be7071509aad1e8b57968699800f771b96e5865","modified":1586615118458},{"_id":"source/image/cover/HEXO.png","hash":"c2c59b2d8b9c2f91be92d0b01bce3acd68921065","modified":1586609653520},{"_id":"source/image/cover/ANTD.png","hash":"898d9e3bc115706f2df19d89d34c786b20bea4e8","modified":1586609653338},{"_id":"source/image/cover/JWT.png","hash":"54e734ffae7e5a15498be8006003dac36d104c5b","modified":1586609653800},{"_id":"source/image/cover/React.jpeg","hash":"dc18c45077ecfaffaffd735900e9bb58d6cfd03f","modified":1586609653904},{"_id":"source/image/cover/KDpgvguMpGfqaHPjicRK.svg","hash":"5ae45f469ce3a423dad1794be649751d91f7f299","modified":1586609653846},{"_id":"source/image/cover/JavaScript.png","hash":"d051bd5987e275b1ebb32ddc841322d87f5f146a","modified":1586609653745},{"_id":"source/image/cover/antdP.png","hash":"e51856b14c5ba11da682c462541a1ae9f179f1fb","modified":1586609653387},{"_id":"source/image/cover/css.png","hash":"052b66320dfb67fe6758555be7bfba9d96ab01fc","modified":1586609653454},{"_id":"source/image/cover/http.png","hash":"c42bfcc7b07d40e89cafd721baed7c4b275fa551","modified":1586609653681},{"_id":"source/image/cover/history.jpeg","hash":"9d3cbcea80f59224e85021ecd695d355dfddb525","modified":1586609653636},{"_id":"source/image/cover/springboot.png","hash":"dc2c4b7dc46f2dfaec66c6d6c596caebbf86c83f","modified":1586609653954},{"_id":"source/image/cover/webpack.png","hash":"7886cc0dfb91faf4b35652b67919d59ade7b74ae","modified":1586609654073},{"_id":"source/image/cover/decorator.png","hash":"8a8cf27d287b3b02adc4a95db40430a1a6269613","modified":1586613274579},{"_id":"source/image/WebpackCleanWebpackPlugin/20190622155123842.png","hash":"51a6b66753f63d1160b83ce9c819dc5931ef474f","modified":1586615348700},{"_id":"source/image/cover/web.jpeg","hash":"d2bcd938948a48679ddb81531b38bec32c3c0f1c","modified":1586609654011},{"_id":"source/image/httpHttps/15fc2525666dc96e.jpg","hash":"57028340f40d6959e5cdf702c5c2d74c90a42f33","modified":1586614425728},{"_id":"source/image/historyBack函数/20190318092239845.png","hash":"50b0bad4ccea97e01be0b4a5b9bc900ce703ae10","modified":1586615436468},{"_id":"source/image/深拷贝浅拷贝/20190428204522836.png","hash":"33e1d52e178309724c364a23e2600fd8dadd5c54","modified":1586614594319},{"_id":"source/image/深拷贝浅拷贝/20190428204904611.png","hash":"7caef4b8f9872e6d80d21f807c93ba6a4c9ceb21","modified":1586614594460},{"_id":"source/image/深拷贝浅拷贝/20190428205350562.png","hash":"1a81ad3e621d51556a56bee13d2d5885c77f1475","modified":1586614594606},{"_id":"source/image/深拷贝浅拷贝/20190428205243797.png","hash":"6a69ed4fdcab7d20174a95b0a8006d419440c049","modified":1586614594525},{"_id":"source/image/深拷贝浅拷贝/20190428205853748.png","hash":"f31ac1cc377d72e17d69a227b66567d207538e86","modified":1586614594636},{"_id":"themes/Butterfly/layout/includes/additional-js.pug","hash":"d4969489466f02e3281cd442be8346136a0e45e9","modified":1586605512481},{"_id":"themes/Butterfly/layout/includes/footer.pug","hash":"855c5d7e427730178c2f6e4f3e816d7fbee40198","modified":1586605512484},{"_id":"themes/Butterfly/layout/includes/head.pug","hash":"b6a53054ddd8adb5bc39c36af140aadd1f4fb517","modified":1586605512485},{"_id":"themes/Butterfly/layout/includes/layout.pug","hash":"8f34a8ab1bf80da1570771ca23cbac2c514e9e0a","modified":1586605512492},{"_id":"themes/Butterfly/layout/includes/pagination.pug","hash":"a6587bcbdd1477bfba8c6c6c6a327224ed5a3951","modified":1586605512494},{"_id":"themes/Butterfly/layout/includes/recent-posts.pug","hash":"6a0ef6a4a2096a053ca3bfeb4636c64d0f633aef","modified":1586605512495},{"_id":"themes/Butterfly/layout/includes/rightside.pug","hash":"9ba725c0f9661a156f82dee35a422fdd4639a5ce","modified":1586605512495},{"_id":"themes/Butterfly/layout/includes/sidebar.pug","hash":"b41c97424c588209c0d24817f5120b50933135fd","modified":1586605512498},{"_id":"themes/Butterfly/scripts/events/404.js","hash":"551bd94e99cc567b3e287e30720c34eb3f5b205d","modified":1586605512502},{"_id":"themes/Butterfly/scripts/events/replace-config.js","hash":"4acb5a4519e1b5a29c23c83d1f70c1e298931e30","modified":1586605512503},{"_id":"themes/Butterfly/scripts/filters/hide-post.js","hash":"15046d3b80cd0d981dbd4caccd53972f184e98e3","modified":1586605512503},{"_id":"themes/Butterfly/scripts/filters/post-lazyload.js","hash":"05d0768fde7151bb6317ee844a62caa95a7af30c","modified":1586605512503},{"_id":"themes/Butterfly/scripts/filters/random-cover.js","hash":"d9a7e393abee3e835b46f441c731c4f92ec6f673","modified":1586605512503},{"_id":"themes/Butterfly/scripts/helpers/list-archives.js","hash":"27ffc169be6711ec08f47d625e679c06d1478391","modified":1586605512504},{"_id":"themes/Butterfly/scripts/helpers/related-post.js","hash":"5b18f227462b500a22e21c8d9c10e5097e928de8","modified":1586605512504},{"_id":"themes/Butterfly/scripts/tags/gallery.js","hash":"23bc9b8d90c569a160c6299704cc59f5e26579ad","modified":1586605512504},{"_id":"themes/Butterfly/scripts/tags/hide.js","hash":"ed32b4c668b53e0eb4f2076def51eea16b3ea4fd","modified":1586605512504},{"_id":"themes/Butterfly/scripts/tags/mermaid.js","hash":"ea088b5bd601a3ac3dc8ca99cef09988546b8c46","modified":1586605512504},{"_id":"themes/Butterfly/scripts/tags/note.js","hash":"03d608278de2dc9c6b2af69e8d36c77c0272e2bf","modified":1586605512505},{"_id":"themes/Butterfly/source/css/index.styl","hash":"f5fae01f87c5e99a840456ba67f90e80cad4fb75","modified":1586605512511},{"_id":"themes/Butterfly/source/css/var.styl","hash":"1e1546545bc8c685fb2cf1da4edae089b203959e","modified":1586605512512},{"_id":"themes/Butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1586605512513},{"_id":"themes/Butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1586605512513},{"_id":"themes/Butterfly/source/img/DerrickAlipay.jpg","hash":"97d102cc0d00683d45b78ba3cb141d75d77b3613","modified":1586610862169},{"_id":"themes/Butterfly/source/img/DerrickWechat.png","hash":"a3d80cbd61d52c93fe2dbdfd4240d96648e5c114","modified":1586610862302},{"_id":"themes/Butterfly/source/img/comment_bg.png","hash":"1adfc4ee925fb4f922c24d7774e7c46d940fe31b","modified":1586605512517},{"_id":"themes/Butterfly/source/img/favicon.ico","hash":"47877628a0f0e0f06430845b0e3a75e0ba1361ce","modified":1586605512517},{"_id":"themes/Butterfly/source/img/avatar.png","hash":"92434097d199cec038f7aa9a25e32054b0d49f21","modified":1586611615432},{"_id":"themes/Butterfly/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1586605512519},{"_id":"themes/Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1586605512519},{"_id":"themes/Butterfly/source/img/post_loadding.svg","hash":"549c58cd09dbeefd573ce10646c49ded8bcc48ec","modified":1586605512528},{"_id":"themes/Butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1586605512524},{"_id":"themes/Butterfly/source/img/post.jpg","hash":"554584218db9279874e48559f9a8e86b9ecca94b","modified":1586605512527},{"_id":"themes/Butterfly/source/js/main.js","hash":"1dd462d995e0d85ad9e1d60002a3d5ac02c88373","modified":1586605512528},{"_id":"themes/Butterfly/source/js/utils.js","hash":"e3423175d06a8fddc937d77990a172180476dbec","modified":1586605512534},{"_id":"themes/Butterfly/source/js/tw_cn.js","hash":"d468bf1634950ed1ffd7cedd3c87f2037e27543f","modified":1586605512533},{"_id":"source/image/AntDesignPro探索/2019031215120430.png","hash":"88420cbdf879904742f5a838e0693f8ae19d566c","modified":1586613495291},{"_id":"source/image/AntDesignPro探索/20190312151839845.png","hash":"2fdadb1ef8077f5479c3b7f54e7fde29e7115686","modified":1586613495720},{"_id":"source/image/CSSModules警告/aHR0cDovL2kyLnRpaW1nLmNvbS82OTE2NDMvMmVmODNhMzcxNjA4OWEwZS5wbmc.jpeg","hash":"89a001fc84f439c824224e0ae3696bd587d2186b","modified":1586614008751},{"_id":"source/image/SpringBootJWT/20190325103836546.png","hash":"66340b232074dc97c15b299a763926432aa90d74","modified":1586614756874},{"_id":"source/image/SpringBoot跨域/20190311110721789.png","hash":"fe87a2484bf20c0568bfda200d8b776ad0bedd74","modified":1586615118362},{"_id":"themes/Butterfly/source/img/1avatar.png","hash":"77f00530b5f24207d00f3e92f9821cc1d4eb3d40","modified":1586611595518},{"_id":"source/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvMGM4ZDhiNjZlMGNmZTY0Ny5wbmc.jpeg","hash":"42a16835031c841f79dd4bcac8101cc079c06310","modified":1586614008190},{"_id":"themes/Butterfly/layout/includes/comments/disqusjs.pug","hash":"050085054a68942e8833c6a4033fb437b6b01e52","modified":1586605512481},{"_id":"themes/Butterfly/layout/includes/comments/disqus.pug","hash":"821d968122bab8ce1ce04dc553b731eaf8e0d181","modified":1586605512481},{"_id":"themes/Butterfly/layout/includes/comments/index.pug","hash":"91d361f12923a5750605ab6449cba33600c7868b","modified":1586605512482},{"_id":"themes/Butterfly/layout/includes/comments/gitalk.pug","hash":"e98f5c199a76ad939a29a46c0dcbf7e85ec60ed2","modified":1586605512482},{"_id":"themes/Butterfly/layout/includes/comments/laibili.pug","hash":"00022f763085b6852bc172b0ba91b0eacb403389","modified":1586605512483},{"_id":"themes/Butterfly/layout/includes/comments/valine.pug","hash":"e58e3d3e004ae1de4235993da901cf59b9bdcc53","modified":1586605512484},{"_id":"themes/Butterfly/layout/includes/comments/utterances.pug","hash":"9427cb07bcfe2bc7198755eeebf60f9fe430a342","modified":1586605512483},{"_id":"themes/Butterfly/layout/includes/head/Open_Graph.pug","hash":"90c872160a9d6e71d02a26517b35abac9ba56df1","modified":1586605512485},{"_id":"themes/Butterfly/layout/includes/head/analytics.pug","hash":"8ec0609f14c284c3e6120940d7c4d7f1f201cd67","modified":1586605512486},{"_id":"themes/Butterfly/layout/includes/head/config.pug","hash":"b2aa39591062f68d92b24c11b74091f3798e18f3","modified":1586605512487},{"_id":"themes/Butterfly/layout/includes/head/config_site.pug","hash":"2c7a5a097a2f815ba43a4e99c810405da3b9eebc","modified":1586605512487},{"_id":"themes/Butterfly/layout/includes/head/dns_prefetch.pug","hash":"54f091a1736e6186707a5ead25bf98fcd55e9661","modified":1586605512488},{"_id":"themes/Butterfly/layout/includes/head/google_adsense.pug","hash":"ff4ceda534cdd711cfa2cb9e95e36258988674e1","modified":1586605512489},{"_id":"themes/Butterfly/layout/includes/head/noscript.pug","hash":"47a10164395d8200c8d962df68a01e7deee4053b","modified":1586605512490},{"_id":"themes/Butterfly/layout/includes/head/pwa.pug","hash":"be1ff710e4381fc684243313dcadf0140d7469de","modified":1586605512490},{"_id":"themes/Butterfly/layout/includes/head/comment.pug","hash":"7d59c68eafede1974380a139cad47ebf0bc64b24","modified":1586605512486},{"_id":"themes/Butterfly/layout/includes/head/subtitle.pug","hash":"4816345ccad0cd9994291b93eea61ecfca8c5d00","modified":1586605512490},{"_id":"themes/Butterfly/layout/includes/head/site_verification.pug","hash":"f5c8ec73c797ff3455e732fa7c92c856692f3ce5","modified":1586605512490},{"_id":"themes/Butterfly/layout/includes/header/header.pug","hash":"61a5a52aff9b501b802a6b8c83a789086710831b","modified":1586605512491},{"_id":"themes/Butterfly/layout/includes/header/index.pug","hash":"387ee38180784500439dac819a8e76763d0d57c5","modified":1586605512491},{"_id":"themes/Butterfly/layout/includes/header/menu_item.pug","hash":"92527e432748c978aca4127db93421d263b7a4b8","modified":1586605512491},{"_id":"themes/Butterfly/layout/includes/head/darkmode.pug","hash":"dcc8c01e1b0f8a4960ed873f49fb0f18d9912d21","modified":1586605512488},{"_id":"themes/Butterfly/layout/includes/header/social.pug","hash":"0d684f897fcdfe1e98300851b7fd955a30b68dd9","modified":1586605512492},{"_id":"themes/Butterfly/layout/includes/header/post-info.pug","hash":"25036c657069fbb2fb17e9b973571ca5168aa2bf","modified":1586605512491},{"_id":"themes/Butterfly/layout/includes/math/index.pug","hash":"ec97f284626b67208370b5084e5c5822844fa30a","modified":1586605512492},{"_id":"themes/Butterfly/layout/includes/math/katex.pug","hash":"73356f1068c7426597e268d6c4aefa2b0ac3a1d9","modified":1586605512492},{"_id":"themes/Butterfly/layout/includes/math/mathjax.pug","hash":"6ccfaa776fc913ccf8b34825d918ab2b4d457434","modified":1586605512492},{"_id":"themes/Butterfly/layout/includes/math/mermaid.pug","hash":"db848ff451d4c58670af415882ca6bb2e0da971b","modified":1586605512493},{"_id":"themes/Butterfly/layout/includes/mixins/UI.pug","hash":"c5bb1e3cb5e0154f1c2b91eac484c60783a6e4eb","modified":1586605512493},{"_id":"themes/Butterfly/layout/includes/mixins/article-sort.pug","hash":"3d86443ad9bc1975a950ad9ca8c38fa35169404d","modified":1586605512493},{"_id":"themes/Butterfly/layout/includes/mobile-sidebar/index.pug","hash":"d12fab033fb32b55abbc9be9b04cc6ab6465b98e","modified":1586605512493},{"_id":"themes/Butterfly/layout/includes/mobile-sidebar/mobile-menus.pug","hash":"006c7156dff7a07b738d982433c0f52142826bb5","modified":1586605512493},{"_id":"themes/Butterfly/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1586605512496},{"_id":"themes/Butterfly/layout/includes/post/post-copyright.pug","hash":"8efc0b7886bdb5959e173b5e11f5ffb8d1c5230e","modified":1586605512494},{"_id":"themes/Butterfly/layout/includes/post/reward.pug","hash":"f0594d919091ad1f9b88389cba3cee5eabca23f7","modified":1586605512494},{"_id":"themes/Butterfly/layout/includes/share/addtoany.pug","hash":"bbf5b70460b17c4fecb9ee6880aa71cdb2d807a8","modified":1586605512497},{"_id":"themes/Butterfly/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1586605512496},{"_id":"themes/Butterfly/layout/includes/search/local-search.pug","hash":"a45b5453e35479e58cd44b6bd2af0e08789890af","modified":1586605512496},{"_id":"themes/Butterfly/layout/includes/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1586605512497},{"_id":"themes/Butterfly/layout/includes/share/index.pug","hash":"c341aaa00113681b22f945f5004e6b22c8a0ca69","modified":1586605512497},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-nest.pug","hash":"3d7a3654ae03fd2665ea355ee9eac48af0ee82af","modified":1586605512499},{"_id":"themes/Butterfly/layout/includes/share/share-js.pug","hash":"07c62fda87785fb9294f9027a71d80197cd9d849","modified":1586605512498},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon-piao.pug","hash":"001f28c633d2ec2d5ef9ca047fb1fe61ffefd66f","modified":1586605512499},{"_id":"themes/Butterfly/layout/includes/third-party/pangu.pug","hash":"3f7de99f4307ac9bfd89e669aaa7c2ae54d5224a","modified":1586605512499},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon.pug","hash":"b4acf48c98ba2a6a5a5fb5387a0fd610bdfd55ef","modified":1586605512499},{"_id":"themes/Butterfly/layout/includes/widget/card_ad.pug","hash":"2e940de1a6261fd378e16e4cd3362a9d69c12f50","modified":1586605512499},{"_id":"themes/Butterfly/layout/includes/widget/card_announcement.pug","hash":"53d784e8d1d1da34c7407d440bf71dd306c413a8","modified":1586605512500},{"_id":"themes/Butterfly/layout/includes/widget/card_archives.pug","hash":"4abbd02c7dcb2c0a42062d6c18d87faa60988914","modified":1586605512500},{"_id":"themes/Butterfly/layout/includes/widget/card_author.pug","hash":"974d311f355bbdf8c816703447aaee1c8bc13084","modified":1586605512500},{"_id":"themes/Butterfly/layout/includes/widget/card_categories.pug","hash":"7d4201dfe3a096c2470c2f1f4ded7b02e3250a40","modified":1586605512500},{"_id":"themes/Butterfly/layout/includes/widget/card_recent_post.pug","hash":"a3efcad9b4cbd609cf57021d1759d0ef5e479187","modified":1586605512500},{"_id":"themes/Butterfly/layout/includes/widget/card_tags.pug","hash":"284f10318cd7e048fcf6fad70c38c562520244b8","modified":1586605512501},{"_id":"themes/Butterfly/layout/includes/widget/card_webinfo.pug","hash":"6caff3cb958ccb0da7d88b51d87e22d27fcd9625","modified":1586605512501},{"_id":"themes/Butterfly/layout/includes/widget/index.pug","hash":"97286029b3c5fde6b284e7b560ecc5f5a199ff71","modified":1586605512501},{"_id":"themes/Butterfly/source/css/_highlight/diff.styl","hash":"b0079f6da761935b720d70dafd826ef62fad86d2","modified":1586605512505},{"_id":"themes/Butterfly/source/css/_global/index.styl","hash":"f512f4fe7a78862551f72fca4867a941b9e4d434","modified":1586605512505},{"_id":"themes/Butterfly/source/css/_highlight/highlight.styl","hash":"647d9451374df4786684397f82334d541929d66a","modified":1586605512505},{"_id":"themes/Butterfly/source/css/_highlight/theme.styl","hash":"efceb8105830544cef5e4afad3243326b3118fc1","modified":1586605512506},{"_id":"themes/Butterfly/source/css/_layout/404.styl","hash":"964d16c30f307ec354b47375aa5f00f0417c7bf0","modified":1586605512506},{"_id":"themes/Butterfly/source/css/_layout/category.styl","hash":"7267043e52a9e620adfa860bdb3e4de400ff2596","modified":1586605512506},{"_id":"themes/Butterfly/source/css/_layout/aside.styl","hash":"e1efce89dcce9930bdd164d7d39135ea497ee7b0","modified":1586605512506},{"_id":"themes/Butterfly/source/css/_layout/flink.styl","hash":"0631c50cdccd29ca41fbac3423b2fd91a9be49b8","modified":1586605512506},{"_id":"themes/Butterfly/source/css/_layout/footer.styl","hash":"d8709e29efcfa0a7356384026dfbaac8861d3baa","modified":1586605512507},{"_id":"themes/Butterfly/source/css/_layout/gallery.styl","hash":"750bfc09261fe3e06f17f934eee9fee96ee2b4c2","modified":1586605512507},{"_id":"themes/Butterfly/source/css/_layout/head.styl","hash":"b4bb249bc38f75fc55dde3e2017b4890004a20bd","modified":1586605512507},{"_id":"themes/Butterfly/source/css/_layout/mobile-sidebar.styl","hash":"f2d5dbb8e0b0ec786f00a09f0f51a82a0fa41ae1","modified":1586605512507},{"_id":"themes/Butterfly/source/css/_layout/note.styl","hash":"1ec06d5ac4148798babd2475a5d10f0d3a1b5870","modified":1586605512507},{"_id":"themes/Butterfly/source/css/_layout/page.styl","hash":"8df965312dc8eae05a3e34a72aa924a39629aed7","modified":1586605512508},{"_id":"themes/Butterfly/source/css/_layout/pagination.styl","hash":"d6f0b7d9dc10761c15a5a2b84cc63e914a10d339","modified":1586605512508},{"_id":"themes/Butterfly/source/css/_layout/post.styl","hash":"814c8c712f2041f905ba4fcc75bb837d70aa1880","modified":1586605512508},{"_id":"themes/Butterfly/source/css/_layout/reward.styl","hash":"92b615795f02eff2a018edb425f923968c9e9814","modified":1586605512509},{"_id":"themes/Butterfly/source/css/_layout/relatedposts.styl","hash":"1103f2cead8ab1aa9945c20c7d608bb4b829d2cd","modified":1586605512508},{"_id":"themes/Butterfly/source/css/_layout/rightside.styl","hash":"9a44881bd4c2aea0b0774809d91d58e4067496ed","modified":1586605512509},{"_id":"themes/Butterfly/source/css/_layout/third-party.styl","hash":"c9a517fe216ef4d54f0ce5697d5cd460ddab4687","modified":1586605512509},{"_id":"themes/Butterfly/source/css/_mode/readmode.styl","hash":"26342e889e8488f8a25249e0bb6da3362e8ff0f6","modified":1586605512510},{"_id":"themes/Butterfly/source/css/_mode/darkmode.styl","hash":"aebf5f315995d2e5eff763298bd3412a6fc95d2a","modified":1586605512510},{"_id":"themes/Butterfly/source/css/_layout/sidebar.styl","hash":"33da3da65715ce1a85b8ecab92e0eab6ce620a58","modified":1586605512509},{"_id":"themes/Butterfly/source/css/_search/algolia.styl","hash":"280f621301da0bea641276e212f50e67f060b6d4","modified":1586605512510},{"_id":"themes/Butterfly/source/css/_search/index.styl","hash":"d4c414d689bebe706021f7e904ec874c26a6cff6","modified":1586605512511},{"_id":"themes/Butterfly/source/css/_search/local-search.styl","hash":"7e66ab006450b73f5a300d8c6a91a6c895975ffd","modified":1586605512511},{"_id":"themes/Butterfly/source/css/_third-party/normalize.min.css","hash":"001bd6d68a9b9af5dd0158fe116889434f36b1fd","modified":1586605512511},{"_id":"themes/Butterfly/source/js/search/algolia.js","hash":"09219d497f54c834ec506a4f63d02f6cad7c2dc7","modified":1586605512529},{"_id":"themes/Butterfly/source/js/search/local-search.js","hash":"bf9ebb4ac93ccdd93e9eb37f69d17d5327e01040","modified":1586605512530},{"_id":"themes/Butterfly/source/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1586605512531},{"_id":"themes/Butterfly/source/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1586605512531},{"_id":"themes/Butterfly/source/js/third-party/canvas-ribbon.js","hash":"05fc79ebcf673e2d257583554eef62d162ade5e8","modified":1586605512531},{"_id":"themes/Butterfly/source/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1586605512532},{"_id":"themes/Butterfly/source/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1586605512532},{"_id":"themes/Butterfly/source/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1586605512532},{"_id":"themes/Butterfly/source/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1586605512530},{"_id":"source/image/WebpackCleanWebpackPlugin/20190622155255789.png","hash":"5a9b0df917450afb2d036131b4a78ea9f44fcd5f","modified":1586615348778},{"_id":"themes/Butterfly/source/img/index.jpg","hash":"d79fc7faf6d37b088bd638ceef641dd33beb353f","modified":1586605512523},{"_id":"source/image/AntDesignPro探索/2019031215175956.png","hash":"342395e4f6eda6e2288a8554341f7df2ba3d3427","modified":1586613495515},{"_id":"source/image/Web前端学习路线/20190328205449472.png","hash":"e03d1580df71c0abd46cf5eb1d12887408f3180d","modified":1586615223688},{"_id":"public/2019/07/30/React-Hook-倒计时/index.html","hash":"164de909343b0785249717748d927be08896c1a9","modified":1586615940187},{"_id":"public/2019/06/19/window-history-back-缓存-返回上级页面不刷新数据/index.html","hash":"a05f69a4c9f2ff57c6673fed470045d45d9dec40","modified":1586615940187},{"_id":"public/2019/06/19/Web前端-学习目录-学习框架-系统性的学习Web前端/index.html","hash":"4821ce3494d8db18163ad5ff397afaa559169f9d","modified":1586615940187},{"_id":"public/2019/06/17/Hexo+GitHub构建你的博客/index.html","hash":"e53ea8f3f605d004f5899aa770c32302ccc0b3e3","modified":1586615940187},{"_id":"public/about/index.html","hash":"d7fa804e5318cfa97695ec9f25c157bcf48b78b9","modified":1586615940187},{"_id":"public/clean/index.html","hash":"cafd5858190a2f6a5dac2476d93fa2e8aba3dc3b","modified":1586615940187},{"_id":"public/2020/04/11/session和cookie的理解/index.html","hash":"10919ce60def86bd5f543dfb670096f349bd391d","modified":1586615940187},{"_id":"public/2019/09/15/装饰器(Decorator)和React高阶组件(HOC)/index.html","hash":"20411c63e35ee0947cd144f8d99fc737398f8b04","modified":1586615940187},{"_id":"public/2019/08/24/HTTPHTTPS协议/index.html","hash":"5b2e9e63e0c4bdd90572b0414b5b124c05f36225","modified":1586615940187},{"_id":"public/2019/07/30/React-Hook-useState-useEffect-componentDidMount-componentDidUpdate-componentWillUnmount/index.html","hash":"69e63b2d16dc786f68b033e92324a174cd6ff623","modified":1586615940187},{"_id":"public/2019/07/28/5分钟快速精通Ant-Design-Form-1分钟快速构建复杂Ant-Design-Form表单/index.html","hash":"2d306c69e55ab67f61b394562ca5cba4c8164162","modified":1586615940187},{"_id":"public/2019/06/29/chunk-0-mini-css-extract-plugin-解决-CSS-Modules-警告/index.html","hash":"7d3359b784a26a9d8a7be5e1c20b371944b2a31c","modified":1586615940187},{"_id":"public/2019/06/22/Webpack-CleanWebpackPlugin-is-not-a-constructor/index.html","hash":"a961dd3e1aaaceb6e77ba08bc2f2b55e16683658","modified":1586615940187},{"_id":"public/2019/06/19/React入门（一）-State详解/index.html","hash":"9b2de51fc1600e70e73d8c99f8a1e84147bd7cec","modified":1586615940187},{"_id":"public/2019/06/19/sprng-boot-跨域-过滤器-fetch-react-Response-to-preflight-request-doesn-t-pass-access-control-check/index.html","hash":"3d4dc03351130a06203d964e4bcf53996a70a67d","modified":1586615940187},{"_id":"public/2019/06/19/ant-design-pro-2-0-新页面探索-umi-页面404-react/index.html","hash":"00b3693ff3a8b99e1898997f27c6d200bc084559","modified":1586615940187},{"_id":"public/2019/06/19/JWT-spring-boot-JAVA-使用步骤-spring-boot2-0/index.html","hash":"524bbad29646e2667a366e2aa50a306ea8fa75f3","modified":1586615940187},{"_id":"public/2019/06/19/ant-design-Form-组件总结-结合Modal-自定义Modal的实现-（Upload-Input-Select-DatePicker-Cascader）/index.html","hash":"491cf270aaee687cc8c560176c9562dd82f768fe","modified":1586615940187},{"_id":"public/2019/06/19/JavaScript-浅拷贝-深拷贝-赋值-引用-JS/index.html","hash":"52808ab0898a702233332a4581736d14c453914b","modified":1586615940187},{"_id":"public/archives/index.html","hash":"86d336292af65c25d979044373c645bde2df7441","modified":1586615940187},{"_id":"public/archives/page/2/index.html","hash":"bd5ecb83b0d259f9b16149e413e8509396ab74ee","modified":1586615940187},{"_id":"public/archives/2019/index.html","hash":"2370a4110064a9b0cd50c7d0a1516f40ced18c47","modified":1586615940187},{"_id":"public/archives/2019/page/2/index.html","hash":"79a701ab96fcf4917c4dee2ea0807b9b7c9c1ea7","modified":1586615940187},{"_id":"public/archives/2019/06/index.html","hash":"87a6c4cfecfe04f092170cb2b378c4071605f5db","modified":1586615940187},{"_id":"public/archives/2019/06/page/2/index.html","hash":"d0074592e16a634237cf8620beb7d1d2ae884422","modified":1586615940187},{"_id":"public/archives/2019/07/index.html","hash":"2c3d71780c488a1701aacf1e3462b4a3ce9761b3","modified":1586615940187},{"_id":"public/archives/2019/08/index.html","hash":"5847b1f84a49aad0bf28caee9ceff8089d1633c9","modified":1586615940187},{"_id":"public/archives/2019/09/index.html","hash":"def28b57ce2b9d73f66e714a5c461130174b09b3","modified":1586615940187},{"_id":"public/archives/2020/index.html","hash":"e42bf91237ca09883bc69b25b412ed2dbe2a3a06","modified":1586615940187},{"_id":"public/archives/2020/04/index.html","hash":"998453a252e11c8fc419390abc550a7bda93fc4c","modified":1586615940187},{"_id":"public/categories/Ant-Design/index.html","hash":"819e7ad7499d0817c6df31bbb995d4144b7d28b2","modified":1586615940187},{"_id":"public/categories/Java/index.html","hash":"ee84a410ab16f1faf5934e6a7478f273f29deff7","modified":1586615940187},{"_id":"public/categories/博客/index.html","hash":"d2d586046f22ee723ace2474b948837fe2f4cc33","modified":1586615940187},{"_id":"public/categories/JavaScript/index.html","hash":"1df6e7c14342a26f1602b8ca51c02d0d4834ed15","modified":1586615940187},{"_id":"public/categories/React/index.html","hash":"fa27aa47ed8e02d5e618b140ea19164690f1d103","modified":1586615940187},{"_id":"public/categories/Java/Spring-Boot/index.html","hash":"9afa692111810ec79ee52092d87e2051941718da","modified":1586615940187},{"_id":"public/categories/Web前端/index.html","hash":"a7f9881b4a709d17083c9633989086c83b8f6c1d","modified":1586615940187},{"_id":"public/categories/WebPack/index.html","hash":"0fe6d4ba70ca4866a18b462c7b2e178a409df0ae","modified":1586615940187},{"_id":"public/categories/Ant-Design-Pro/index.html","hash":"e8f334d08db9b663ba815d7f9306316acf826e36","modified":1586615940187},{"_id":"public/categories/CSS/index.html","hash":"39c1be6cc3d8ebba4c5c7e1858caa85d5729df20","modified":1586615940187},{"_id":"public/categories/HTTP/index.html","hash":"7879dea3fb24e3169525bd630158c261055efc78","modified":1586615940187},{"_id":"public/categories/ES6/index.html","hash":"1edf0cf57496f5019e6c0e4cebebd0e8b8ac5cd3","modified":1586615940187},{"_id":"public/categories/Ant-Design/JavaScript/index.html","hash":"018dc10a146ebafff7884aa06ef02b21df5b3f29","modified":1586615940187},{"_id":"public/tags/Ant-Design-Form/index.html","hash":"e690a3629906d4c295805b16b1947465930cac16","modified":1586615940187},{"_id":"public/tags/Ant-Design/index.html","hash":"a82df882c4ccca51266bb7d3bfeefd2119ded0c8","modified":1586615940187},{"_id":"public/tags/Spring-Boot-2-0/index.html","hash":"c066d23ef31e53ec74d03b6a4deb5a8ed150f098","modified":1586615940187},{"_id":"public/tags/Java/index.html","hash":"ba69f71bdc16127cd26bd2274357b16ed5c86919","modified":1586615940187},{"_id":"public/tags/JWT/index.html","hash":"fa79a9498c5d804f68df9e0cf9a9d0d8808abb0d","modified":1586615940187},{"_id":"public/tags/Hexo/index.html","hash":"2b02f190d36c5f049095148d1912900ee5035735","modified":1586615940187},{"_id":"public/tags/GitHub/index.html","hash":"0c9fc5746ecaf22923135bad7eb0be950d0f6c39","modified":1586615940187},{"_id":"public/tags/深拷贝/index.html","hash":"3382ee36d4189c86b180b2b10f1587054c55ede0","modified":1586615940187},{"_id":"public/tags/浅拷贝/index.html","hash":"5eb9ca8c91bf80f5fae6d0d787a68ffed45639f9","modified":1586615940187},{"_id":"public/tags/ReactHook/index.html","hash":"227fd0cd32e60df491fd562b146444d7897de69a","modified":1586615940187},{"_id":"public/tags/React/index.html","hash":"209d7b9c78e2854bbc132d67046b89ac367bbbd0","modified":1586615940187},{"_id":"public/tags/倒计时/index.html","hash":"6babbedeb47864ea07d9684cc63fc4d8b6692588","modified":1586615940187},{"_id":"public/tags/系统性的学习/index.html","hash":"020660b07bb69f2c11f095caecf9b8867858b58d","modified":1586615940187},{"_id":"public/tags/学习目录/index.html","hash":"053b576e25fa7ed4bea3a0d56da84743945e288b","modified":1586615940187},{"_id":"public/tags/Web前端/index.html","hash":"77a0f03df6e619f866478b96d44f502e59c515b4","modified":1586615940187},{"_id":"public/tags/学习框架/index.html","hash":"deae64fd1fc8285017fe51559e579a1fa73e5fe2","modified":1586615940187},{"_id":"public/tags/WebPack/index.html","hash":"451f159d9276d8e5961249803058b34260c4dfae","modified":1586615940187},{"_id":"public/tags/clean-webpack-plugin/index.html","hash":"d207e9adf98ee82d72103912f2e6a374bb93b1cd","modified":1586615940187},{"_id":"public/tags/React-Router/index.html","hash":"6188e99a672e5c17e017164ef6021a4b4932c97a","modified":1586615940187},{"_id":"public/tags/UMI/index.html","hash":"dfd3ded05bf8858db96d3ec5e39b55bf34d0a314","modified":1586615940187},{"_id":"public/tags/Ant-Design-Pro/index.html","hash":"fe6efa9c87a5b816e9e850fb2f6c8301d51f1a41","modified":1586615940187},{"_id":"public/tags/CSS-Module/index.html","hash":"6149d2e664d8e791a1452296098424e9628d6989","modified":1586615940187},{"_id":"public/tags/Spring-Boot/index.html","hash":"8896e54402025c7f1561379f3c2593ea0770e182","modified":1586615940187},{"_id":"public/tags/HTTP/index.html","hash":"1e57aaf1449ae708342add5392bddcf48f99465c","modified":1586615940187},{"_id":"public/tags/跨域/index.html","hash":"7efa99753e1d507ce41aa046ece65e8352bb9a8d","modified":1586615940187},{"_id":"public/tags/HTML/index.html","hash":"085e7c27248d2415553e090996762e12c022c699","modified":1586615940187},{"_id":"public/tags/JavaScript/index.html","hash":"36827578f6aaca650eba6b024397828919a1402b","modified":1586615940187},{"_id":"public/tags/ES6/index.html","hash":"442e262be1b4b7b76da564f8af74d9426b74d64e","modified":1586615940187},{"_id":"public/tags/State/index.html","hash":"853cac2785b3c83418997426b305b8898143e3a5","modified":1586615940187},{"_id":"public/tags/Ant-Design组件合集/index.html","hash":"bd537dcb66f0e2d12161d095ed041aa21f762102","modified":1586615940187},{"_id":"public/index.html","hash":"2403775812ebcd5cd2fdce6a4c80d15a6abcf36a","modified":1586615940187},{"_id":"public/page/2/index.html","hash":"dd452167699d015f75f71f405cbbd9556117d2bc","modified":1586615940187},{"_id":"public/image/AntDesignPro探索/20190312150742764.png","hash":"7195c4a5006d0eae1be5a292557b450f65c6c911","modified":1586615940187},{"_id":"public/image/AntDesignPro探索/2019031215140926.png","hash":"aea2d3b14caffc9a8705c54fb054970b2ab76cee","modified":1586615940187},{"_id":"public/image/AntDesignPro探索/20190312151053807.png","hash":"71de09ee4a2571fe6f15bfb0ab72f57fecdff0ed","modified":1586615940187},{"_id":"public/image/AntDesignPro探索/20190312152011733.png","hash":"5ebfaa1f282713b2fad33b230bbcd661cac4059f","modified":1586615940187},{"_id":"public/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvODU2M2ZjOGJhZTU1ODI3Yy5wbmc.jpeg","hash":"5adc2f974658dcdcb1d2c5cf4d4946e551c5021e","modified":1586615940187},{"_id":"public/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvYTkxMmI1YzhlNTk3YTYzYy5wbmc.jpeg","hash":"124651411d1258ae1ca253eea3eecad3a47a3997","modified":1586615940187},{"_id":"public/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvZWIwYzBmODU2NDE0OGZjMC5wbmc.jpeg","hash":"6b84d92b26daaa7d70b6f275456a65495819e23b","modified":1586615940187},{"_id":"public/image/React入门/20181123111537542.png","hash":"c35997a4f68255b834c654fa46a03879c79a9e8a","modified":1586615940187},{"_id":"public/image/React入门/20181123143905811.png","hash":"bfd5e05a8109dc65f49e30e7e043e8220ffacd53","modified":1586615940187},{"_id":"public/image/React入门/20181123134126335.png","hash":"9c0a1f31428bcfd09f5540989ec0ceec23e52020","modified":1586615940187},{"_id":"public/image/SpringBoot跨域/20190311105909443.png","hash":"597ceaa3d51037162b08d1e5ce90e17d61a003e8","modified":1586615940187},{"_id":"public/image/SpringBoot跨域/20190311110735834.png","hash":"1be7071509aad1e8b57968699800f771b96e5865","modified":1586615940187},{"_id":"public/image/cover/HEXO.png","hash":"c2c59b2d8b9c2f91be92d0b01bce3acd68921065","modified":1586615940187},{"_id":"public/image/cover/ANTD.png","hash":"898d9e3bc115706f2df19d89d34c786b20bea4e8","modified":1586615940187},{"_id":"public/image/cover/JWT.png","hash":"54e734ffae7e5a15498be8006003dac36d104c5b","modified":1586615940187},{"_id":"public/image/cover/React.jpeg","hash":"dc18c45077ecfaffaffd735900e9bb58d6cfd03f","modified":1586615940187},{"_id":"public/image/cover/KDpgvguMpGfqaHPjicRK.svg","hash":"5ae45f469ce3a423dad1794be649751d91f7f299","modified":1586615940187},{"_id":"public/image/cover/JavaScript.png","hash":"d051bd5987e275b1ebb32ddc841322d87f5f146a","modified":1586615940187},{"_id":"public/image/cover/antdP.png","hash":"e51856b14c5ba11da682c462541a1ae9f179f1fb","modified":1586615940187},{"_id":"public/image/cover/css.png","hash":"052b66320dfb67fe6758555be7bfba9d96ab01fc","modified":1586615940187},{"_id":"public/image/cover/http.png","hash":"c42bfcc7b07d40e89cafd721baed7c4b275fa551","modified":1586615940187},{"_id":"public/image/cover/history.jpeg","hash":"9d3cbcea80f59224e85021ecd695d355dfddb525","modified":1586615940187},{"_id":"public/image/cover/springboot.png","hash":"dc2c4b7dc46f2dfaec66c6d6c596caebbf86c83f","modified":1586615940187},{"_id":"public/image/cover/webpack.png","hash":"7886cc0dfb91faf4b35652b67919d59ade7b74ae","modified":1586615940187},{"_id":"public/image/cover/decorator.png","hash":"8a8cf27d287b3b02adc4a95db40430a1a6269613","modified":1586615940187},{"_id":"public/image/WebpackCleanWebpackPlugin/20190622155123842.png","hash":"51a6b66753f63d1160b83ce9c819dc5931ef474f","modified":1586615940187},{"_id":"public/image/cover/web.jpeg","hash":"d2bcd938948a48679ddb81531b38bec32c3c0f1c","modified":1586615940187},{"_id":"public/image/httpHttps/15fc2525666dc96e.jpg","hash":"57028340f40d6959e5cdf702c5c2d74c90a42f33","modified":1586615940187},{"_id":"public/image/深拷贝浅拷贝/20190428204522836.png","hash":"33e1d52e178309724c364a23e2600fd8dadd5c54","modified":1586615940187},{"_id":"public/image/historyBack函数/20190318092239845.png","hash":"50b0bad4ccea97e01be0b4a5b9bc900ce703ae10","modified":1586615940187},{"_id":"public/image/深拷贝浅拷贝/20190428204904611.png","hash":"7caef4b8f9872e6d80d21f807c93ba6a4c9ceb21","modified":1586615940187},{"_id":"public/image/深拷贝浅拷贝/20190428205350562.png","hash":"1a81ad3e621d51556a56bee13d2d5885c77f1475","modified":1586615940187},{"_id":"public/image/深拷贝浅拷贝/20190428205853748.png","hash":"f31ac1cc377d72e17d69a227b66567d207538e86","modified":1586615940187},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1586615940187},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1586615940187},{"_id":"public/img/DerrickAlipay.jpg","hash":"97d102cc0d00683d45b78ba3cb141d75d77b3613","modified":1586615940187},{"_id":"public/img/DerrickWechat.png","hash":"a3d80cbd61d52c93fe2dbdfd4240d96648e5c114","modified":1586615940187},{"_id":"public/img/comment_bg.png","hash":"1adfc4ee925fb4f922c24d7774e7c46d940fe31b","modified":1586615940187},{"_id":"public/img/favicon.ico","hash":"47877628a0f0e0f06430845b0e3a75e0ba1361ce","modified":1586615940187},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1586615940187},{"_id":"public/img/avatar.png","hash":"92434097d199cec038f7aa9a25e32054b0d49f21","modified":1586615940187},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1586615940187},{"_id":"public/img/post_loadding.svg","hash":"549c58cd09dbeefd573ce10646c49ded8bcc48ec","modified":1586615940187},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1586615940187},{"_id":"public/img/post.jpg","hash":"554584218db9279874e48559f9a8e86b9ecca94b","modified":1586615940187},{"_id":"public/image/AntDesignPro探索/20190312151839845.png","hash":"2fdadb1ef8077f5479c3b7f54e7fde29e7115686","modified":1586615940187},{"_id":"public/image/AntDesignForm总结/modal.png","hash":"e2e06c1d4221e0d58ddf05bf54d3baf18770b7a8","modified":1586615940187},{"_id":"public/image/AntDesignPro探索/20190312150929439.png","hash":"95ea643ebfccad9d3dd13d32f2b3125d1dfc083d","modified":1586615940187},{"_id":"public/image/深拷贝浅拷贝/20190428205243797.png","hash":"6a69ed4fdcab7d20174a95b0a8006d419440c049","modified":1586615940187},{"_id":"public/image/AntDesignPro探索/2019031215120430.png","hash":"88420cbdf879904742f5a838e0693f8ae19d566c","modified":1586615940187},{"_id":"public/image/CSSModules警告/aHR0cDovL2kyLnRpaW1nLmNvbS82OTE2NDMvMmVmODNhMzcxNjA4OWEwZS5wbmc.jpeg","hash":"89a001fc84f439c824224e0ae3696bd587d2186b","modified":1586615940187},{"_id":"public/image/SpringBootJWT/20190325103836546.png","hash":"66340b232074dc97c15b299a763926432aa90d74","modified":1586615940187},{"_id":"public/image/SpringBoot跨域/20190311110721789.png","hash":"fe87a2484bf20c0568bfda200d8b776ad0bedd74","modified":1586615940187},{"_id":"public/img/1avatar.png","hash":"77f00530b5f24207d00f3e92f9821cc1d4eb3d40","modified":1586615940187},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586615940187},{"_id":"public/js/utils.js","hash":"e3423175d06a8fddc937d77990a172180476dbec","modified":1586615940187},{"_id":"public/js/search/algolia.js","hash":"09219d497f54c834ec506a4f63d02f6cad7c2dc7","modified":1586615940187},{"_id":"public/js/search/local-search.js","hash":"bf9ebb4ac93ccdd93e9eb37f69d17d5327e01040","modified":1586615940187},{"_id":"public/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1586615940187},{"_id":"public/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1586615940187},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"05fc79ebcf673e2d257583554eef62d162ade5e8","modified":1586615940187},{"_id":"public/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1586615940187},{"_id":"public/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1586615940187},{"_id":"public/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1586615940187},{"_id":"public/css/index.css","hash":"fed054098a33223e442b3397fbf25a862b8fe9fc","modified":1586615940187},{"_id":"public/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvMGM4ZDhiNjZlMGNmZTY0Ny5wbmc.jpeg","hash":"42a16835031c841f79dd4bcac8101cc079c06310","modified":1586615940187},{"_id":"public/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1586615940187},{"_id":"public/js/main.js","hash":"1dd462d995e0d85ad9e1d60002a3d5ac02c88373","modified":1586615940187},{"_id":"public/js/tw_cn.js","hash":"d468bf1634950ed1ffd7cedd3c87f2037e27543f","modified":1586615940187},{"_id":"public/img/index.jpg","hash":"d79fc7faf6d37b088bd638ceef641dd33beb353f","modified":1586615940187},{"_id":"public/image/WebpackCleanWebpackPlugin/20190622155255789.png","hash":"5a9b0df917450afb2d036131b4a78ea9f44fcd5f","modified":1586615940187},{"_id":"public/image/AntDesignPro探索/2019031215175956.png","hash":"342395e4f6eda6e2288a8554341f7df2ba3d3427","modified":1586615940187},{"_id":"public/image/Web前端学习路线/20190328205449472.png","hash":"e03d1580df71c0abd46cf5eb1d12887408f3180d","modified":1586615940187}],"Category":[{"name":"Ant-Design","_id":"ck8vq635v0004s9vm9wc49z75"},{"name":"Java","_id":"ck8vq63650009s9vm7gt37sfm"},{"name":"博客","_id":"ck8vq6369000es9vm7jq53d7u"},{"name":"JavaScript","_id":"ck8vq636j000ks9vm80sw69ou"},{"name":"React","_id":"ck8vq636o000ps9vm9cv48q9u"},{"name":"Spring-Boot","parent":"ck8vq63650009s9vm7gt37sfm","_id":"ck8vq636x000zs9vm6yn2czml"},{"name":"Web前端","_id":"ck8vq636z0014s9vmfpx2gfr4"},{"name":"WebPack","_id":"ck8vq63700019s9vm5qush6q7"},{"name":"Ant-Design-Pro","_id":"ck8vq6371001ds9vm5or775qs"},{"name":"CSS","_id":"ck8vq6373001is9vm7pn53x1c"},{"name":"HTTP","_id":"ck8vq6375001ls9vm20vocy35"},{"name":"ES6","_id":"ck8vq637c001vs9vmgijs99ne"},{"name":"JavaScript","parent":"ck8vq635v0004s9vm9wc49z75","_id":"ck8vq638m0038s9vm85swh17c"}],"Data":[],"Page":[{"title":"关于我","date":"2020-04-11T13:41:09.000Z","_content":"\n> Never put off till tomorrow what you can do today.\n> —— Thomas Jefferson\n\n- 姓名: Derrick\n- 地点: 杭州\n- 年龄: 1995\n- 性别: 男\n- 爱好: 健身, 📖\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2020-04-11 21:41:09\n---\n\n> Never put off till tomorrow what you can do today.\n> —— Thomas Jefferson\n\n- 姓名: Derrick\n- 地点: 杭州\n- 年龄: 1995\n- 性别: 男\n- 爱好: 健身, 📖\n\n","updated":"2020-04-11T13:49:06.142Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck8vq635g0001s9vmfmqh4op3","content":"<blockquote>\n<p>Never put off till tomorrow what you can do today.<br>—— Thomas Jefferson</p>\n</blockquote>\n<ul>\n<li>姓名: Derrick</li>\n<li>地点: 杭州</li>\n<li>年龄: 1995</li>\n<li>性别: 男</li>\n<li>爱好: 健身, 📖</li>\n</ul>\n","site":{"data":{}},"cover":"/img/post.jpg","excerpt":"","more":"<blockquote>\n<p>Never put off till tomorrow what you can do today.<br>—— Thomas Jefferson</p>\n</blockquote>\n<ul>\n<li>姓名: Derrick</li>\n<li>地点: 杭州</li>\n<li>年龄: 1995</li>\n<li>性别: 男</li>\n<li>爱好: 健身, 📖</li>\n</ul>\n"},{"title":"clean","date":"2020-04-11T14:34:16.000Z","_content":"","source":"clean/index.md","raw":"---\ntitle: clean\ndate: 2020-04-11 22:34:16\n---\n","updated":"2020-04-11T14:34:16.094Z","path":"clean/index.html","comments":1,"layout":"page","_id":"ck8vq635t0003s9vmcho271ri","content":"","site":{"data":{}},"cover":"/img/post.jpg","excerpt":"","more":""}],"Post":[{"title":"5分钟快速精通Ant Design Form 1分钟快速构建复杂Ant Design Form表单","date":"2019-07-28T12:05:56.000Z","cover":"/image/cover/ANTD.png","_content":"## Ant Design Form\nAntd 表单的核心无非是以下两点\n\n 1. 表单创建（`Form.create`）在`this.props`写入`form`属性\n 2. 表单与组件的双向绑定（`this.props.form.getFieldDecorator`）\n 3. 表单的取值（`this.props.form.validateFields / this.props.form.validateFieldsAndScroll`）\n\n#### 表单创建\n`Form.create`这是一个高阶函数，传入的是react组件，返回一个新的react组件，在函数内部会对传入组件进行改造，添加上一定的方法用于进行一些秘密操作 ，这里不多做解释，有兴趣的同学可以上官网查看。\n\n[我是飞机票（React-高阶组件），点我](https://react.docschina.org/docs/higher-order-components.html)\n使用方法如下：\n\n```\nclass CustomizedForm extends React.Component { ... }\n\n// use wrappedComponentRef\nconst EnhancedForm =  Form.create()(CustomizedForm);\n```\n或者\n```\n@Form.create()\nclass CustomizedForm extends React.Component { ... }\n```\n#### 表单与组件的双向绑定\n他的目的是将表单的组件的值与表单绑定。最后表单可以直接取到某某组件的值。\n\n```\n<!-- 表单数据绑定 -->\n<Form.Item {...formItemLayout} label={'名称'}>\n\t{getFieldDecorator('searchName')(\n\t\t<Input placeholder={'请输入名称'} />\n\t)}\n</Form.Item>\n```\n这个是一个非常简单的绑定，组件input的值都会由'searchName'这个属性收纳。\n可以直接取值，当然也可以加入自己的校验规则，等等。这里不多做解释，这些都是附加的进阶功能，这里不多做描述。\n\n[我是飞机票（表单进阶），点我！](https://ant.design/components/form-cn/)\n\n#### 表单的取值\n\n```\nthis.props.form.validateFields((err, values) => {\n      if (!err) { // 这里也可以不要，是用于校验的。\n        console.log('Received values of form: ', values);\n      }\n    });\n```\n这是一个非常简单的取值，当然可以定制的取值，或者定制的校验，比如，在获取验证码的时候，不需要校验密码是否输入或者符合你的规则，就可以只校验手机号，等等。这里不多做解释，这些都是附加的进阶功能，这里不多做描述。\n\n[我是飞机票（表单进阶），点我！](https://ant.design/components/form-cn/)\n\n基本上你掌握了这些就可以较为灵活的使用Ant Design Form了。\n\n## 但是！划重点了！\n如果有一些更加进阶的想法。请看！\n\n[表单的进阶使用](https://blog.csdn.net/cuandeqin2083/article/details/89643390)\n\n# 重中之重\n如果你觉得自己构建表单非常麻烦，或者对表单的理解还是够透彻，想一步到位构件表单，推荐本人自用自创组件\nant-design-form\n\n上面的文档非常详细，如果有问题随时可以给我提issues。如果喜欢的话麻烦点个start~\n\n[我是ant-design-from的飞机票，点我点我！！](https://github.com/DerrickTel/ant-design-form)","source":"_posts/5分钟快速精通Ant-Design-Form-1分钟快速构建复杂Ant-Design-Form表单.md","raw":"---\ntitle: 5分钟快速精通Ant Design Form 1分钟快速构建复杂Ant Design Form表单\ndate: 2019-07-28 20:05:56\ntags: [Ant-Design-Form, Ant-Design]\ncategory: [Ant-Design]\ncover: /image/cover/ANTD.png\n---\n## Ant Design Form\nAntd 表单的核心无非是以下两点\n\n 1. 表单创建（`Form.create`）在`this.props`写入`form`属性\n 2. 表单与组件的双向绑定（`this.props.form.getFieldDecorator`）\n 3. 表单的取值（`this.props.form.validateFields / this.props.form.validateFieldsAndScroll`）\n\n#### 表单创建\n`Form.create`这是一个高阶函数，传入的是react组件，返回一个新的react组件，在函数内部会对传入组件进行改造，添加上一定的方法用于进行一些秘密操作 ，这里不多做解释，有兴趣的同学可以上官网查看。\n\n[我是飞机票（React-高阶组件），点我](https://react.docschina.org/docs/higher-order-components.html)\n使用方法如下：\n\n```\nclass CustomizedForm extends React.Component { ... }\n\n// use wrappedComponentRef\nconst EnhancedForm =  Form.create()(CustomizedForm);\n```\n或者\n```\n@Form.create()\nclass CustomizedForm extends React.Component { ... }\n```\n#### 表单与组件的双向绑定\n他的目的是将表单的组件的值与表单绑定。最后表单可以直接取到某某组件的值。\n\n```\n<!-- 表单数据绑定 -->\n<Form.Item {...formItemLayout} label={'名称'}>\n\t{getFieldDecorator('searchName')(\n\t\t<Input placeholder={'请输入名称'} />\n\t)}\n</Form.Item>\n```\n这个是一个非常简单的绑定，组件input的值都会由'searchName'这个属性收纳。\n可以直接取值，当然也可以加入自己的校验规则，等等。这里不多做解释，这些都是附加的进阶功能，这里不多做描述。\n\n[我是飞机票（表单进阶），点我！](https://ant.design/components/form-cn/)\n\n#### 表单的取值\n\n```\nthis.props.form.validateFields((err, values) => {\n      if (!err) { // 这里也可以不要，是用于校验的。\n        console.log('Received values of form: ', values);\n      }\n    });\n```\n这是一个非常简单的取值，当然可以定制的取值，或者定制的校验，比如，在获取验证码的时候，不需要校验密码是否输入或者符合你的规则，就可以只校验手机号，等等。这里不多做解释，这些都是附加的进阶功能，这里不多做描述。\n\n[我是飞机票（表单进阶），点我！](https://ant.design/components/form-cn/)\n\n基本上你掌握了这些就可以较为灵活的使用Ant Design Form了。\n\n## 但是！划重点了！\n如果有一些更加进阶的想法。请看！\n\n[表单的进阶使用](https://blog.csdn.net/cuandeqin2083/article/details/89643390)\n\n# 重中之重\n如果你觉得自己构建表单非常麻烦，或者对表单的理解还是够透彻，想一步到位构件表单，推荐本人自用自创组件\nant-design-form\n\n上面的文档非常详细，如果有问题随时可以给我提issues。如果喜欢的话麻烦点个start~\n\n[我是ant-design-from的飞机票，点我点我！！](https://github.com/DerrickTel/ant-design-form)","slug":"5分钟快速精通Ant-Design-Form-1分钟快速构建复杂Ant-Design-Form表单","published":1,"updated":"2020-04-11T13:55:59.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq63560000s9vmdtxve6h3","content":"<h2 id=\"Ant-Design-Form\"><a href=\"#Ant-Design-Form\" class=\"headerlink\" title=\"Ant Design Form\"></a>Ant Design Form</h2><p>Antd 表单的核心无非是以下两点</p>\n<ol>\n<li>表单创建（<code>Form.create</code>）在<code>this.props</code>写入<code>form</code>属性</li>\n<li>表单与组件的双向绑定（<code>this.props.form.getFieldDecorator</code>）</li>\n<li>表单的取值（<code>this.props.form.validateFields / this.props.form.validateFieldsAndScroll</code>）</li>\n</ol>\n<h4 id=\"表单创建\"><a href=\"#表单创建\" class=\"headerlink\" title=\"表单创建\"></a>表单创建</h4><p><code>Form.create</code>这是一个高阶函数，传入的是react组件，返回一个新的react组件，在函数内部会对传入组件进行改造，添加上一定的方法用于进行一些秘密操作 ，这里不多做解释，有兴趣的同学可以上官网查看。</p>\n<p><a href=\"https://react.docschina.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"noopener\">我是飞机票（React-高阶组件），点我</a><br>使用方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CustomizedForm extends React.Component &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; use wrappedComponentRef</span><br><span class=\"line\">const EnhancedForm &#x3D;  Form.create()(CustomizedForm);</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Form.create()</span><br><span class=\"line\">class CustomizedForm extends React.Component &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"表单与组件的双向绑定\"><a href=\"#表单与组件的双向绑定\" class=\"headerlink\" title=\"表单与组件的双向绑定\"></a>表单与组件的双向绑定</h4><p>他的目的是将表单的组件的值与表单绑定。最后表单可以直接取到某某组件的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 表单数据绑定 --&gt;</span><br><span class=\"line\">&lt;Form.Item &#123;...formItemLayout&#125; label&#x3D;&#123;&#39;名称&#39;&#125;&gt;</span><br><span class=\"line\">\t&#123;getFieldDecorator(&#39;searchName&#39;)(</span><br><span class=\"line\">\t\t&lt;Input placeholder&#x3D;&#123;&#39;请输入名称&#39;&#125; &#x2F;&gt;</span><br><span class=\"line\">\t)&#125;</span><br><span class=\"line\">&lt;&#x2F;Form.Item&gt;</span><br></pre></td></tr></table></figure>\n<p>这个是一个非常简单的绑定，组件input的值都会由’searchName’这个属性收纳。<br>可以直接取值，当然也可以加入自己的校验规则，等等。这里不多做解释，这些都是附加的进阶功能，这里不多做描述。</p>\n<p><a href=\"https://ant.design/components/form-cn/\" target=\"_blank\" rel=\"noopener\">我是飞机票（表单进阶），点我！</a></p>\n<h4 id=\"表单的取值\"><a href=\"#表单的取值\" class=\"headerlink\" title=\"表单的取值\"></a>表单的取值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.props.form.validateFields((err, values) &#x3D;&gt; &#123;</span><br><span class=\"line\">      if (!err) &#123; &#x2F;&#x2F; 这里也可以不要，是用于校验的。</span><br><span class=\"line\">        console.log(&#39;Received values of form: &#39;, values);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>这是一个非常简单的取值，当然可以定制的取值，或者定制的校验，比如，在获取验证码的时候，不需要校验密码是否输入或者符合你的规则，就可以只校验手机号，等等。这里不多做解释，这些都是附加的进阶功能，这里不多做描述。</p>\n<p><a href=\"https://ant.design/components/form-cn/\" target=\"_blank\" rel=\"noopener\">我是飞机票（表单进阶），点我！</a></p>\n<p>基本上你掌握了这些就可以较为灵活的使用Ant Design Form了。</p>\n<h2 id=\"但是！划重点了！\"><a href=\"#但是！划重点了！\" class=\"headerlink\" title=\"但是！划重点了！\"></a>但是！划重点了！</h2><p>如果有一些更加进阶的想法。请看！</p>\n<p><a href=\"https://blog.csdn.net/cuandeqin2083/article/details/89643390\" target=\"_blank\" rel=\"noopener\">表单的进阶使用</a></p>\n<h1 id=\"重中之重\"><a href=\"#重中之重\" class=\"headerlink\" title=\"重中之重\"></a>重中之重</h1><p>如果你觉得自己构建表单非常麻烦，或者对表单的理解还是够透彻，想一步到位构件表单，推荐本人自用自创组件<br>ant-design-form</p>\n<p>上面的文档非常详细，如果有问题随时可以给我提issues。如果喜欢的话麻烦点个start~</p>\n<p><a href=\"https://github.com/DerrickTel/ant-design-form\" target=\"_blank\" rel=\"noopener\">我是ant-design-from的飞机票，点我点我！！</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Ant-Design-Form\"><a href=\"#Ant-Design-Form\" class=\"headerlink\" title=\"Ant Design Form\"></a>Ant Design Form</h2><p>Antd 表单的核心无非是以下两点</p>\n<ol>\n<li>表单创建（<code>Form.create</code>）在<code>this.props</code>写入<code>form</code>属性</li>\n<li>表单与组件的双向绑定（<code>this.props.form.getFieldDecorator</code>）</li>\n<li>表单的取值（<code>this.props.form.validateFields / this.props.form.validateFieldsAndScroll</code>）</li>\n</ol>\n<h4 id=\"表单创建\"><a href=\"#表单创建\" class=\"headerlink\" title=\"表单创建\"></a>表单创建</h4><p><code>Form.create</code>这是一个高阶函数，传入的是react组件，返回一个新的react组件，在函数内部会对传入组件进行改造，添加上一定的方法用于进行一些秘密操作 ，这里不多做解释，有兴趣的同学可以上官网查看。</p>\n<p><a href=\"https://react.docschina.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"noopener\">我是飞机票（React-高阶组件），点我</a><br>使用方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CustomizedForm extends React.Component &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; use wrappedComponentRef</span><br><span class=\"line\">const EnhancedForm &#x3D;  Form.create()(CustomizedForm);</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Form.create()</span><br><span class=\"line\">class CustomizedForm extends React.Component &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"表单与组件的双向绑定\"><a href=\"#表单与组件的双向绑定\" class=\"headerlink\" title=\"表单与组件的双向绑定\"></a>表单与组件的双向绑定</h4><p>他的目的是将表单的组件的值与表单绑定。最后表单可以直接取到某某组件的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 表单数据绑定 --&gt;</span><br><span class=\"line\">&lt;Form.Item &#123;...formItemLayout&#125; label&#x3D;&#123;&#39;名称&#39;&#125;&gt;</span><br><span class=\"line\">\t&#123;getFieldDecorator(&#39;searchName&#39;)(</span><br><span class=\"line\">\t\t&lt;Input placeholder&#x3D;&#123;&#39;请输入名称&#39;&#125; &#x2F;&gt;</span><br><span class=\"line\">\t)&#125;</span><br><span class=\"line\">&lt;&#x2F;Form.Item&gt;</span><br></pre></td></tr></table></figure>\n<p>这个是一个非常简单的绑定，组件input的值都会由’searchName’这个属性收纳。<br>可以直接取值，当然也可以加入自己的校验规则，等等。这里不多做解释，这些都是附加的进阶功能，这里不多做描述。</p>\n<p><a href=\"https://ant.design/components/form-cn/\" target=\"_blank\" rel=\"noopener\">我是飞机票（表单进阶），点我！</a></p>\n<h4 id=\"表单的取值\"><a href=\"#表单的取值\" class=\"headerlink\" title=\"表单的取值\"></a>表单的取值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.props.form.validateFields((err, values) &#x3D;&gt; &#123;</span><br><span class=\"line\">      if (!err) &#123; &#x2F;&#x2F; 这里也可以不要，是用于校验的。</span><br><span class=\"line\">        console.log(&#39;Received values of form: &#39;, values);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>这是一个非常简单的取值，当然可以定制的取值，或者定制的校验，比如，在获取验证码的时候，不需要校验密码是否输入或者符合你的规则，就可以只校验手机号，等等。这里不多做解释，这些都是附加的进阶功能，这里不多做描述。</p>\n<p><a href=\"https://ant.design/components/form-cn/\" target=\"_blank\" rel=\"noopener\">我是飞机票（表单进阶），点我！</a></p>\n<p>基本上你掌握了这些就可以较为灵活的使用Ant Design Form了。</p>\n<h2 id=\"但是！划重点了！\"><a href=\"#但是！划重点了！\" class=\"headerlink\" title=\"但是！划重点了！\"></a>但是！划重点了！</h2><p>如果有一些更加进阶的想法。请看！</p>\n<p><a href=\"https://blog.csdn.net/cuandeqin2083/article/details/89643390\" target=\"_blank\" rel=\"noopener\">表单的进阶使用</a></p>\n<h1 id=\"重中之重\"><a href=\"#重中之重\" class=\"headerlink\" title=\"重中之重\"></a>重中之重</h1><p>如果你觉得自己构建表单非常麻烦，或者对表单的理解还是够透彻，想一步到位构件表单，推荐本人自用自创组件<br>ant-design-form</p>\n<p>上面的文档非常详细，如果有问题随时可以给我提issues。如果喜欢的话麻烦点个start~</p>\n<p><a href=\"https://github.com/DerrickTel/ant-design-form\" target=\"_blank\" rel=\"noopener\">我是ant-design-from的飞机票，点我点我！！</a></p>\n"},{"title":"JWT spring boot JAVA 使用步骤 spring boot2.0","date":"2019-06-19T02:58:33.000Z","cover":"/image/cover/JWT.png","_content":"\n## 前言\nJWT是json web token缩写。它将用户信息加密到token里，服务器不保存任何用户信息。服务器通过使用保存的密钥验证token的正确性，只要正确即通过验证。\n\n（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。\n\n（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。\n\n（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。\n\n（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。\n\n（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。\n\n（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。\n## 使用\n\n - 添加依赖\nhttps://jwt.io/\n选择对应的版本\n - 使用\n\n```\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.interfaces.Claim;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport org.springframework.util.StringUtils;\n\npublic class TokenConfig {\n    /** token秘钥，请勿泄露，请勿随便修改 backups:JKKLJOoasdlfj */\n    public static final String SECRET = \"JKKLJOoasdlfj\";\n    /** token 过期时间: 10天 */\n    public static final int calendarField = Calendar.DATE;\n    public static final int calendarInterval = 10;\n\n    /**\n     * JWT生成Token.<br/>\n     *\n     * JWT构成: header, payload, signature\n     *\n     * @param user_id\n     *            登录成功后用户user_id, 参数user_id不可传空\n     */\n    public static String createToken(Long user_id) throws Exception {\n        Date iatDate = new Date();\n        // expire time\n        Calendar nowTime = Calendar.getInstance();\n        nowTime.add(calendarField, calendarInterval);\n        Date expiresDate = nowTime.getTime();\n\n        // header Map\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"alg\", \"HS256\");\n        map.put(\"typ\", \"JWT\");\n\n        // build token\n        // param backups {iss:Service, aud:APP}\n        String token = JWT.create().withHeader(map) // header\n                .withClaim(\"iss\", \"Service\") // payload\n                .withClaim(\"aud\", \"APP\").withClaim(\"user_id\", null == user_id ? null : user_id.toString())\n                .withIssuedAt(iatDate) // sign time\n                .withExpiresAt(expiresDate) // expire time\n                .sign(Algorithm.HMAC256(SECRET)); // signature\n\n        return token;\n    }\n\n    /**\n     * 解密Token\n     *\n     * @param token\n     * @return\n     * @throws Exception\n     */\n    public static Map<String, Claim> verifyToken(String token) {\n        DecodedJWT jwt = null;\n        try {\n            JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET)).build();\n            jwt = verifier.verify(token);\n        } catch (Exception e) {\n            // e.printStackTrace();\n            // token 校验失败, 抛出Token验证非法异常\n        }\n        return jwt.getClaims();\n    }\n\n    /**\n     * 根据Token获取user_id\n     *\n     * @param token\n     * @return user_id\n     */\n    public static Long getAppUID(String token) {\n        Map<String, Claim> claims = verifyToken(token);\n        Claim user_id_claim = claims.get(\"user_id\");\n        if (null == user_id_claim || StringUtils.isEmpty(user_id_claim.asString())) {\n            // token 校验失败, 抛出Token验证非法异常\n        }\n        return Long.valueOf(user_id_claim.asString());\n    }\n}\n```\n\n## 概念解析\nJWT 的三个部分依次如下。\n\n - Header（头部）\n - Payload（负载）\n - Signature（签名）\n\n\n写成一行，就是下面的样子。\n\n\n![https://www.wangbase.com/blogimg/asset/201807/bg2018072303.jpg](/image/SpringBootJWT/20190325103836546.png)\n","source":"_posts/JWT-spring-boot-JAVA-使用步骤-spring-boot2-0.md","raw":"---\ntitle: JWT spring boot JAVA 使用步骤 spring boot2.0\ndate: 2019-06-19 10:58:33\ntags: [Spring-Boot-2.0, Java, JWT]\ncategory: [Java, Spring-Boot]\ncover: /image/cover/JWT.png\n---\n\n## 前言\nJWT是json web token缩写。它将用户信息加密到token里，服务器不保存任何用户信息。服务器通过使用保存的密钥验证token的正确性，只要正确即通过验证。\n\n（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。\n\n（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。\n\n（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。\n\n（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。\n\n（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。\n\n（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。\n## 使用\n\n - 添加依赖\nhttps://jwt.io/\n选择对应的版本\n - 使用\n\n```\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.interfaces.Claim;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport org.springframework.util.StringUtils;\n\npublic class TokenConfig {\n    /** token秘钥，请勿泄露，请勿随便修改 backups:JKKLJOoasdlfj */\n    public static final String SECRET = \"JKKLJOoasdlfj\";\n    /** token 过期时间: 10天 */\n    public static final int calendarField = Calendar.DATE;\n    public static final int calendarInterval = 10;\n\n    /**\n     * JWT生成Token.<br/>\n     *\n     * JWT构成: header, payload, signature\n     *\n     * @param user_id\n     *            登录成功后用户user_id, 参数user_id不可传空\n     */\n    public static String createToken(Long user_id) throws Exception {\n        Date iatDate = new Date();\n        // expire time\n        Calendar nowTime = Calendar.getInstance();\n        nowTime.add(calendarField, calendarInterval);\n        Date expiresDate = nowTime.getTime();\n\n        // header Map\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"alg\", \"HS256\");\n        map.put(\"typ\", \"JWT\");\n\n        // build token\n        // param backups {iss:Service, aud:APP}\n        String token = JWT.create().withHeader(map) // header\n                .withClaim(\"iss\", \"Service\") // payload\n                .withClaim(\"aud\", \"APP\").withClaim(\"user_id\", null == user_id ? null : user_id.toString())\n                .withIssuedAt(iatDate) // sign time\n                .withExpiresAt(expiresDate) // expire time\n                .sign(Algorithm.HMAC256(SECRET)); // signature\n\n        return token;\n    }\n\n    /**\n     * 解密Token\n     *\n     * @param token\n     * @return\n     * @throws Exception\n     */\n    public static Map<String, Claim> verifyToken(String token) {\n        DecodedJWT jwt = null;\n        try {\n            JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET)).build();\n            jwt = verifier.verify(token);\n        } catch (Exception e) {\n            // e.printStackTrace();\n            // token 校验失败, 抛出Token验证非法异常\n        }\n        return jwt.getClaims();\n    }\n\n    /**\n     * 根据Token获取user_id\n     *\n     * @param token\n     * @return user_id\n     */\n    public static Long getAppUID(String token) {\n        Map<String, Claim> claims = verifyToken(token);\n        Claim user_id_claim = claims.get(\"user_id\");\n        if (null == user_id_claim || StringUtils.isEmpty(user_id_claim.asString())) {\n            // token 校验失败, 抛出Token验证非法异常\n        }\n        return Long.valueOf(user_id_claim.asString());\n    }\n}\n```\n\n## 概念解析\nJWT 的三个部分依次如下。\n\n - Header（头部）\n - Payload（负载）\n - Signature（签名）\n\n\n写成一行，就是下面的样子。\n\n\n![https://www.wangbase.com/blogimg/asset/201807/bg2018072303.jpg](/image/SpringBootJWT/20190325103836546.png)\n","slug":"JWT-spring-boot-JAVA-使用步骤-spring-boot2-0","published":1,"updated":"2020-04-11T14:19:30.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq635s0002s9vmgakj5r0b","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JWT是json web token缩写。它将用户信息加密到token里，服务器不保存任何用户信息。服务器通过使用保存的密钥验证token的正确性，只要正确即通过验证。</p>\n<p>（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p>\n<p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p>\n<p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p>\n<p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p>\n<p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p>\n<p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li>添加依赖<br><a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener\">https://jwt.io/</a><br>选择对应的版本</li>\n<li>使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Calendar;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.auth0.jwt.JWT;</span><br><span class=\"line\">import com.auth0.jwt.JWTVerifier;</span><br><span class=\"line\">import com.auth0.jwt.algorithms.Algorithm;</span><br><span class=\"line\">import com.auth0.jwt.interfaces.Claim;</span><br><span class=\"line\">import com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class=\"line\">import org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TokenConfig &#123;</span><br><span class=\"line\">    &#x2F;** token秘钥，请勿泄露，请勿随便修改 backups:JKKLJOoasdlfj *&#x2F;</span><br><span class=\"line\">    public static final String SECRET &#x3D; &quot;JKKLJOoasdlfj&quot;;</span><br><span class=\"line\">    &#x2F;** token 过期时间: 10天 *&#x2F;</span><br><span class=\"line\">    public static final int calendarField &#x3D; Calendar.DATE;</span><br><span class=\"line\">    public static final int calendarInterval &#x3D; 10;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * JWT生成Token.&lt;br&#x2F;&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * JWT构成: header, payload, signature</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param user_id</span><br><span class=\"line\">     *            登录成功后用户user_id, 参数user_id不可传空</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static String createToken(Long user_id) throws Exception &#123;</span><br><span class=\"line\">        Date iatDate &#x3D; new Date();</span><br><span class=\"line\">        &#x2F;&#x2F; expire time</span><br><span class=\"line\">        Calendar nowTime &#x3D; Calendar.getInstance();</span><br><span class=\"line\">        nowTime.add(calendarField, calendarInterval);</span><br><span class=\"line\">        Date expiresDate &#x3D; nowTime.getTime();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; header Map</span><br><span class=\"line\">        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(&quot;alg&quot;, &quot;HS256&quot;);</span><br><span class=\"line\">        map.put(&quot;typ&quot;, &quot;JWT&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; build token</span><br><span class=\"line\">        &#x2F;&#x2F; param backups &#123;iss:Service, aud:APP&#125;</span><br><span class=\"line\">        String token &#x3D; JWT.create().withHeader(map) &#x2F;&#x2F; header</span><br><span class=\"line\">                .withClaim(&quot;iss&quot;, &quot;Service&quot;) &#x2F;&#x2F; payload</span><br><span class=\"line\">                .withClaim(&quot;aud&quot;, &quot;APP&quot;).withClaim(&quot;user_id&quot;, null &#x3D;&#x3D; user_id ? null : user_id.toString())</span><br><span class=\"line\">                .withIssuedAt(iatDate) &#x2F;&#x2F; sign time</span><br><span class=\"line\">                .withExpiresAt(expiresDate) &#x2F;&#x2F; expire time</span><br><span class=\"line\">                .sign(Algorithm.HMAC256(SECRET)); &#x2F;&#x2F; signature</span><br><span class=\"line\"></span><br><span class=\"line\">        return token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 解密Token</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param token</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     * @throws Exception</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static Map&lt;String, Claim&gt; verifyToken(String token) &#123;</span><br><span class=\"line\">        DecodedJWT jwt &#x3D; null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            JWTVerifier verifier &#x3D; JWT.require(Algorithm.HMAC256(SECRET)).build();</span><br><span class=\"line\">            jwt &#x3D; verifier.verify(token);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; e.printStackTrace();</span><br><span class=\"line\">            &#x2F;&#x2F; token 校验失败, 抛出Token验证非法异常</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return jwt.getClaims();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 根据Token获取user_id</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param token</span><br><span class=\"line\">     * @return user_id</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static Long getAppUID(String token) &#123;</span><br><span class=\"line\">        Map&lt;String, Claim&gt; claims &#x3D; verifyToken(token);</span><br><span class=\"line\">        Claim user_id_claim &#x3D; claims.get(&quot;user_id&quot;);</span><br><span class=\"line\">        if (null &#x3D;&#x3D; user_id_claim || StringUtils.isEmpty(user_id_claim.asString())) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; token 校验失败, 抛出Token验证非法异常</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return Long.valueOf(user_id_claim.asString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"概念解析\"><a href=\"#概念解析\" class=\"headerlink\" title=\"概念解析\"></a>概念解析</h2><p>JWT 的三个部分依次如下。</p>\n<ul>\n<li>Header（头部）</li>\n<li>Payload（负载）</li>\n<li>Signature（签名）</li>\n</ul>\n<p>写成一行，就是下面的样子。</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/SpringBootJWT/20190325103836546.png\"  alt=\"https://www.wangbase.com/blogimg/asset/201807/bg2018072303.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JWT是json web token缩写。它将用户信息加密到token里，服务器不保存任何用户信息。服务器通过使用保存的密钥验证token的正确性，只要正确即通过验证。</p>\n<p>（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p>\n<p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p>\n<p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p>\n<p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p>\n<p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p>\n<p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li>添加依赖<br><a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener\">https://jwt.io/</a><br>选择对应的版本</li>\n<li>使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Calendar;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.auth0.jwt.JWT;</span><br><span class=\"line\">import com.auth0.jwt.JWTVerifier;</span><br><span class=\"line\">import com.auth0.jwt.algorithms.Algorithm;</span><br><span class=\"line\">import com.auth0.jwt.interfaces.Claim;</span><br><span class=\"line\">import com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class=\"line\">import org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TokenConfig &#123;</span><br><span class=\"line\">    &#x2F;** token秘钥，请勿泄露，请勿随便修改 backups:JKKLJOoasdlfj *&#x2F;</span><br><span class=\"line\">    public static final String SECRET &#x3D; &quot;JKKLJOoasdlfj&quot;;</span><br><span class=\"line\">    &#x2F;** token 过期时间: 10天 *&#x2F;</span><br><span class=\"line\">    public static final int calendarField &#x3D; Calendar.DATE;</span><br><span class=\"line\">    public static final int calendarInterval &#x3D; 10;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * JWT生成Token.&lt;br&#x2F;&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * JWT构成: header, payload, signature</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param user_id</span><br><span class=\"line\">     *            登录成功后用户user_id, 参数user_id不可传空</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static String createToken(Long user_id) throws Exception &#123;</span><br><span class=\"line\">        Date iatDate &#x3D; new Date();</span><br><span class=\"line\">        &#x2F;&#x2F; expire time</span><br><span class=\"line\">        Calendar nowTime &#x3D; Calendar.getInstance();</span><br><span class=\"line\">        nowTime.add(calendarField, calendarInterval);</span><br><span class=\"line\">        Date expiresDate &#x3D; nowTime.getTime();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; header Map</span><br><span class=\"line\">        Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(&quot;alg&quot;, &quot;HS256&quot;);</span><br><span class=\"line\">        map.put(&quot;typ&quot;, &quot;JWT&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; build token</span><br><span class=\"line\">        &#x2F;&#x2F; param backups &#123;iss:Service, aud:APP&#125;</span><br><span class=\"line\">        String token &#x3D; JWT.create().withHeader(map) &#x2F;&#x2F; header</span><br><span class=\"line\">                .withClaim(&quot;iss&quot;, &quot;Service&quot;) &#x2F;&#x2F; payload</span><br><span class=\"line\">                .withClaim(&quot;aud&quot;, &quot;APP&quot;).withClaim(&quot;user_id&quot;, null &#x3D;&#x3D; user_id ? null : user_id.toString())</span><br><span class=\"line\">                .withIssuedAt(iatDate) &#x2F;&#x2F; sign time</span><br><span class=\"line\">                .withExpiresAt(expiresDate) &#x2F;&#x2F; expire time</span><br><span class=\"line\">                .sign(Algorithm.HMAC256(SECRET)); &#x2F;&#x2F; signature</span><br><span class=\"line\"></span><br><span class=\"line\">        return token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 解密Token</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param token</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     * @throws Exception</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static Map&lt;String, Claim&gt; verifyToken(String token) &#123;</span><br><span class=\"line\">        DecodedJWT jwt &#x3D; null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            JWTVerifier verifier &#x3D; JWT.require(Algorithm.HMAC256(SECRET)).build();</span><br><span class=\"line\">            jwt &#x3D; verifier.verify(token);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; e.printStackTrace();</span><br><span class=\"line\">            &#x2F;&#x2F; token 校验失败, 抛出Token验证非法异常</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return jwt.getClaims();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 根据Token获取user_id</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param token</span><br><span class=\"line\">     * @return user_id</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static Long getAppUID(String token) &#123;</span><br><span class=\"line\">        Map&lt;String, Claim&gt; claims &#x3D; verifyToken(token);</span><br><span class=\"line\">        Claim user_id_claim &#x3D; claims.get(&quot;user_id&quot;);</span><br><span class=\"line\">        if (null &#x3D;&#x3D; user_id_claim || StringUtils.isEmpty(user_id_claim.asString())) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; token 校验失败, 抛出Token验证非法异常</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return Long.valueOf(user_id_claim.asString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"概念解析\"><a href=\"#概念解析\" class=\"headerlink\" title=\"概念解析\"></a>概念解析</h2><p>JWT 的三个部分依次如下。</p>\n<ul>\n<li>Header（头部）</li>\n<li>Payload（负载）</li>\n<li>Signature（签名）</li>\n</ul>\n<p>写成一行，就是下面的样子。</p>\n<p><img src=\"/image/SpringBootJWT/20190325103836546.png\" alt=\"https://www.wangbase.com/blogimg/asset/201807/bg2018072303.jpg\"></p>\n"},{"title":"Hexo+GitHub构建你的博客","date":"2019-06-17T11:17:25.000Z","cover":"/image/cover/HEXO.png","_content":"\n\nhttps://blog.csdn.net/cuandeqin2083/article/details/92791433\n\n","source":"_posts/Hexo+GitHub构建你的博客.md","raw":"---\ntitle: Hexo+GitHub构建你的博客\ndate: 2019-06-17 19:17:25\ntags: [Hexo, GitHub]\ncategories: [博客]\ncover: /image/cover/HEXO.png\n---\n\n\nhttps://blog.csdn.net/cuandeqin2083/article/details/92791433\n\n","slug":"Hexo+GitHub构建你的博客","published":1,"updated":"2020-04-11T14:10:51.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq63620006s9vmbr5l2c9c","content":"<p><a href=\"https://blog.csdn.net/cuandeqin2083/article/details/92791433\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/cuandeqin2083/article/details/92791433</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/cuandeqin2083/article/details/92791433\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/cuandeqin2083/article/details/92791433</a></p>\n"},{"title":"JavaScript 浅拷贝 深拷贝 赋值 引用 JS","date":"2019-06-19T02:10:59.000Z","cover":"/image/cover/JavaScript.png","_content":"\n## 前言\n这个问题说严重也不严重，说不小也不小。\n如果你也刚刚好碰到了这个问题。就跟着我一起了解一下吧！\n\n## 基本类型和引用类型\n\n \n\n - **基本类型**\n\n基本类型也称值类型，数值类型。\n包括了\n\n  1. String\n 2. Number\n 3. Boolean\n 4. Null\n 5. Undefined\n 6. Symbol（ES6新增，表示独一无二的一个值。[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)）\n\n\n![在这里插入图片描述](/image/深拷贝浅拷贝/20190428204522836.png)\n\n基本类型的是放在栈区的，访问的时候也是按值访问，就是正常的理解的赋值。\n\n - **引用类型和浅拷贝**\n\n\n引用类型，顾名思义就是引用来访问的。\n\n![在这里插入图片描述](/image/深拷贝浅拷贝/20190428204904611.png)\n\n在这个例子中，我们操作的是**q**。为什么**w**也改变了呢？\n\n因为**w**不是真的给他赋值了[1, 2]。\n\n而是赋值给了**q**所指向的地址的指针。\n\n有点绕，其实说白了就是 q 是指向地址 A 的。\n\nw = q ，只是把 q 指向 地址 A 的这个指针赋值给了 w 。\n\nw 和 q 都可以操作这个地址的内容。\n\n所以，当我们用 q 来操作这个地址内容的时候，地址内容就变了。当 w 去取值的时候，内容已经变了。\n\n\n![在这里插入图片描述](/image/深拷贝浅拷贝/20190428205243797.png)\n\n\nw 和 q 都可以操作这个地址内容。\n\n那么引用类型有那些呢？\n\n\n\n![在这里插入图片描述](/image/深拷贝浅拷贝/20190428205350562.png)\n\n这样简单的引用赋值也叫做浅拷贝。\n\n可能会带来一些问题，比如:\n\nA和B都是数组；\n\n我只是懒得给B赋值和A一模一样的；\n\n所以我直接B = A；\n\n我在操作完B之后我又想去取值A的值的时候，发现A已经变了。\n\n在react中也有对state浅拷贝判断的（PureComponent）\n\n\n - **深拷贝**\n\n ![在这里插入图片描述](/image/深拷贝浅拷贝/20190428205853748.png)\n\n这个就叫做深拷贝。\n\n将他的内容分解出来进行解析。\n\n但是这样会导致一个问题。\n\n麻烦！\n\n比如\n\nlet A = [ {a: [1, 2]}, {b: [1, 2]} ]。\n\n这个时候要深拷贝给B的话。\n\n要一直结构到很深处。\n\n有几个个办法可以解决。\n\n1.叫做**序列化**\n\n - JSON.stringify()\n\n - JSON.parse()\n\n 但是这样非常浪费资源\n\n2.Object.assign()拷贝\n\n - 当对象中只有一级属性，没有二级属性的时候，此方法为深拷贝，但是对象中有对象的时候，此方法，在二级属性以后就是浅拷贝。\n\n 3.使用递归的方式实现深拷贝\n\n```\n //使用递归的方式实现数组、对象的深拷贝\nfunction deepClone1(obj) {\n  //判断拷贝的要进行深拷贝的是数组还是对象，是数组的话进行数组拷贝，对象的话进行对象拷贝\n  var objClone = Array.isArray(obj) ? [] : {};\n  //进行深拷贝的不能为空，并且是对象或者是\n  if (obj && typeof obj === \"object\") {\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        if (obj[key] && typeof obj[key] === \"object\") {\n          objClone[key] = deepClone1(obj[key]);\n        } else {\n          objClone[key] = obj[key];\n        }\n      }\n    }\n  }\n  return objClone;\n}\n```\n\n5.lodash函数库实现深拷贝\n\nlodash很热门的函数库，提供了 lodash.cloneDeep()实现深拷贝\n","source":"_posts/JavaScript-浅拷贝-深拷贝-赋值-引用-JS.md","raw":"---\ntitle: JavaScript 浅拷贝 深拷贝 赋值 引用 JS\ndate: 2019-06-19 10:10:59\ntags: [深拷贝, 浅拷贝]\ncategory: [JavaScript]\ncover: /image/cover/JavaScript.png\n---\n\n## 前言\n这个问题说严重也不严重，说不小也不小。\n如果你也刚刚好碰到了这个问题。就跟着我一起了解一下吧！\n\n## 基本类型和引用类型\n\n \n\n - **基本类型**\n\n基本类型也称值类型，数值类型。\n包括了\n\n  1. String\n 2. Number\n 3. Boolean\n 4. Null\n 5. Undefined\n 6. Symbol（ES6新增，表示独一无二的一个值。[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)）\n\n\n![在这里插入图片描述](/image/深拷贝浅拷贝/20190428204522836.png)\n\n基本类型的是放在栈区的，访问的时候也是按值访问，就是正常的理解的赋值。\n\n - **引用类型和浅拷贝**\n\n\n引用类型，顾名思义就是引用来访问的。\n\n![在这里插入图片描述](/image/深拷贝浅拷贝/20190428204904611.png)\n\n在这个例子中，我们操作的是**q**。为什么**w**也改变了呢？\n\n因为**w**不是真的给他赋值了[1, 2]。\n\n而是赋值给了**q**所指向的地址的指针。\n\n有点绕，其实说白了就是 q 是指向地址 A 的。\n\nw = q ，只是把 q 指向 地址 A 的这个指针赋值给了 w 。\n\nw 和 q 都可以操作这个地址的内容。\n\n所以，当我们用 q 来操作这个地址内容的时候，地址内容就变了。当 w 去取值的时候，内容已经变了。\n\n\n![在这里插入图片描述](/image/深拷贝浅拷贝/20190428205243797.png)\n\n\nw 和 q 都可以操作这个地址内容。\n\n那么引用类型有那些呢？\n\n\n\n![在这里插入图片描述](/image/深拷贝浅拷贝/20190428205350562.png)\n\n这样简单的引用赋值也叫做浅拷贝。\n\n可能会带来一些问题，比如:\n\nA和B都是数组；\n\n我只是懒得给B赋值和A一模一样的；\n\n所以我直接B = A；\n\n我在操作完B之后我又想去取值A的值的时候，发现A已经变了。\n\n在react中也有对state浅拷贝判断的（PureComponent）\n\n\n - **深拷贝**\n\n ![在这里插入图片描述](/image/深拷贝浅拷贝/20190428205853748.png)\n\n这个就叫做深拷贝。\n\n将他的内容分解出来进行解析。\n\n但是这样会导致一个问题。\n\n麻烦！\n\n比如\n\nlet A = [ {a: [1, 2]}, {b: [1, 2]} ]。\n\n这个时候要深拷贝给B的话。\n\n要一直结构到很深处。\n\n有几个个办法可以解决。\n\n1.叫做**序列化**\n\n - JSON.stringify()\n\n - JSON.parse()\n\n 但是这样非常浪费资源\n\n2.Object.assign()拷贝\n\n - 当对象中只有一级属性，没有二级属性的时候，此方法为深拷贝，但是对象中有对象的时候，此方法，在二级属性以后就是浅拷贝。\n\n 3.使用递归的方式实现深拷贝\n\n```\n //使用递归的方式实现数组、对象的深拷贝\nfunction deepClone1(obj) {\n  //判断拷贝的要进行深拷贝的是数组还是对象，是数组的话进行数组拷贝，对象的话进行对象拷贝\n  var objClone = Array.isArray(obj) ? [] : {};\n  //进行深拷贝的不能为空，并且是对象或者是\n  if (obj && typeof obj === \"object\") {\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        if (obj[key] && typeof obj[key] === \"object\") {\n          objClone[key] = deepClone1(obj[key]);\n        } else {\n          objClone[key] = obj[key];\n        }\n      }\n    }\n  }\n  return objClone;\n}\n```\n\n5.lodash函数库实现深拷贝\n\nlodash很热门的函数库，提供了 lodash.cloneDeep()实现深拷贝\n","slug":"JavaScript-浅拷贝-深拷贝-赋值-引用-JS","published":1,"updated":"2020-04-11T14:17:20.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq63630007s9vmc8cxftq4","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这个问题说严重也不严重，说不小也不小。<br>如果你也刚刚好碰到了这个问题。就跟着我一起了解一下吧！</p>\n<h2 id=\"基本类型和引用类型\"><a href=\"#基本类型和引用类型\" class=\"headerlink\" title=\"基本类型和引用类型\"></a>基本类型和引用类型</h2><ul>\n<li><strong>基本类型</strong></li>\n</ul>\n<p>基本类型也称值类型，数值类型。<br>包括了</p>\n<ol>\n<li>String<ol start=\"2\">\n<li>Number</li>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Symbol（ES6新增，表示独一无二的一个值。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" target=\"_blank\" rel=\"noopener\">MDN</a>）</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/20190428204522836.png\"  alt=\"在这里插入图片描述\"></p>\n<p>基本类型的是放在栈区的，访问的时候也是按值访问，就是正常的理解的赋值。</p>\n<ul>\n<li><strong>引用类型和浅拷贝</strong></li>\n</ul>\n<p>引用类型，顾名思义就是引用来访问的。</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/20190428204904611.png\"  alt=\"在这里插入图片描述\"></p>\n<p>在这个例子中，我们操作的是<strong>q</strong>。为什么<strong>w</strong>也改变了呢？</p>\n<p>因为<strong>w</strong>不是真的给他赋值了[1, 2]。</p>\n<p>而是赋值给了<strong>q</strong>所指向的地址的指针。</p>\n<p>有点绕，其实说白了就是 q 是指向地址 A 的。</p>\n<p>w = q ，只是把 q 指向 地址 A 的这个指针赋值给了 w 。</p>\n<p>w 和 q 都可以操作这个地址的内容。</p>\n<p>所以，当我们用 q 来操作这个地址内容的时候，地址内容就变了。当 w 去取值的时候，内容已经变了。</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/20190428205243797.png\"  alt=\"在这里插入图片描述\"></p>\n<p>w 和 q 都可以操作这个地址内容。</p>\n<p>那么引用类型有那些呢？</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/20190428205350562.png\"  alt=\"在这里插入图片描述\"></p>\n<p>这样简单的引用赋值也叫做浅拷贝。</p>\n<p>可能会带来一些问题，比如:</p>\n<p>A和B都是数组；</p>\n<p>我只是懒得给B赋值和A一模一样的；</p>\n<p>所以我直接B = A；</p>\n<p>我在操作完B之后我又想去取值A的值的时候，发现A已经变了。</p>\n<p>在react中也有对state浅拷贝判断的（PureComponent）</p>\n<ul>\n<li><p><strong>深拷贝</strong></p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/20190428205853748.png\"  alt=\"在这里插入图片描述\"></p>\n</li>\n</ul>\n<p>这个就叫做深拷贝。</p>\n<p>将他的内容分解出来进行解析。</p>\n<p>但是这样会导致一个问题。</p>\n<p>麻烦！</p>\n<p>比如</p>\n<p>let A = [ {a: [1, 2]}, {b: [1, 2]} ]。</p>\n<p>这个时候要深拷贝给B的话。</p>\n<p>要一直结构到很深处。</p>\n<p>有几个个办法可以解决。</p>\n<p>1.叫做<strong>序列化</strong></p>\n<ul>\n<li><p>JSON.stringify()</p>\n</li>\n<li><p>JSON.parse()</p>\n<p>但是这样非常浪费资源</p>\n</li>\n</ul>\n<p>2.Object.assign()拷贝</p>\n<ul>\n<li>当对象中只有一级属性，没有二级属性的时候，此方法为深拷贝，但是对象中有对象的时候，此方法，在二级属性以后就是浅拷贝。</li>\n</ul>\n<p> 3.使用递归的方式实现深拷贝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#x2F;&#x2F;使用递归的方式实现数组、对象的深拷贝</span><br><span class=\"line\">function deepClone1(obj) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;判断拷贝的要进行深拷贝的是数组还是对象，是数组的话进行数组拷贝，对象的话进行对象拷贝</span><br><span class=\"line\">  var objClone &#x3D; Array.isArray(obj) ? [] : &#123;&#125;;</span><br><span class=\"line\">  &#x2F;&#x2F;进行深拷贝的不能为空，并且是对象或者是</span><br><span class=\"line\">  if (obj &amp;&amp; typeof obj &#x3D;&#x3D;&#x3D; &quot;object&quot;) &#123;</span><br><span class=\"line\">    for (key in obj) &#123;</span><br><span class=\"line\">      if (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">        if (obj[key] &amp;&amp; typeof obj[key] &#x3D;&#x3D;&#x3D; &quot;object&quot;) &#123;</span><br><span class=\"line\">          objClone[key] &#x3D; deepClone1(obj[key]);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          objClone[key] &#x3D; obj[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return objClone;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.lodash函数库实现深拷贝</p>\n<p>lodash很热门的函数库，提供了 lodash.cloneDeep()实现深拷贝</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这个问题说严重也不严重，说不小也不小。<br>如果你也刚刚好碰到了这个问题。就跟着我一起了解一下吧！</p>\n<h2 id=\"基本类型和引用类型\"><a href=\"#基本类型和引用类型\" class=\"headerlink\" title=\"基本类型和引用类型\"></a>基本类型和引用类型</h2><ul>\n<li><strong>基本类型</strong></li>\n</ul>\n<p>基本类型也称值类型，数值类型。<br>包括了</p>\n<ol>\n<li>String<ol start=\"2\">\n<li>Number</li>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Symbol（ES6新增，表示独一无二的一个值。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" target=\"_blank\" rel=\"noopener\">MDN</a>）</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/image/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/20190428204522836.png\" alt=\"在这里插入图片描述\"></p>\n<p>基本类型的是放在栈区的，访问的时候也是按值访问，就是正常的理解的赋值。</p>\n<ul>\n<li><strong>引用类型和浅拷贝</strong></li>\n</ul>\n<p>引用类型，顾名思义就是引用来访问的。</p>\n<p><img src=\"/image/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/20190428204904611.png\" alt=\"在这里插入图片描述\"></p>\n<p>在这个例子中，我们操作的是<strong>q</strong>。为什么<strong>w</strong>也改变了呢？</p>\n<p>因为<strong>w</strong>不是真的给他赋值了[1, 2]。</p>\n<p>而是赋值给了<strong>q</strong>所指向的地址的指针。</p>\n<p>有点绕，其实说白了就是 q 是指向地址 A 的。</p>\n<p>w = q ，只是把 q 指向 地址 A 的这个指针赋值给了 w 。</p>\n<p>w 和 q 都可以操作这个地址的内容。</p>\n<p>所以，当我们用 q 来操作这个地址内容的时候，地址内容就变了。当 w 去取值的时候，内容已经变了。</p>\n<p><img src=\"/image/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/20190428205243797.png\" alt=\"在这里插入图片描述\"></p>\n<p>w 和 q 都可以操作这个地址内容。</p>\n<p>那么引用类型有那些呢？</p>\n<p><img src=\"/image/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/20190428205350562.png\" alt=\"在这里插入图片描述\"></p>\n<p>这样简单的引用赋值也叫做浅拷贝。</p>\n<p>可能会带来一些问题，比如:</p>\n<p>A和B都是数组；</p>\n<p>我只是懒得给B赋值和A一模一样的；</p>\n<p>所以我直接B = A；</p>\n<p>我在操作完B之后我又想去取值A的值的时候，发现A已经变了。</p>\n<p>在react中也有对state浅拷贝判断的（PureComponent）</p>\n<ul>\n<li><p><strong>深拷贝</strong></p>\n<p><img src=\"/image/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/20190428205853748.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n</ul>\n<p>这个就叫做深拷贝。</p>\n<p>将他的内容分解出来进行解析。</p>\n<p>但是这样会导致一个问题。</p>\n<p>麻烦！</p>\n<p>比如</p>\n<p>let A = [ {a: [1, 2]}, {b: [1, 2]} ]。</p>\n<p>这个时候要深拷贝给B的话。</p>\n<p>要一直结构到很深处。</p>\n<p>有几个个办法可以解决。</p>\n<p>1.叫做<strong>序列化</strong></p>\n<ul>\n<li><p>JSON.stringify()</p>\n</li>\n<li><p>JSON.parse()</p>\n<p>但是这样非常浪费资源</p>\n</li>\n</ul>\n<p>2.Object.assign()拷贝</p>\n<ul>\n<li>当对象中只有一级属性，没有二级属性的时候，此方法为深拷贝，但是对象中有对象的时候，此方法，在二级属性以后就是浅拷贝。</li>\n</ul>\n<p> 3.使用递归的方式实现深拷贝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#x2F;&#x2F;使用递归的方式实现数组、对象的深拷贝</span><br><span class=\"line\">function deepClone1(obj) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;判断拷贝的要进行深拷贝的是数组还是对象，是数组的话进行数组拷贝，对象的话进行对象拷贝</span><br><span class=\"line\">  var objClone &#x3D; Array.isArray(obj) ? [] : &#123;&#125;;</span><br><span class=\"line\">  &#x2F;&#x2F;进行深拷贝的不能为空，并且是对象或者是</span><br><span class=\"line\">  if (obj &amp;&amp; typeof obj &#x3D;&#x3D;&#x3D; &quot;object&quot;) &#123;</span><br><span class=\"line\">    for (key in obj) &#123;</span><br><span class=\"line\">      if (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">        if (obj[key] &amp;&amp; typeof obj[key] &#x3D;&#x3D;&#x3D; &quot;object&quot;) &#123;</span><br><span class=\"line\">          objClone[key] &#x3D; deepClone1(obj[key]);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          objClone[key] &#x3D; obj[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return objClone;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.lodash函数库实现深拷贝</p>\n<p>lodash很热门的函数库，提供了 lodash.cloneDeep()实现深拷贝</p>\n"},{"title":"React Hook useState useEffect componentDidMount componentDidUpdate componentWillUnmount","date":"2019-07-30T13:00:00.000Z","cover":"/image/cover/React.jpeg","_content":"## 介绍\nHook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。\n\n## 缘由\n\nHook的初衷是为了解决原本无状态组建需要使用state, 必须改造为class这个痛点.\n\n## useState\n\n```\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // 声明一个叫 \"count\" 的 state 变量\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n这个是官方提供的最简单的例子.\n\n不难理解, 按钮每次点击都会调用一次setCount, 从而改变count的值\n\n和以下的例子等价\n\n```\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <p>You clicked {this.state.count} times</p>\n        <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n          Click me\n        </button>\n      </div>\n    );\n  }\n}\n```\n\n我用注释来解释可能更好理解useState每个参数的意义，稍微改造一下第一个例子\n\n```\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // 声明一个叫 \"count\" 的 state 变量\n  const [\n\t  count, 　// 在state里面的名字\n\t  setCount  // 改变这个名字的函数\n  ] = useState(\n  \t0  // 初值count的初值\n  );\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => \n      setCount(\n      count + 1  //  准备把count该成什么样子\n      )}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n在以前class的形式, 所有的可变数据都放在一个state内部进行维护, 这样这个state会越来越大...越来越臃肿...越来越难以维护..如果没有注释可能就难以理解...这样就诞生了**Redux**\n\n我本人认为, useState可以直接解决这样的一个痛点, 下面是我在新项目中使用**hook**的例子\n\n```\n// 表格loading\n  const [loading, setLoading] = useState(true);\n\n  // 表格数据\n  const [listData, setListData] = useState({ list: [], total: 0 });\n\n  // 当前页码\n  const [current, setCurrent] = useState(0);\n\n  // 搜索数据\n  const [searchData, setSearchData] = useState({});\n\n  // 医生职称\n  const [jobTitle, setJobTitle] = useState([]);\n\n  // 科室\n  const [dept, setDept] = useState([]);\n\n  // 弹窗显隐\n  const [visible, setVisible] = useState(false);\n\n  // 弹窗数据\n  const [showData, setShowData] = useState({});\n```\n可以很直观的看到基本上一个数据享受一个useState...配合正确的注释, 调用正确的方法, 使代码可读性大大增强.\n\n## useEffect\n\n> 如果你熟悉 React class 的生命周期函数，你可以把 useEffect Hook 看做 `componentDidMount，componentDidUpdate 和 componentWillUnmount` 这三个函数的组合。\n\n这句话来自官网的原画.\n\n接下来我就为大家解释useEffect\n\n> useEffect 会在每次渲染后都执行吗？ 是的，默认情况下，它在第一次渲染之后和每次更新之后都会执行。\n\n这个是官网的原话, 不难理解,这样就可以模拟出componentDidUpdate..你可以在hook里面写你想要逻辑. .\n\n直接上官网代码\n\n```\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n可以看到每次点击按钮, 都重新set了Count的值, 因为每次更新都会走到useEffect(后面会说到怎么样不每次都进入useEffect ).\n他是useEffect的逻辑是,每次都修改`document.title`\n\n这样就模拟了`componentDidUpdate`\n\n**componentDidMount  componentWillUnmount**\n\nuseEffect其实有两个参数, 第一个是调用函数, 第二个是监听值.\n\n```\nuseEffect(\n  () => { // 我叫A函数\n    const subscription = props.source.subscribe();\n    return () => {\n      subscription.unsubscribe();\n    };\n  },\n  [props.source],\n);\n```\n\n这段代码可以理解为, 程序一运行, 就调用了一次A函数,之后每次渲染虽然都会走到这个useEffect. 因为他有第二个参数.所以只有在 `[props.source]` 变化的时候.才会再次调用A函数.\n\n我们可以灵活的调用起来, 这个值可以来自useState控制.你想他变化的时候,你就用useState改变一下他的值.\n\n最典型的例子就是, **短信的倒计时**\n\n那我怎么样才可以优雅的让这个useEffect只调用一次.像componentDidMount呢?\n\n可以这样在第二个值传一个控制进去.\n\n```\nuseEffect(() => {\n    const firstGet = async () => {\n      const [z, x, c] = await Promise.all([\n        requestZ(),\n        requestX(),\n        requestZ(),\n      ]);\n      // 做你想做的事情\n    };\n    firstGet();\n  }, []);\n```\n\n这样就可以很优雅的模仿componentDidMount.而不需要在后面搞什么没人知道的花里胡哨的值.\n\n那怎么样才可以模仿componentWillUnmount呢?\n\n```\nuseEffect(() => {\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  }, []);\n```\n\n> 为什么要在 effect 中返回一个函数？ 这是 effect 可选的清除机制。每个 effect 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 effect 的一部分。\n\n> React 何时清除 effect？ React 会在组件卸载的时候执行清除操作。正如之前学到的，effect 在每次渲染的时候都会执行。这就是为什么 React 会在执行当前 effect 之前对上一个 effect 进行清除。\n\n这些都是官网的原话.  代码中的return 就是清除..同样的,在第二个值放入一个空.这样就会很优雅的清除了. 最明显就是短信倒计时的`setInerval`, clear一下才不会一直占用资源\n","source":"_posts/React-Hook-useState-useEffect-componentDidMount-componentDidUpdate-componentWillUnmount.md","raw":"---\ntitle: >-\n  React Hook useState useEffect componentDidMount componentDidUpdate\n  componentWillUnmount\ndate: 2019-07-30 21:00:00\ntags: [ReactHook, React]\ncategory: [React]\ncover: /image/cover/React.jpeg\n---\n## 介绍\nHook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。\n\n## 缘由\n\nHook的初衷是为了解决原本无状态组建需要使用state, 必须改造为class这个痛点.\n\n## useState\n\n```\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // 声明一个叫 \"count\" 的 state 变量\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n这个是官方提供的最简单的例子.\n\n不难理解, 按钮每次点击都会调用一次setCount, 从而改变count的值\n\n和以下的例子等价\n\n```\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <p>You clicked {this.state.count} times</p>\n        <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n          Click me\n        </button>\n      </div>\n    );\n  }\n}\n```\n\n我用注释来解释可能更好理解useState每个参数的意义，稍微改造一下第一个例子\n\n```\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // 声明一个叫 \"count\" 的 state 变量\n  const [\n\t  count, 　// 在state里面的名字\n\t  setCount  // 改变这个名字的函数\n  ] = useState(\n  \t0  // 初值count的初值\n  );\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => \n      setCount(\n      count + 1  //  准备把count该成什么样子\n      )}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n在以前class的形式, 所有的可变数据都放在一个state内部进行维护, 这样这个state会越来越大...越来越臃肿...越来越难以维护..如果没有注释可能就难以理解...这样就诞生了**Redux**\n\n我本人认为, useState可以直接解决这样的一个痛点, 下面是我在新项目中使用**hook**的例子\n\n```\n// 表格loading\n  const [loading, setLoading] = useState(true);\n\n  // 表格数据\n  const [listData, setListData] = useState({ list: [], total: 0 });\n\n  // 当前页码\n  const [current, setCurrent] = useState(0);\n\n  // 搜索数据\n  const [searchData, setSearchData] = useState({});\n\n  // 医生职称\n  const [jobTitle, setJobTitle] = useState([]);\n\n  // 科室\n  const [dept, setDept] = useState([]);\n\n  // 弹窗显隐\n  const [visible, setVisible] = useState(false);\n\n  // 弹窗数据\n  const [showData, setShowData] = useState({});\n```\n可以很直观的看到基本上一个数据享受一个useState...配合正确的注释, 调用正确的方法, 使代码可读性大大增强.\n\n## useEffect\n\n> 如果你熟悉 React class 的生命周期函数，你可以把 useEffect Hook 看做 `componentDidMount，componentDidUpdate 和 componentWillUnmount` 这三个函数的组合。\n\n这句话来自官网的原画.\n\n接下来我就为大家解释useEffect\n\n> useEffect 会在每次渲染后都执行吗？ 是的，默认情况下，它在第一次渲染之后和每次更新之后都会执行。\n\n这个是官网的原话, 不难理解,这样就可以模拟出componentDidUpdate..你可以在hook里面写你想要逻辑. .\n\n直接上官网代码\n\n```\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n可以看到每次点击按钮, 都重新set了Count的值, 因为每次更新都会走到useEffect(后面会说到怎么样不每次都进入useEffect ).\n他是useEffect的逻辑是,每次都修改`document.title`\n\n这样就模拟了`componentDidUpdate`\n\n**componentDidMount  componentWillUnmount**\n\nuseEffect其实有两个参数, 第一个是调用函数, 第二个是监听值.\n\n```\nuseEffect(\n  () => { // 我叫A函数\n    const subscription = props.source.subscribe();\n    return () => {\n      subscription.unsubscribe();\n    };\n  },\n  [props.source],\n);\n```\n\n这段代码可以理解为, 程序一运行, 就调用了一次A函数,之后每次渲染虽然都会走到这个useEffect. 因为他有第二个参数.所以只有在 `[props.source]` 变化的时候.才会再次调用A函数.\n\n我们可以灵活的调用起来, 这个值可以来自useState控制.你想他变化的时候,你就用useState改变一下他的值.\n\n最典型的例子就是, **短信的倒计时**\n\n那我怎么样才可以优雅的让这个useEffect只调用一次.像componentDidMount呢?\n\n可以这样在第二个值传一个控制进去.\n\n```\nuseEffect(() => {\n    const firstGet = async () => {\n      const [z, x, c] = await Promise.all([\n        requestZ(),\n        requestX(),\n        requestZ(),\n      ]);\n      // 做你想做的事情\n    };\n    firstGet();\n  }, []);\n```\n\n这样就可以很优雅的模仿componentDidMount.而不需要在后面搞什么没人知道的花里胡哨的值.\n\n那怎么样才可以模仿componentWillUnmount呢?\n\n```\nuseEffect(() => {\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  }, []);\n```\n\n> 为什么要在 effect 中返回一个函数？ 这是 effect 可选的清除机制。每个 effect 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 effect 的一部分。\n\n> React 何时清除 effect？ React 会在组件卸载的时候执行清除操作。正如之前学到的，effect 在每次渲染的时候都会执行。这就是为什么 React 会在执行当前 effect 之前对上一个 effect 进行清除。\n\n这些都是官网的原话.  代码中的return 就是清除..同样的,在第二个值放入一个空.这样就会很优雅的清除了. 最明显就是短信倒计时的`setInerval`, clear一下才不会一直占用资源\n","slug":"React-Hook-useState-useEffect-componentDidMount-componentDidUpdate-componentWillUnmount","published":1,"updated":"2020-04-11T14:21:10.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq63650008s9vmf20fdp8q","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\n<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>Hook的初衷是为了解决原本无状态组建需要使用state, 必须改造为class这个痛点.</p>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState &#125; from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 声明一个叫 &quot;count&quot; 的 state 变量</span><br><span class=\"line\">  const [count, setCount] &#x3D; useState(0);</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count + 1)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个是官方提供的最简单的例子.</p>\n<p>不难理解, 按钮每次点击都会调用一次setCount, 从而改变count的值</p>\n<p>和以下的例子等价</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Example extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state &#x3D; &#123;</span><br><span class=\"line\">      count: 0</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;You clicked &#123;this.state.count&#125; times&lt;&#x2F;p&gt;</span><br><span class=\"line\">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span><br><span class=\"line\">          Click me</span><br><span class=\"line\">        &lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我用注释来解释可能更好理解useState每个参数的意义，稍微改造一下第一个例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState &#125; from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 声明一个叫 &quot;count&quot; 的 state 变量</span><br><span class=\"line\">  const [</span><br><span class=\"line\">\t  count, 　&#x2F;&#x2F; 在state里面的名字</span><br><span class=\"line\">\t  setCount  &#x2F;&#x2F; 改变这个名字的函数</span><br><span class=\"line\">  ] &#x3D; useState(</span><br><span class=\"line\">  \t0  &#x2F;&#x2F; 初值count的初值</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; </span><br><span class=\"line\">      setCount(</span><br><span class=\"line\">      count + 1  &#x2F;&#x2F;  准备把count该成什么样子</span><br><span class=\"line\">      )&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在以前class的形式, 所有的可变数据都放在一个state内部进行维护, 这样这个state会越来越大…越来越臃肿…越来越难以维护..如果没有注释可能就难以理解…这样就诞生了<strong>Redux</strong></p>\n<p>我本人认为, useState可以直接解决这样的一个痛点, 下面是我在新项目中使用<strong>hook</strong>的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 表格loading</span><br><span class=\"line\">  const [loading, setLoading] &#x3D; useState(true);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 表格数据</span><br><span class=\"line\">  const [listData, setListData] &#x3D; useState(&#123; list: [], total: 0 &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 当前页码</span><br><span class=\"line\">  const [current, setCurrent] &#x3D; useState(0);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 搜索数据</span><br><span class=\"line\">  const [searchData, setSearchData] &#x3D; useState(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 医生职称</span><br><span class=\"line\">  const [jobTitle, setJobTitle] &#x3D; useState([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 科室</span><br><span class=\"line\">  const [dept, setDept] &#x3D; useState([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 弹窗显隐</span><br><span class=\"line\">  const [visible, setVisible] &#x3D; useState(false);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 弹窗数据</span><br><span class=\"line\">  const [showData, setShowData] &#x3D; useState(&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以很直观的看到基本上一个数据享受一个useState…配合正确的注释, 调用正确的方法, 使代码可读性大大增强.</p>\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><blockquote>\n<p>如果你熟悉 React class 的生命周期函数，你可以把 useEffect Hook 看做 <code>componentDidMount，componentDidUpdate 和 componentWillUnmount</code> 这三个函数的组合。</p>\n</blockquote>\n<p>这句话来自官网的原画.</p>\n<p>接下来我就为大家解释useEffect</p>\n<blockquote>\n<p>useEffect 会在每次渲染后都执行吗？ 是的，默认情况下，它在第一次渲染之后和每次更新之后都会执行。</p>\n</blockquote>\n<p>这个是官网的原话, 不难理解,这样就可以模拟出componentDidUpdate..你可以在hook里面写你想要逻辑. .</p>\n<p>直接上官网代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState, useEffect &#125; from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">  const [count, setCount] &#x3D; useState(0);</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    document.title &#x3D; &#96;You clicked $&#123;count&#125; times&#96;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count + 1)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到每次点击按钮, 都重新set了Count的值, 因为每次更新都会走到useEffect(后面会说到怎么样不每次都进入useEffect ).<br>他是useEffect的逻辑是,每次都修改<code>document.title</code></p>\n<p>这样就模拟了<code>componentDidUpdate</code></p>\n<p><strong>componentDidMount  componentWillUnmount</strong></p>\n<p>useEffect其实有两个参数, 第一个是调用函数, 第二个是监听值.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(</span><br><span class=\"line\">  () &#x3D;&gt; &#123; &#x2F;&#x2F; 我叫A函数</span><br><span class=\"line\">    const subscription &#x3D; props.source.subscribe();</span><br><span class=\"line\">    return () &#x3D;&gt; &#123;</span><br><span class=\"line\">      subscription.unsubscribe();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  [props.source],</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>这段代码可以理解为, 程序一运行, 就调用了一次A函数,之后每次渲染虽然都会走到这个useEffect. 因为他有第二个参数.所以只有在 <code>[props.source]</code> 变化的时候.才会再次调用A函数.</p>\n<p>我们可以灵活的调用起来, 这个值可以来自useState控制.你想他变化的时候,你就用useState改变一下他的值.</p>\n<p>最典型的例子就是, <strong>短信的倒计时</strong></p>\n<p>那我怎么样才可以优雅的让这个useEffect只调用一次.像componentDidMount呢?</p>\n<p>可以这样在第二个值传一个控制进去.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    const firstGet &#x3D; async () &#x3D;&gt; &#123;</span><br><span class=\"line\">      const [z, x, c] &#x3D; await Promise.all([</span><br><span class=\"line\">        requestZ(),</span><br><span class=\"line\">        requestX(),</span><br><span class=\"line\">        requestZ(),</span><br><span class=\"line\">      ]);</span><br><span class=\"line\">      &#x2F;&#x2F; 做你想做的事情</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    firstGet();</span><br><span class=\"line\">  &#125;, []);</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以很优雅的模仿componentDidMount.而不需要在后面搞什么没人知道的花里胡哨的值.</p>\n<p>那怎么样才可以模仿componentWillUnmount呢?</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Specify how to clean up after this effect:</span><br><span class=\"line\">    return function cleanup() &#123;</span><br><span class=\"line\">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为什么要在 effect 中返回一个函数？ 这是 effect 可选的清除机制。每个 effect 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 effect 的一部分。</p>\n</blockquote>\n<blockquote>\n<p>React 何时清除 effect？ React 会在组件卸载的时候执行清除操作。正如之前学到的，effect 在每次渲染的时候都会执行。这就是为什么 React 会在执行当前 effect 之前对上一个 effect 进行清除。</p>\n</blockquote>\n<p>这些都是官网的原话.  代码中的return 就是清除..同样的,在第二个值放入一个空.这样就会很优雅的清除了. 最明显就是短信倒计时的<code>setInerval</code>, clear一下才不会一直占用资源</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\n<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>Hook的初衷是为了解决原本无状态组建需要使用state, 必须改造为class这个痛点.</p>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState &#125; from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 声明一个叫 &quot;count&quot; 的 state 变量</span><br><span class=\"line\">  const [count, setCount] &#x3D; useState(0);</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count + 1)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个是官方提供的最简单的例子.</p>\n<p>不难理解, 按钮每次点击都会调用一次setCount, 从而改变count的值</p>\n<p>和以下的例子等价</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Example extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state &#x3D; &#123;</span><br><span class=\"line\">      count: 0</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;You clicked &#123;this.state.count&#125; times&lt;&#x2F;p&gt;</span><br><span class=\"line\">        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span><br><span class=\"line\">          Click me</span><br><span class=\"line\">        &lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我用注释来解释可能更好理解useState每个参数的意义，稍微改造一下第一个例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState &#125; from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 声明一个叫 &quot;count&quot; 的 state 变量</span><br><span class=\"line\">  const [</span><br><span class=\"line\">\t  count, 　&#x2F;&#x2F; 在state里面的名字</span><br><span class=\"line\">\t  setCount  &#x2F;&#x2F; 改变这个名字的函数</span><br><span class=\"line\">  ] &#x3D; useState(</span><br><span class=\"line\">  \t0  &#x2F;&#x2F; 初值count的初值</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; </span><br><span class=\"line\">      setCount(</span><br><span class=\"line\">      count + 1  &#x2F;&#x2F;  准备把count该成什么样子</span><br><span class=\"line\">      )&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在以前class的形式, 所有的可变数据都放在一个state内部进行维护, 这样这个state会越来越大…越来越臃肿…越来越难以维护..如果没有注释可能就难以理解…这样就诞生了<strong>Redux</strong></p>\n<p>我本人认为, useState可以直接解决这样的一个痛点, 下面是我在新项目中使用<strong>hook</strong>的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 表格loading</span><br><span class=\"line\">  const [loading, setLoading] &#x3D; useState(true);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 表格数据</span><br><span class=\"line\">  const [listData, setListData] &#x3D; useState(&#123; list: [], total: 0 &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 当前页码</span><br><span class=\"line\">  const [current, setCurrent] &#x3D; useState(0);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 搜索数据</span><br><span class=\"line\">  const [searchData, setSearchData] &#x3D; useState(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 医生职称</span><br><span class=\"line\">  const [jobTitle, setJobTitle] &#x3D; useState([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 科室</span><br><span class=\"line\">  const [dept, setDept] &#x3D; useState([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 弹窗显隐</span><br><span class=\"line\">  const [visible, setVisible] &#x3D; useState(false);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 弹窗数据</span><br><span class=\"line\">  const [showData, setShowData] &#x3D; useState(&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以很直观的看到基本上一个数据享受一个useState…配合正确的注释, 调用正确的方法, 使代码可读性大大增强.</p>\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><blockquote>\n<p>如果你熟悉 React class 的生命周期函数，你可以把 useEffect Hook 看做 <code>componentDidMount，componentDidUpdate 和 componentWillUnmount</code> 这三个函数的组合。</p>\n</blockquote>\n<p>这句话来自官网的原画.</p>\n<p>接下来我就为大家解释useEffect</p>\n<blockquote>\n<p>useEffect 会在每次渲染后都执行吗？ 是的，默认情况下，它在第一次渲染之后和每次更新之后都会执行。</p>\n</blockquote>\n<p>这个是官网的原话, 不难理解,这样就可以模拟出componentDidUpdate..你可以在hook里面写你想要逻辑. .</p>\n<p>直接上官网代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState, useEffect &#125; from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">  const [count, setCount] &#x3D; useState(0);</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    document.title &#x3D; &#96;You clicked $&#123;count&#125; times&#96;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;&#x2F;p&gt;</span><br><span class=\"line\">      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count + 1)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到每次点击按钮, 都重新set了Count的值, 因为每次更新都会走到useEffect(后面会说到怎么样不每次都进入useEffect ).<br>他是useEffect的逻辑是,每次都修改<code>document.title</code></p>\n<p>这样就模拟了<code>componentDidUpdate</code></p>\n<p><strong>componentDidMount  componentWillUnmount</strong></p>\n<p>useEffect其实有两个参数, 第一个是调用函数, 第二个是监听值.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(</span><br><span class=\"line\">  () &#x3D;&gt; &#123; &#x2F;&#x2F; 我叫A函数</span><br><span class=\"line\">    const subscription &#x3D; props.source.subscribe();</span><br><span class=\"line\">    return () &#x3D;&gt; &#123;</span><br><span class=\"line\">      subscription.unsubscribe();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  [props.source],</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>这段代码可以理解为, 程序一运行, 就调用了一次A函数,之后每次渲染虽然都会走到这个useEffect. 因为他有第二个参数.所以只有在 <code>[props.source]</code> 变化的时候.才会再次调用A函数.</p>\n<p>我们可以灵活的调用起来, 这个值可以来自useState控制.你想他变化的时候,你就用useState改变一下他的值.</p>\n<p>最典型的例子就是, <strong>短信的倒计时</strong></p>\n<p>那我怎么样才可以优雅的让这个useEffect只调用一次.像componentDidMount呢?</p>\n<p>可以这样在第二个值传一个控制进去.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    const firstGet &#x3D; async () &#x3D;&gt; &#123;</span><br><span class=\"line\">      const [z, x, c] &#x3D; await Promise.all([</span><br><span class=\"line\">        requestZ(),</span><br><span class=\"line\">        requestX(),</span><br><span class=\"line\">        requestZ(),</span><br><span class=\"line\">      ]);</span><br><span class=\"line\">      &#x2F;&#x2F; 做你想做的事情</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    firstGet();</span><br><span class=\"line\">  &#125;, []);</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以很优雅的模仿componentDidMount.而不需要在后面搞什么没人知道的花里胡哨的值.</p>\n<p>那怎么样才可以模仿componentWillUnmount呢?</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Specify how to clean up after this effect:</span><br><span class=\"line\">    return function cleanup() &#123;</span><br><span class=\"line\">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为什么要在 effect 中返回一个函数？ 这是 effect 可选的清除机制。每个 effect 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 effect 的一部分。</p>\n</blockquote>\n<blockquote>\n<p>React 何时清除 effect？ React 会在组件卸载的时候执行清除操作。正如之前学到的，effect 在每次渲染的时候都会执行。这就是为什么 React 会在执行当前 effect 之前对上一个 effect 进行清除。</p>\n</blockquote>\n<p>这些都是官网的原话.  代码中的return 就是清除..同样的,在第二个值放入一个空.这样就会很优雅的清除了. 最明显就是短信倒计时的<code>setInerval</code>, clear一下才不会一直占用资源</p>\n"},{"title":"React Hook 倒计时","date":"2019-07-30T13:01:24.000Z","cover":"/image/cover/React.jpeg","_content":"\n```\nuseEffect(() => {\n    setTimeout(() => {\n      if (count > 0) {\n        setCount((c: number) => c - 1); // ✅ 在这不依赖于外部的 `count` 变量\n      }\n    }, 1000);\n  }, [count]); // ✅ 我们的 effect 不适用组件作用域中的任何变量\n```\n\n```\n<button onClick={() => setCount(60)} >点我</button>\n```\n\n","source":"_posts/React-Hook-倒计时.md","raw":"---\ntitle: React Hook 倒计时\ndate: 2019-07-30 21:01:24\ntags: [ReactHook, React, 倒计时]\ncategory: [React]\ncover: /image/cover/React.jpeg\n---\n\n```\nuseEffect(() => {\n    setTimeout(() => {\n      if (count > 0) {\n        setCount((c: number) => c - 1); // ✅ 在这不依赖于外部的 `count` 变量\n      }\n    }, 1000);\n  }, [count]); // ✅ 我们的 effect 不适用组件作用域中的任何变量\n```\n\n```\n<button onClick={() => setCount(60)} >点我</button>\n```\n\n","slug":"React-Hook-倒计时","published":1,"updated":"2020-04-11T14:20:32.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq6367000bs9vmhl3afsge","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">      if (count &gt; 0) &#123;</span><br><span class=\"line\">        setCount((c: number) &#x3D;&gt; c - 1); &#x2F;&#x2F; ✅ 在这不依赖于外部的 &#96;count&#96; 变量</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">  &#125;, [count]); &#x2F;&#x2F; ✅ 我们的 effect 不适用组件作用域中的任何变量</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(60)&#125; &gt;点我&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">      if (count &gt; 0) &#123;</span><br><span class=\"line\">        setCount((c: number) &#x3D;&gt; c - 1); &#x2F;&#x2F; ✅ 在这不依赖于外部的 &#96;count&#96; 变量</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">  &#125;, [count]); &#x2F;&#x2F; ✅ 我们的 effect 不适用组件作用域中的任何变量</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick&#x3D;&#123;() &#x3D;&gt; setCount(60)&#125; &gt;点我&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Web前端 学习目录 学习框架 系统性的学习Web前端","date":"2019-06-19T02:28:50.000Z","cover":"/image/cover/web.jpeg","_content":"\n## 前言\n\n\n这个是目前从网上偷来的，自己学习Web前端可能会用得到，特此记录一下\n\n\n> 每个 JavaScript 工程师都应懂的33个概念 @leonardomso\n\nhttps://github.com/stephentian/33-js-concepts\n\n![在这里插入图片描述](/image/Web前端学习路线/20190328205449472.png)\n\n","source":"_posts/Web前端-学习目录-学习框架-系统性的学习Web前端.md","raw":"---\ntitle: Web前端 学习目录 学习框架 系统性的学习Web前端\ndate: 2019-06-19 10:28:50\ntags: [系统性的学习, 学习目录, Web前端, 学习框架]\ncategory: [Web前端]\ncover: /image/cover/web.jpeg\n---\n\n## 前言\n\n\n这个是目前从网上偷来的，自己学习Web前端可能会用得到，特此记录一下\n\n\n> 每个 JavaScript 工程师都应懂的33个概念 @leonardomso\n\nhttps://github.com/stephentian/33-js-concepts\n\n![在这里插入图片描述](/image/Web前端学习路线/20190328205449472.png)\n\n","slug":"Web前端-学习目录-学习框架-系统性的学习Web前端","published":1,"updated":"2020-04-11T14:31:16.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq6368000cs9vm2csv9zs8","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这个是目前从网上偷来的，自己学习Web前端可能会用得到，特此记录一下</p>\n<blockquote>\n<p>每个 JavaScript 工程师都应懂的33个概念 @leonardomso</p>\n</blockquote>\n<p><a href=\"https://github.com/stephentian/33-js-concepts\" target=\"_blank\" rel=\"noopener\">https://github.com/stephentian/33-js-concepts</a></p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/20190328205449472.png\"  alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这个是目前从网上偷来的，自己学习Web前端可能会用得到，特此记录一下</p>\n<blockquote>\n<p>每个 JavaScript 工程师都应懂的33个概念 @leonardomso</p>\n</blockquote>\n<p><a href=\"https://github.com/stephentian/33-js-concepts\" target=\"_blank\" rel=\"noopener\">https://github.com/stephentian/33-js-concepts</a></p>\n<p><img src=\"/image/Web%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/20190328205449472.png\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"Webpack CleanWebpackPlugin is not a constructor","date":"2019-06-22T07:55:56.000Z","cover":"/image/cover/webpack.png","_content":"\n## 前言\n今天自己跟着webpack官网的demo一步步走下来。发现了这个问题。\n\n![](/image/WebpackCleanWebpackPlugin/20190622155255789.png)\n\n查了一圈。发现了这个博主。nice！\n```\n// webpack版本：4.34.0\n \n// 抛错原写法\nconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\n \n...\n \nplugins: [\n    new CleanWebpackPlugin(['dist'])\n]\n \n...\n \n// 另一种错误写法\n \nconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\n \n...\n \nplugins: [\n    new CleanWebpackPlugin(['dist'], {\n        root: path.resolve(__dirname, '../'),   //根目录\n    })\n]\n \n...\n \n// =============================分割线==============================\n \n// 正确写法\n \nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\n \n...\n \nplugins: [\n    new CleanWebpackPlugin()\n]\n \n```\n\n 现在的版本不用指定文件路径了，直接调用new CleanWebpackPlugin()\n ![在这里插入图片描述](/image/WebpackCleanWebpackPlugin/20190622155123842.png)\n索引：https://blog.csdn.net/qq_36242361/article/details/90709258\n\n","source":"_posts/Webpack-CleanWebpackPlugin-is-not-a-constructor.md","raw":"---\ntitle: Webpack CleanWebpackPlugin is not a constructor\ndate: 2019-06-22 15:55:56\ntags: [WebPack, clean-webpack-plugin]\ncategory: [WebPack]\ncover: /image/cover/webpack.png\n---\n\n## 前言\n今天自己跟着webpack官网的demo一步步走下来。发现了这个问题。\n\n![](/image/WebpackCleanWebpackPlugin/20190622155255789.png)\n\n查了一圈。发现了这个博主。nice！\n```\n// webpack版本：4.34.0\n \n// 抛错原写法\nconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\n \n...\n \nplugins: [\n    new CleanWebpackPlugin(['dist'])\n]\n \n...\n \n// 另一种错误写法\n \nconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\n \n...\n \nplugins: [\n    new CleanWebpackPlugin(['dist'], {\n        root: path.resolve(__dirname, '../'),   //根目录\n    })\n]\n \n...\n \n// =============================分割线==============================\n \n// 正确写法\n \nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\n \n...\n \nplugins: [\n    new CleanWebpackPlugin()\n]\n \n```\n\n 现在的版本不用指定文件路径了，直接调用new CleanWebpackPlugin()\n ![在这里插入图片描述](/image/WebpackCleanWebpackPlugin/20190622155123842.png)\n索引：https://blog.csdn.net/qq_36242361/article/details/90709258\n\n","slug":"Webpack-CleanWebpackPlugin-is-not-a-constructor","published":1,"updated":"2020-04-11T14:28:22.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq636b000gs9vm5hh5611t","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天自己跟着webpack官网的demo一步步走下来。发现了这个问题。</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/WebpackCleanWebpackPlugin/20190622155255789.png\"  alt=\"\"></p>\n<p>查了一圈。发现了这个博主。nice！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; webpack版本：4.34.0</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F; 抛错原写法</span><br><span class=\"line\">const CleanWebpackPlugin &#x3D; require(&quot;clean-webpack-plugin&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    new CleanWebpackPlugin([&#39;dist&#39;])</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F; 另一种错误写法</span><br><span class=\"line\"> </span><br><span class=\"line\">const CleanWebpackPlugin &#x3D; require(&quot;clean-webpack-plugin&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    new CleanWebpackPlugin([&#39;dist&#39;], &#123;</span><br><span class=\"line\">        root: path.resolve(__dirname, &#39;..&#x2F;&#39;),   &#x2F;&#x2F;根目录</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;分割线&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F; 正确写法</span><br><span class=\"line\"> </span><br><span class=\"line\">const &#123; CleanWebpackPlugin &#125; &#x3D; require(&quot;clean-webpack-plugin&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    new CleanWebpackPlugin()</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p> 现在的版本不用指定文件路径了，直接调用new CleanWebpackPlugin()<br> <img src=\"/\" class=\"lazyload\" data-src=\"/image/WebpackCleanWebpackPlugin/20190622155123842.png\"  alt=\"在这里插入图片描述\"><br>索引：<a href=\"https://blog.csdn.net/qq_36242361/article/details/90709258\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36242361/article/details/90709258</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天自己跟着webpack官网的demo一步步走下来。发现了这个问题。</p>\n<p><img src=\"/image/WebpackCleanWebpackPlugin/20190622155255789.png\" alt=\"\"></p>\n<p>查了一圈。发现了这个博主。nice！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; webpack版本：4.34.0</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F; 抛错原写法</span><br><span class=\"line\">const CleanWebpackPlugin &#x3D; require(&quot;clean-webpack-plugin&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    new CleanWebpackPlugin([&#39;dist&#39;])</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F; 另一种错误写法</span><br><span class=\"line\"> </span><br><span class=\"line\">const CleanWebpackPlugin &#x3D; require(&quot;clean-webpack-plugin&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    new CleanWebpackPlugin([&#39;dist&#39;], &#123;</span><br><span class=\"line\">        root: path.resolve(__dirname, &#39;..&#x2F;&#39;),   &#x2F;&#x2F;根目录</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;分割线&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F; 正确写法</span><br><span class=\"line\"> </span><br><span class=\"line\">const &#123; CleanWebpackPlugin &#125; &#x3D; require(&quot;clean-webpack-plugin&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    new CleanWebpackPlugin()</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p> 现在的版本不用指定文件路径了，直接调用new CleanWebpackPlugin()<br> <img src=\"/image/WebpackCleanWebpackPlugin/20190622155123842.png\" alt=\"在这里插入图片描述\"><br>索引：<a href=\"https://blog.csdn.net/qq_36242361/article/details/90709258\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_36242361/article/details/90709258</a></p>\n"},{"title":"ant design pro 2.0 新页面探索 umi 页面404 react","date":"2019-06-19T03:16:30.000Z","cover":"/image/cover/antdP.png","_content":"\n## 前言\n\n\t\tant design pro 2.0发布了\n\t\n\t\t使用umi作为路由配置，全自动化。\n\n## 开始\n\n![在这里插入图片描述](/image/AntDesignPro探索/20190312150742764.png)\n\n这个是官方的介绍。根据提示我开始加入我的路由\n\n\n![在这里插入图片描述](/image/AntDesignPro探索/20190312151053807.png)\n\n我在最后面另起一行，加入了我的新的路由。名字叫做Test。\n\ncomponent是你具体路由的实际位置（根路径是pages）\n\n\n![在这里插入图片描述](/image/AntDesignPro探索/20190312150929439.png)\n\nCtrl + S\n\n看效果！\n\n![在这里插入图片描述](/image/AntDesignPro探索/2019031215120430.png)\n\n - 菜单是出来了\n - 为什么404！！\n\n 通过4个多小时的google，在这位兄台的指点下。我知道了。\n\n\n新页面要写在404之前。\n\n![在这里插入图片描述](/image/AntDesignPro探索/2019031215140926.png)\n\n正常的新手，都是在最后加入一个新的路由。。。不知道这个坑爹的问题是为什么。我马上去质问了一下ant design pro的作者之一。得到了解答！！！非常的激动！！\n\n\n![在这里插入图片描述](/image/AntDesignPro探索/2019031215175956.png)\n\n\n所以我们只要在404之前添加新的页面就可以了\n\n![在这里插入图片描述](/image/AntDesignPro探索/20190312151839845.png)\n\n\n补充：\n是因为React-Router规定的。","source":"_posts/ant-design-pro-2-0-新页面探索-umi-页面404-react.md","raw":"---\ntitle: ant design pro 2.0 新页面探索 umi 页面404 react\ndate: 2019-06-19 11:16:30\ntags: [React-Router, UMI, Ant-Design-Pro]\ncategory: [Ant-Design-Pro]\ncover: /image/cover/antdP.png\n---\n\n## 前言\n\n\t\tant design pro 2.0发布了\n\t\n\t\t使用umi作为路由配置，全自动化。\n\n## 开始\n\n![在这里插入图片描述](/image/AntDesignPro探索/20190312150742764.png)\n\n这个是官方的介绍。根据提示我开始加入我的路由\n\n\n![在这里插入图片描述](/image/AntDesignPro探索/20190312151053807.png)\n\n我在最后面另起一行，加入了我的新的路由。名字叫做Test。\n\ncomponent是你具体路由的实际位置（根路径是pages）\n\n\n![在这里插入图片描述](/image/AntDesignPro探索/20190312150929439.png)\n\nCtrl + S\n\n看效果！\n\n![在这里插入图片描述](/image/AntDesignPro探索/2019031215120430.png)\n\n - 菜单是出来了\n - 为什么404！！\n\n 通过4个多小时的google，在这位兄台的指点下。我知道了。\n\n\n新页面要写在404之前。\n\n![在这里插入图片描述](/image/AntDesignPro探索/2019031215140926.png)\n\n正常的新手，都是在最后加入一个新的路由。。。不知道这个坑爹的问题是为什么。我马上去质问了一下ant design pro的作者之一。得到了解答！！！非常的激动！！\n\n\n![在这里插入图片描述](/image/AntDesignPro探索/2019031215175956.png)\n\n\n所以我们只要在404之前添加新的页面就可以了\n\n![在这里插入图片描述](/image/AntDesignPro探索/20190312151839845.png)\n\n\n补充：\n是因为React-Router规定的。","slug":"ant-design-pro-2-0-新页面探索-umi-页面404-react","published":1,"updated":"2020-04-11T14:06:00.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq636h000is9vm78619f6x","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><pre><code>ant design pro 2.0发布了\n\n使用umi作为路由配置，全自动化。</code></pre><h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p><img src=\"/\" class=\"lazyload\" data-src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/20190312150742764.png\"  alt=\"在这里插入图片描述\"></p>\n<p>这个是官方的介绍。根据提示我开始加入我的路由</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/20190312151053807.png\"  alt=\"在这里插入图片描述\"></p>\n<p>我在最后面另起一行，加入了我的新的路由。名字叫做Test。</p>\n<p>component是你具体路由的实际位置（根路径是pages）</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/20190312150929439.png\"  alt=\"在这里插入图片描述\"></p>\n<p>Ctrl + S</p>\n<p>看效果！</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/2019031215120430.png\"  alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>菜单是出来了</p>\n</li>\n<li><p>为什么404！！</p>\n<p>通过4个多小时的google，在这位兄台的指点下。我知道了。</p>\n</li>\n</ul>\n<p>新页面要写在404之前。</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/2019031215140926.png\"  alt=\"在这里插入图片描述\"></p>\n<p>正常的新手，都是在最后加入一个新的路由。。。不知道这个坑爹的问题是为什么。我马上去质问了一下ant design pro的作者之一。得到了解答！！！非常的激动！！</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/2019031215175956.png\"  alt=\"在这里插入图片描述\"></p>\n<p>所以我们只要在404之前添加新的页面就可以了</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/20190312151839845.png\"  alt=\"在这里插入图片描述\"></p>\n<p>补充：<br>是因为React-Router规定的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><pre><code>ant design pro 2.0发布了\n\n使用umi作为路由配置，全自动化。</code></pre><h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p><img src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/20190312150742764.png\" alt=\"在这里插入图片描述\"></p>\n<p>这个是官方的介绍。根据提示我开始加入我的路由</p>\n<p><img src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/20190312151053807.png\" alt=\"在这里插入图片描述\"></p>\n<p>我在最后面另起一行，加入了我的新的路由。名字叫做Test。</p>\n<p>component是你具体路由的实际位置（根路径是pages）</p>\n<p><img src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/20190312150929439.png\" alt=\"在这里插入图片描述\"></p>\n<p>Ctrl + S</p>\n<p>看效果！</p>\n<p><img src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/2019031215120430.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><p>菜单是出来了</p>\n</li>\n<li><p>为什么404！！</p>\n<p>通过4个多小时的google，在这位兄台的指点下。我知道了。</p>\n</li>\n</ul>\n<p>新页面要写在404之前。</p>\n<p><img src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/2019031215140926.png\" alt=\"在这里插入图片描述\"></p>\n<p>正常的新手，都是在最后加入一个新的路由。。。不知道这个坑爹的问题是为什么。我马上去质问了一下ant design pro的作者之一。得到了解答！！！非常的激动！！</p>\n<p><img src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/2019031215175956.png\" alt=\"在这里插入图片描述\"></p>\n<p>所以我们只要在404之前添加新的页面就可以了</p>\n<p><img src=\"/image/AntDesignPro%E6%8E%A2%E7%B4%A2/20190312151839845.png\" alt=\"在这里插入图片描述\"></p>\n<p>补充：<br>是因为React-Router规定的。</p>\n"},{"title":"chunk 0 [mini-css-extract-plugin] 解决 CSS Modules 警告","date":"2019-06-29T02:38:06.000Z","cover":"/image/cover/css.png","_content":"\n## 前言\n前两周，用公司的CI部署的时候，发现![](/image/CSSModules警告/aHR0cDovL2kyLnRpaW1nLmNvbS82OTE2NDMvMmVmODNhMzcxNjA4OWEwZS5wbmc.jpeg)\n很鲜明的ERR！\n其实这个这个只是一个warning。但是由于环境变量（process.env.ci === true）。所以这个warning被转化成了error，导致了编译失败。一般的CI服务器会自动将这个这设置为true。\n\n## 解决方案\n因为知道了原因，所以解决方案有以下两个\n\n - 修复这个warning。\n - 让运维小哥哥帮忙把这个环境变量设置为false。\n\n本着探寻的心。我开始了google，baidu。\n我查了整整两天。\n\n其实这些东西可能使用webpack的一些配置就改完了。但是由于我使用的是`react-app-rewired`。\n[ant design mobile](https://mobile.ant.design/docs/react/use-with-create-react-app-cn)\n具体想了解的可以自己去了解。我们言归正传。\n\n## 探索\n我开始找各种“人”的毛病\n`less，sass，less-loader，node-sass，postcss-px2rem` 等等。我几乎吧package.json里面的东西都试了一遍，不管是最新的，或者是我查询的过程中有提到了，我升级或者降级为固定版本。\n无果！\n\n![一个issue](/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvMGM4ZDhiNjZlMGNmZTY0Ny5wbmc.jpeg)\n\n他的大致意思是，CSS更加关注加载顺序，OK\n我把我的项目所有的CSS加载顺序改成了一致（其实根本没有加载两个以上CSS的地方，我只是把他们都放到最后一行import）\n\n\n还是翻车了。但是给了我很大的启发。\n\n我开始关注原理。看报错的内容。\n\n几乎都是和Ant Design Mobil相关的。\n\n我想到了我几乎所有的页面都是几乎一个我自己写的组件`<PageContainer>`\n\n![PageContainer](/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvZWIwYzBmODU2NDE0OGZjMC5wbmc.jpeg)\n\n在这里我用到了Ant Design Mobile的组件。\n我尝试把这里的组件全部删除。然后在本地build。\n\n竟然成功了！\n\n很明显，问题出在了我这个共用组件头上。我开始研究他。\n\n最后我发现，只要在我的这个组件里面的组件直接用到了Ant Design Mobile的组件就会报出CSS Module的警告。\n\n在Ant Design 的issues里面我发现，也有人有这个问题，但是也有人说明了原因。\n\n我个人的理解是这样的：因为Ant Design 内部也做了CSS的按需加载。导致我们引用组件的时候，很容易造成CSS引入顺序的不一致。\n\n然后我想出了解决方案，将我所有的组件，或者说子组件，全部封装到孙子组件中。就可以解决了\n\n![子组件](/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvODU2M2ZjOGJhZTU1ODI3Yy5wbmc.jpeg)\n\n最后，预约的看到了\n\n![编译成功](/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvYTkxMmI1YzhlNTk3YTYzYy5wbmc.jpeg)","source":"_posts/chunk-0-mini-css-extract-plugin-解决-CSS-Modules-警告.md","raw":"---\ntitle: 'chunk 0 [mini-css-extract-plugin] 解决 CSS Modules 警告'\ndate: 2019-06-29 10:38:06\ntags: [CSS-Module]\ncategory: [CSS]\ncover: /image/cover/css.png\n---\n\n## 前言\n前两周，用公司的CI部署的时候，发现![](/image/CSSModules警告/aHR0cDovL2kyLnRpaW1nLmNvbS82OTE2NDMvMmVmODNhMzcxNjA4OWEwZS5wbmc.jpeg)\n很鲜明的ERR！\n其实这个这个只是一个warning。但是由于环境变量（process.env.ci === true）。所以这个warning被转化成了error，导致了编译失败。一般的CI服务器会自动将这个这设置为true。\n\n## 解决方案\n因为知道了原因，所以解决方案有以下两个\n\n - 修复这个warning。\n - 让运维小哥哥帮忙把这个环境变量设置为false。\n\n本着探寻的心。我开始了google，baidu。\n我查了整整两天。\n\n其实这些东西可能使用webpack的一些配置就改完了。但是由于我使用的是`react-app-rewired`。\n[ant design mobile](https://mobile.ant.design/docs/react/use-with-create-react-app-cn)\n具体想了解的可以自己去了解。我们言归正传。\n\n## 探索\n我开始找各种“人”的毛病\n`less，sass，less-loader，node-sass，postcss-px2rem` 等等。我几乎吧package.json里面的东西都试了一遍，不管是最新的，或者是我查询的过程中有提到了，我升级或者降级为固定版本。\n无果！\n\n![一个issue](/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvMGM4ZDhiNjZlMGNmZTY0Ny5wbmc.jpeg)\n\n他的大致意思是，CSS更加关注加载顺序，OK\n我把我的项目所有的CSS加载顺序改成了一致（其实根本没有加载两个以上CSS的地方，我只是把他们都放到最后一行import）\n\n\n还是翻车了。但是给了我很大的启发。\n\n我开始关注原理。看报错的内容。\n\n几乎都是和Ant Design Mobil相关的。\n\n我想到了我几乎所有的页面都是几乎一个我自己写的组件`<PageContainer>`\n\n![PageContainer](/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvZWIwYzBmODU2NDE0OGZjMC5wbmc.jpeg)\n\n在这里我用到了Ant Design Mobile的组件。\n我尝试把这里的组件全部删除。然后在本地build。\n\n竟然成功了！\n\n很明显，问题出在了我这个共用组件头上。我开始研究他。\n\n最后我发现，只要在我的这个组件里面的组件直接用到了Ant Design Mobile的组件就会报出CSS Module的警告。\n\n在Ant Design 的issues里面我发现，也有人有这个问题，但是也有人说明了原因。\n\n我个人的理解是这样的：因为Ant Design 内部也做了CSS的按需加载。导致我们引用组件的时候，很容易造成CSS引入顺序的不一致。\n\n然后我想出了解决方案，将我所有的组件，或者说子组件，全部封装到孙子组件中。就可以解决了\n\n![子组件](/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvODU2M2ZjOGJhZTU1ODI3Yy5wbmc.jpeg)\n\n最后，预约的看到了\n\n![编译成功](/image/CSSModules警告/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvYTkxMmI1YzhlNTk3YTYzYy5wbmc.jpeg)","slug":"chunk-0-mini-css-extract-plugin-解决-CSS-Modules-警告","published":1,"updated":"2020-04-11T14:10:23.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq636j000ms9vm8p4qf5yd","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前两周，用公司的CI部署的时候，发现<img src=\"/\" class=\"lazyload\" data-src=\"/image/CSSModules%E8%AD%A6%E5%91%8A/aHR0cDovL2kyLnRpaW1nLmNvbS82OTE2NDMvMmVmODNhMzcxNjA4OWEwZS5wbmc.jpeg\"  alt=\"\"><br>很鲜明的ERR！<br>其实这个这个只是一个warning。但是由于环境变量（process.env.ci === true）。所以这个warning被转化成了error，导致了编译失败。一般的CI服务器会自动将这个这设置为true。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>因为知道了原因，所以解决方案有以下两个</p>\n<ul>\n<li>修复这个warning。</li>\n<li>让运维小哥哥帮忙把这个环境变量设置为false。</li>\n</ul>\n<p>本着探寻的心。我开始了google，baidu。<br>我查了整整两天。</p>\n<p>其实这些东西可能使用webpack的一些配置就改完了。但是由于我使用的是<code>react-app-rewired</code>。<br><a href=\"https://mobile.ant.design/docs/react/use-with-create-react-app-cn\" target=\"_blank\" rel=\"noopener\">ant design mobile</a><br>具体想了解的可以自己去了解。我们言归正传。</p>\n<h2 id=\"探索\"><a href=\"#探索\" class=\"headerlink\" title=\"探索\"></a>探索</h2><p>我开始找各种“人”的毛病<br><code>less，sass，less-loader，node-sass，postcss-px2rem</code> 等等。我几乎吧package.json里面的东西都试了一遍，不管是最新的，或者是我查询的过程中有提到了，我升级或者降级为固定版本。<br>无果！</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/CSSModules%E8%AD%A6%E5%91%8A/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvMGM4ZDhiNjZlMGNmZTY0Ny5wbmc.jpeg\"  alt=\"一个issue\"></p>\n<p>他的大致意思是，CSS更加关注加载顺序，OK<br>我把我的项目所有的CSS加载顺序改成了一致（其实根本没有加载两个以上CSS的地方，我只是把他们都放到最后一行import）</p>\n<p>还是翻车了。但是给了我很大的启发。</p>\n<p>我开始关注原理。看报错的内容。</p>\n<p>几乎都是和Ant Design Mobil相关的。</p>\n<p>我想到了我几乎所有的页面都是几乎一个我自己写的组件<code>&lt;PageContainer&gt;</code></p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/CSSModules%E8%AD%A6%E5%91%8A/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvZWIwYzBmODU2NDE0OGZjMC5wbmc.jpeg\"  alt=\"PageContainer\"></p>\n<p>在这里我用到了Ant Design Mobile的组件。<br>我尝试把这里的组件全部删除。然后在本地build。</p>\n<p>竟然成功了！</p>\n<p>很明显，问题出在了我这个共用组件头上。我开始研究他。</p>\n<p>最后我发现，只要在我的这个组件里面的组件直接用到了Ant Design Mobile的组件就会报出CSS Module的警告。</p>\n<p>在Ant Design 的issues里面我发现，也有人有这个问题，但是也有人说明了原因。</p>\n<p>我个人的理解是这样的：因为Ant Design 内部也做了CSS的按需加载。导致我们引用组件的时候，很容易造成CSS引入顺序的不一致。</p>\n<p>然后我想出了解决方案，将我所有的组件，或者说子组件，全部封装到孙子组件中。就可以解决了</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/CSSModules%E8%AD%A6%E5%91%8A/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvODU2M2ZjOGJhZTU1ODI3Yy5wbmc.jpeg\"  alt=\"子组件\"></p>\n<p>最后，预约的看到了</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/CSSModules%E8%AD%A6%E5%91%8A/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvYTkxMmI1YzhlNTk3YTYzYy5wbmc.jpeg\"  alt=\"编译成功\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前两周，用公司的CI部署的时候，发现<img src=\"/image/CSSModules%E8%AD%A6%E5%91%8A/aHR0cDovL2kyLnRpaW1nLmNvbS82OTE2NDMvMmVmODNhMzcxNjA4OWEwZS5wbmc.jpeg\" alt=\"\"><br>很鲜明的ERR！<br>其实这个这个只是一个warning。但是由于环境变量（process.env.ci === true）。所以这个warning被转化成了error，导致了编译失败。一般的CI服务器会自动将这个这设置为true。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>因为知道了原因，所以解决方案有以下两个</p>\n<ul>\n<li>修复这个warning。</li>\n<li>让运维小哥哥帮忙把这个环境变量设置为false。</li>\n</ul>\n<p>本着探寻的心。我开始了google，baidu。<br>我查了整整两天。</p>\n<p>其实这些东西可能使用webpack的一些配置就改完了。但是由于我使用的是<code>react-app-rewired</code>。<br><a href=\"https://mobile.ant.design/docs/react/use-with-create-react-app-cn\" target=\"_blank\" rel=\"noopener\">ant design mobile</a><br>具体想了解的可以自己去了解。我们言归正传。</p>\n<h2 id=\"探索\"><a href=\"#探索\" class=\"headerlink\" title=\"探索\"></a>探索</h2><p>我开始找各种“人”的毛病<br><code>less，sass，less-loader，node-sass，postcss-px2rem</code> 等等。我几乎吧package.json里面的东西都试了一遍，不管是最新的，或者是我查询的过程中有提到了，我升级或者降级为固定版本。<br>无果！</p>\n<p><img src=\"/image/CSSModules%E8%AD%A6%E5%91%8A/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvMGM4ZDhiNjZlMGNmZTY0Ny5wbmc.jpeg\" alt=\"一个issue\"></p>\n<p>他的大致意思是，CSS更加关注加载顺序，OK<br>我把我的项目所有的CSS加载顺序改成了一致（其实根本没有加载两个以上CSS的地方，我只是把他们都放到最后一行import）</p>\n<p>还是翻车了。但是给了我很大的启发。</p>\n<p>我开始关注原理。看报错的内容。</p>\n<p>几乎都是和Ant Design Mobil相关的。</p>\n<p>我想到了我几乎所有的页面都是几乎一个我自己写的组件<code>&lt;PageContainer&gt;</code></p>\n<p><img src=\"/image/CSSModules%E8%AD%A6%E5%91%8A/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvZWIwYzBmODU2NDE0OGZjMC5wbmc.jpeg\" alt=\"PageContainer\"></p>\n<p>在这里我用到了Ant Design Mobile的组件。<br>我尝试把这里的组件全部删除。然后在本地build。</p>\n<p>竟然成功了！</p>\n<p>很明显，问题出在了我这个共用组件头上。我开始研究他。</p>\n<p>最后我发现，只要在我的这个组件里面的组件直接用到了Ant Design Mobile的组件就会报出CSS Module的警告。</p>\n<p>在Ant Design 的issues里面我发现，也有人有这个问题，但是也有人说明了原因。</p>\n<p>我个人的理解是这样的：因为Ant Design 内部也做了CSS的按需加载。导致我们引用组件的时候，很容易造成CSS引入顺序的不一致。</p>\n<p>然后我想出了解决方案，将我所有的组件，或者说子组件，全部封装到孙子组件中。就可以解决了</p>\n<p><img src=\"/image/CSSModules%E8%AD%A6%E5%91%8A/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvODU2M2ZjOGJhZTU1ODI3Yy5wbmc.jpeg\" alt=\"子组件\"></p>\n<p>最后，预约的看到了</p>\n<p><img src=\"/image/CSSModules%E8%AD%A6%E5%91%8A/aHR0cDovL2kxLmZ1aW1nLmNvbS82OTE2NDMvYTkxMmI1YzhlNTk3YTYzYy5wbmc.jpeg\" alt=\"编译成功\"></p>\n"},{"title":"session和cookie的理解","date":"2020-04-11T02:31:35.000Z","cover":"/image/cover/http.png","_content":"\n\n## 曾经的我\n\ncookie是浏览器中传输自带的; balabala...\n\nsession是存在服务端的; 存一些用户信息.......balabala....\n\n## 现在的我\n\n从以下几个角度出发\n\n### 一. http协议是无状态的;\n\n当我们开发一些对状态有要求的接口时, cookie和session就可以弥补这一块的不足\n\n- 对于http协议, cookie只是请求头中的一个字段, 和别的字段并没有特别大的差别;\n- 浏览器对cookie做了默认的支持, 但是也限制了cookie; 比如同源策略;\n  - 什么是同源策略?\n    - 同源策略就是域名, 端口, 协议; 必须都相同才可以访问cookie的内容\n  - 为什么要做同源策略?\n    - 同源策略是浏览器基于安全的角度的一个机制, 限制了只有同域才可以访问cookie的内容\n\n### 二.当我们要做单点登录sso功能的时候\n\n- 什么是单点登录和sso?\n  - 单点登录（Single Sign On），简称为 SSO，是比较流行的企业业务整合的解决方案之一。\n  - 最简单的例子就是, 我们是打开淘宝网的时候, 我们打开一个商品详情页有可能是是重新打开一个页面, 那我们刚刚登录的信息可能就消失了, 要是每次打开一个页面都需要登录那样会非常的麻烦\n    - 这样时候, 就需要cookie的帮助了;我们可以考虑吧域名种在可以访问的域名下, 通常都是二级域名\n      - 什么是一级, 二级, 三级....域名?\n      - 举例: www.taobao.com\n        - 一级域名是指com(又称顶级域名; [维基百科, 点我!!](https://zh.wikipedia.org/wiki/域名)\n        - 二级域名就是taobao\n        - 所以三级域名就是www\n    - 这样我们在淘宝这个域名底下的所有页面都可以畅通无阻\n    - 但是也会面临信息泄露的危险\n      - 虽然可以用时效来限制但是效果也不是很好\n      - **Secure Cookie机制**\n        - 设置了cookie只能在https上面传输不能在http上传输\n        - 但是也不是万无一失, 因为还是可以在客户端, 进行读写的;\n      - **HTTPOnly属性**\n        - Cookie的HttpOnly属性，指浏览器不要在除HTTP（和 HTTPS)请求之外暴露Cookie。\n        - 这样可以阻止非http的攻击, 如JavaScript\n      - **Same-Site属性**\n        - Cookie 的`SameSite`属性用来限制第三方 Cookie，从而减少安全风险。\n          - 主要是为了限制CSRF攻击\n            - 什么是CSRF攻击?\n              - 跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。\n            - 还可以用于跟踪用户信息, 比如在你的网站内部放入一个你看不见的\n            - `<img src=\"facebook.com\" style=\"visibility:hidden;\">`\n            - 这样就可以知道你访问了那些网站做一些相应的推荐\n            - 那么有些同学就会联想到; 比如我在拼多多看了iPhone11; 再去看朋友圈很可能有就相应的推荐, 这些我个人猜测可能是pdd直接把你的信息卖给了腾讯, 或者做了交易(逃\n          - 具体的三个值Strict; Lax; None;感兴趣的同学可以自己去查这里就不展开了\n      - cookie又分为本地cookie和内存cookie\n        - 本地cookie与内存cookie，区别在于cookie设置的expires字段。如果没有设置过期时间，就是内存cookie。随着浏览器的关闭而从内存中消失。\n        - 还是一样都会泄露用户信息的风险\n        - 哪怕是内存cookie攻击者可以设置时效使其成为本地cookie\n\n### 三.session\n\nsession是服务器为web用户独立开辟的一个空间, 里面可以有用户一些信息等等\n\n- 如果是一个服务器可能还好, 但是如果是多个服务器或者说多层转发的话就会引发一个问题, session命中问题; 所以我们需要把信息存在MySQL或者Redis里面\n\n### 四.token\n\n除了session和cookie来辅助http这个无状态请求, 还有什么办法? \n\n- token\n  - token分为很多种, 常见的有JWT, sessionId, mac地址等等\n  - token可以存储在很多地方, 比如本地的localStorage或者sessionStorage, 然后在请求头中携带\n\n### 五.sessionStorage\n\n刚刚说到sessionStorage; 下面来说说我碰到的一个问题\n\n- sessionStorage如果打开一个新标签页, 他的sessionStorage是否共享?\n- 大家先想想再看答案\n\n以前的我以为是可以共享的.其实是半错半对的\n\n为什么这么说?\n\nMDN是这么说的\n\n> ...data stored in sessionStorage gets cleared when the page session ends...**Opening a page in a new tab or window will cause a new session to be initiated**, which differs from how session cookies work.\n\n大家可以做一个实验\n\n>1. 在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 http://localhost/index.html\n>2. 点击页面上的链接，此时会弹出来标签页 B。\n>3. 在标签页 B 中打开控制台并执行 `sessionStorage.getItem('j')`，得到 `'s'`\n>4. 新建一个新标签页 D，然后在地址栏内输入 http://localhost/index.html 打开同样的页面， 然后执行 `sessionStorage.getItem('j')` 。\n\n按照我的预期，标签页 D 得到的应该还是 `'s'`，毕竟我认为 sessionStorage 的数据是在同一网站的多个标签页之间共享的。但是**我错了**，得到的结果是 `null`。\n\n细心的同学可能已经发现了\n\n细心的同学可能已经发现了，标签页 B 和标签页 D 之间唯一的不同就是它们被打开的方式：**标签页 B 是通过在标签页 A 中点击链接打开的，但标签页 D 是在浏览器地址栏输入地址打开的。**\n\n所以现在我明白了：通过点击链接（或者用了 `window.open`）打开的新标签页之间是属于同一个 session 的，但新开一个标签页总是会初始化一个新的 session，即使网站是一样的，它们也不属于同一个 session。\n\n","source":"_posts/session和cookie的理解.md","raw":"---\ntitle: session和cookie的理解\ndate: 2020-04-11 10:31:35\ntags: [HTTP]\ncategories: [HTTP]\ncover: /image/cover/http.png\n\n---\n\n\n## 曾经的我\n\ncookie是浏览器中传输自带的; balabala...\n\nsession是存在服务端的; 存一些用户信息.......balabala....\n\n## 现在的我\n\n从以下几个角度出发\n\n### 一. http协议是无状态的;\n\n当我们开发一些对状态有要求的接口时, cookie和session就可以弥补这一块的不足\n\n- 对于http协议, cookie只是请求头中的一个字段, 和别的字段并没有特别大的差别;\n- 浏览器对cookie做了默认的支持, 但是也限制了cookie; 比如同源策略;\n  - 什么是同源策略?\n    - 同源策略就是域名, 端口, 协议; 必须都相同才可以访问cookie的内容\n  - 为什么要做同源策略?\n    - 同源策略是浏览器基于安全的角度的一个机制, 限制了只有同域才可以访问cookie的内容\n\n### 二.当我们要做单点登录sso功能的时候\n\n- 什么是单点登录和sso?\n  - 单点登录（Single Sign On），简称为 SSO，是比较流行的企业业务整合的解决方案之一。\n  - 最简单的例子就是, 我们是打开淘宝网的时候, 我们打开一个商品详情页有可能是是重新打开一个页面, 那我们刚刚登录的信息可能就消失了, 要是每次打开一个页面都需要登录那样会非常的麻烦\n    - 这样时候, 就需要cookie的帮助了;我们可以考虑吧域名种在可以访问的域名下, 通常都是二级域名\n      - 什么是一级, 二级, 三级....域名?\n      - 举例: www.taobao.com\n        - 一级域名是指com(又称顶级域名; [维基百科, 点我!!](https://zh.wikipedia.org/wiki/域名)\n        - 二级域名就是taobao\n        - 所以三级域名就是www\n    - 这样我们在淘宝这个域名底下的所有页面都可以畅通无阻\n    - 但是也会面临信息泄露的危险\n      - 虽然可以用时效来限制但是效果也不是很好\n      - **Secure Cookie机制**\n        - 设置了cookie只能在https上面传输不能在http上传输\n        - 但是也不是万无一失, 因为还是可以在客户端, 进行读写的;\n      - **HTTPOnly属性**\n        - Cookie的HttpOnly属性，指浏览器不要在除HTTP（和 HTTPS)请求之外暴露Cookie。\n        - 这样可以阻止非http的攻击, 如JavaScript\n      - **Same-Site属性**\n        - Cookie 的`SameSite`属性用来限制第三方 Cookie，从而减少安全风险。\n          - 主要是为了限制CSRF攻击\n            - 什么是CSRF攻击?\n              - 跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。\n            - 还可以用于跟踪用户信息, 比如在你的网站内部放入一个你看不见的\n            - `<img src=\"facebook.com\" style=\"visibility:hidden;\">`\n            - 这样就可以知道你访问了那些网站做一些相应的推荐\n            - 那么有些同学就会联想到; 比如我在拼多多看了iPhone11; 再去看朋友圈很可能有就相应的推荐, 这些我个人猜测可能是pdd直接把你的信息卖给了腾讯, 或者做了交易(逃\n          - 具体的三个值Strict; Lax; None;感兴趣的同学可以自己去查这里就不展开了\n      - cookie又分为本地cookie和内存cookie\n        - 本地cookie与内存cookie，区别在于cookie设置的expires字段。如果没有设置过期时间，就是内存cookie。随着浏览器的关闭而从内存中消失。\n        - 还是一样都会泄露用户信息的风险\n        - 哪怕是内存cookie攻击者可以设置时效使其成为本地cookie\n\n### 三.session\n\nsession是服务器为web用户独立开辟的一个空间, 里面可以有用户一些信息等等\n\n- 如果是一个服务器可能还好, 但是如果是多个服务器或者说多层转发的话就会引发一个问题, session命中问题; 所以我们需要把信息存在MySQL或者Redis里面\n\n### 四.token\n\n除了session和cookie来辅助http这个无状态请求, 还有什么办法? \n\n- token\n  - token分为很多种, 常见的有JWT, sessionId, mac地址等等\n  - token可以存储在很多地方, 比如本地的localStorage或者sessionStorage, 然后在请求头中携带\n\n### 五.sessionStorage\n\n刚刚说到sessionStorage; 下面来说说我碰到的一个问题\n\n- sessionStorage如果打开一个新标签页, 他的sessionStorage是否共享?\n- 大家先想想再看答案\n\n以前的我以为是可以共享的.其实是半错半对的\n\n为什么这么说?\n\nMDN是这么说的\n\n> ...data stored in sessionStorage gets cleared when the page session ends...**Opening a page in a new tab or window will cause a new session to be initiated**, which differs from how session cookies work.\n\n大家可以做一个实验\n\n>1. 在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 http://localhost/index.html\n>2. 点击页面上的链接，此时会弹出来标签页 B。\n>3. 在标签页 B 中打开控制台并执行 `sessionStorage.getItem('j')`，得到 `'s'`\n>4. 新建一个新标签页 D，然后在地址栏内输入 http://localhost/index.html 打开同样的页面， 然后执行 `sessionStorage.getItem('j')` 。\n\n按照我的预期，标签页 D 得到的应该还是 `'s'`，毕竟我认为 sessionStorage 的数据是在同一网站的多个标签页之间共享的。但是**我错了**，得到的结果是 `null`。\n\n细心的同学可能已经发现了\n\n细心的同学可能已经发现了，标签页 B 和标签页 D 之间唯一的不同就是它们被打开的方式：**标签页 B 是通过在标签页 A 中点击链接打开的，但标签页 D 是在浏览器地址栏输入地址打开的。**\n\n所以现在我明白了：通过点击链接（或者用了 `window.open`）打开的新标签页之间是属于同一个 session 的，但新开一个标签页总是会初始化一个新的 session，即使网站是一样的，它们也不属于同一个 session。\n\n","slug":"session和cookie的理解","published":1,"updated":"2020-04-11T14:32:22.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq636m000ns9vm5bct2p36","content":"<h2 id=\"曾经的我\"><a href=\"#曾经的我\" class=\"headerlink\" title=\"曾经的我\"></a>曾经的我</h2><p>cookie是浏览器中传输自带的; balabala…</p>\n<p>session是存在服务端的; 存一些用户信息…….balabala….</p>\n<h2 id=\"现在的我\"><a href=\"#现在的我\" class=\"headerlink\" title=\"现在的我\"></a>现在的我</h2><p>从以下几个角度出发</p>\n<h3 id=\"一-http协议是无状态的\"><a href=\"#一-http协议是无状态的\" class=\"headerlink\" title=\"一. http协议是无状态的;\"></a>一. http协议是无状态的;</h3><p>当我们开发一些对状态有要求的接口时, cookie和session就可以弥补这一块的不足</p>\n<ul>\n<li>对于http协议, cookie只是请求头中的一个字段, 和别的字段并没有特别大的差别;</li>\n<li>浏览器对cookie做了默认的支持, 但是也限制了cookie; 比如同源策略;<ul>\n<li>什么是同源策略?<ul>\n<li>同源策略就是域名, 端口, 协议; 必须都相同才可以访问cookie的内容</li>\n</ul>\n</li>\n<li>为什么要做同源策略?<ul>\n<li>同源策略是浏览器基于安全的角度的一个机制, 限制了只有同域才可以访问cookie的内容</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二-当我们要做单点登录sso功能的时候\"><a href=\"#二-当我们要做单点登录sso功能的时候\" class=\"headerlink\" title=\"二.当我们要做单点登录sso功能的时候\"></a>二.当我们要做单点登录sso功能的时候</h3><ul>\n<li>什么是单点登录和sso?<ul>\n<li>单点登录（Single Sign On），简称为 SSO，是比较流行的企业业务整合的解决方案之一。</li>\n<li>最简单的例子就是, 我们是打开淘宝网的时候, 我们打开一个商品详情页有可能是是重新打开一个页面, 那我们刚刚登录的信息可能就消失了, 要是每次打开一个页面都需要登录那样会非常的麻烦<ul>\n<li>这样时候, 就需要cookie的帮助了;我们可以考虑吧域名种在可以访问的域名下, 通常都是二级域名<ul>\n<li>什么是一级, 二级, 三级….域名?</li>\n<li>举例: <a href=\"http://www.taobao.com\" target=\"_blank\" rel=\"noopener\">www.taobao.com</a><ul>\n<li>一级域名是指com(又称顶级域名; <a href=\"https://zh.wikipedia.org/wiki/域名\" target=\"_blank\" rel=\"noopener\">维基百科, 点我!!</a></li>\n<li>二级域名就是taobao</li>\n<li>所以三级域名就是www</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>这样我们在淘宝这个域名底下的所有页面都可以畅通无阻</li>\n<li>但是也会面临信息泄露的危险<ul>\n<li>虽然可以用时效来限制但是效果也不是很好</li>\n<li><strong>Secure Cookie机制</strong><ul>\n<li>设置了cookie只能在https上面传输不能在http上传输</li>\n<li>但是也不是万无一失, 因为还是可以在客户端, 进行读写的;</li>\n</ul>\n</li>\n<li><strong>HTTPOnly属性</strong><ul>\n<li>Cookie的HttpOnly属性，指浏览器不要在除HTTP（和 HTTPS)请求之外暴露Cookie。</li>\n<li>这样可以阻止非http的攻击, 如JavaScript</li>\n</ul>\n</li>\n<li><strong>Same-Site属性</strong><ul>\n<li>Cookie 的<code>SameSite</code>属性用来限制第三方 Cookie，从而减少安全风险。<ul>\n<li>主要是为了限制CSRF攻击<ul>\n<li>什么是CSRF攻击?<ul>\n<li>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。</li>\n</ul>\n</li>\n<li>还可以用于跟踪用户信息, 比如在你的网站内部放入一个你看不见的</li>\n<li><code>&lt;img src=&quot;facebook.com&quot; style=&quot;visibility:hidden;&quot;&gt;</code></li>\n<li>这样就可以知道你访问了那些网站做一些相应的推荐</li>\n<li>那么有些同学就会联想到; 比如我在拼多多看了iPhone11; 再去看朋友圈很可能有就相应的推荐, 这些我个人猜测可能是pdd直接把你的信息卖给了腾讯, 或者做了交易(逃</li>\n</ul>\n</li>\n<li>具体的三个值Strict; Lax; None;感兴趣的同学可以自己去查这里就不展开了</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>cookie又分为本地cookie和内存cookie<ul>\n<li>本地cookie与内存cookie，区别在于cookie设置的expires字段。如果没有设置过期时间，就是内存cookie。随着浏览器的关闭而从内存中消失。</li>\n<li>还是一样都会泄露用户信息的风险</li>\n<li>哪怕是内存cookie攻击者可以设置时效使其成为本地cookie</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三-session\"><a href=\"#三-session\" class=\"headerlink\" title=\"三.session\"></a>三.session</h3><p>session是服务器为web用户独立开辟的一个空间, 里面可以有用户一些信息等等</p>\n<ul>\n<li>如果是一个服务器可能还好, 但是如果是多个服务器或者说多层转发的话就会引发一个问题, session命中问题; 所以我们需要把信息存在MySQL或者Redis里面</li>\n</ul>\n<h3 id=\"四-token\"><a href=\"#四-token\" class=\"headerlink\" title=\"四.token\"></a>四.token</h3><p>除了session和cookie来辅助http这个无状态请求, 还有什么办法? </p>\n<ul>\n<li>token<ul>\n<li>token分为很多种, 常见的有JWT, sessionId, mac地址等等</li>\n<li>token可以存储在很多地方, 比如本地的localStorage或者sessionStorage, 然后在请求头中携带</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"五-sessionStorage\"><a href=\"#五-sessionStorage\" class=\"headerlink\" title=\"五.sessionStorage\"></a>五.sessionStorage</h3><p>刚刚说到sessionStorage; 下面来说说我碰到的一个问题</p>\n<ul>\n<li>sessionStorage如果打开一个新标签页, 他的sessionStorage是否共享?</li>\n<li>大家先想想再看答案</li>\n</ul>\n<p>以前的我以为是可以共享的.其实是半错半对的</p>\n<p>为什么这么说?</p>\n<p>MDN是这么说的</p>\n<blockquote>\n<p>…data stored in sessionStorage gets cleared when the page session ends…<strong>Opening a page in a new tab or window will cause a new session to be initiated</strong>, which differs from how session cookies work.</p>\n</blockquote>\n<p>大家可以做一个实验</p>\n<blockquote>\n<ol>\n<li>在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 <a href=\"http://localhost/index.html\" target=\"_blank\" rel=\"noopener\">http://localhost/index.html</a></li>\n<li>点击页面上的链接，此时会弹出来标签页 B。</li>\n<li>在标签页 B 中打开控制台并执行 <code>sessionStorage.getItem(&#39;j&#39;)</code>，得到 <code>&#39;s&#39;</code></li>\n<li>新建一个新标签页 D，然后在地址栏内输入 <a href=\"http://localhost/index.html\" target=\"_blank\" rel=\"noopener\">http://localhost/index.html</a> 打开同样的页面， 然后执行 <code>sessionStorage.getItem(&#39;j&#39;)</code> 。</li>\n</ol>\n</blockquote>\n<p>按照我的预期，标签页 D 得到的应该还是 <code>&#39;s&#39;</code>，毕竟我认为 sessionStorage 的数据是在同一网站的多个标签页之间共享的。但是<strong>我错了</strong>，得到的结果是 <code>null</code>。</p>\n<p>细心的同学可能已经发现了</p>\n<p>细心的同学可能已经发现了，标签页 B 和标签页 D 之间唯一的不同就是它们被打开的方式：<strong>标签页 B 是通过在标签页 A 中点击链接打开的，但标签页 D 是在浏览器地址栏输入地址打开的。</strong></p>\n<p>所以现在我明白了：通过点击链接（或者用了 <code>window.open</code>）打开的新标签页之间是属于同一个 session 的，但新开一个标签页总是会初始化一个新的 session，即使网站是一样的，它们也不属于同一个 session。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"曾经的我\"><a href=\"#曾经的我\" class=\"headerlink\" title=\"曾经的我\"></a>曾经的我</h2><p>cookie是浏览器中传输自带的; balabala…</p>\n<p>session是存在服务端的; 存一些用户信息…….balabala….</p>\n<h2 id=\"现在的我\"><a href=\"#现在的我\" class=\"headerlink\" title=\"现在的我\"></a>现在的我</h2><p>从以下几个角度出发</p>\n<h3 id=\"一-http协议是无状态的\"><a href=\"#一-http协议是无状态的\" class=\"headerlink\" title=\"一. http协议是无状态的;\"></a>一. http协议是无状态的;</h3><p>当我们开发一些对状态有要求的接口时, cookie和session就可以弥补这一块的不足</p>\n<ul>\n<li>对于http协议, cookie只是请求头中的一个字段, 和别的字段并没有特别大的差别;</li>\n<li>浏览器对cookie做了默认的支持, 但是也限制了cookie; 比如同源策略;<ul>\n<li>什么是同源策略?<ul>\n<li>同源策略就是域名, 端口, 协议; 必须都相同才可以访问cookie的内容</li>\n</ul>\n</li>\n<li>为什么要做同源策略?<ul>\n<li>同源策略是浏览器基于安全的角度的一个机制, 限制了只有同域才可以访问cookie的内容</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二-当我们要做单点登录sso功能的时候\"><a href=\"#二-当我们要做单点登录sso功能的时候\" class=\"headerlink\" title=\"二.当我们要做单点登录sso功能的时候\"></a>二.当我们要做单点登录sso功能的时候</h3><ul>\n<li>什么是单点登录和sso?<ul>\n<li>单点登录（Single Sign On），简称为 SSO，是比较流行的企业业务整合的解决方案之一。</li>\n<li>最简单的例子就是, 我们是打开淘宝网的时候, 我们打开一个商品详情页有可能是是重新打开一个页面, 那我们刚刚登录的信息可能就消失了, 要是每次打开一个页面都需要登录那样会非常的麻烦<ul>\n<li>这样时候, 就需要cookie的帮助了;我们可以考虑吧域名种在可以访问的域名下, 通常都是二级域名<ul>\n<li>什么是一级, 二级, 三级….域名?</li>\n<li>举例: <a href=\"http://www.taobao.com\" target=\"_blank\" rel=\"noopener\">www.taobao.com</a><ul>\n<li>一级域名是指com(又称顶级域名; <a href=\"https://zh.wikipedia.org/wiki/域名\" target=\"_blank\" rel=\"noopener\">维基百科, 点我!!</a></li>\n<li>二级域名就是taobao</li>\n<li>所以三级域名就是www</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>这样我们在淘宝这个域名底下的所有页面都可以畅通无阻</li>\n<li>但是也会面临信息泄露的危险<ul>\n<li>虽然可以用时效来限制但是效果也不是很好</li>\n<li><strong>Secure Cookie机制</strong><ul>\n<li>设置了cookie只能在https上面传输不能在http上传输</li>\n<li>但是也不是万无一失, 因为还是可以在客户端, 进行读写的;</li>\n</ul>\n</li>\n<li><strong>HTTPOnly属性</strong><ul>\n<li>Cookie的HttpOnly属性，指浏览器不要在除HTTP（和 HTTPS)请求之外暴露Cookie。</li>\n<li>这样可以阻止非http的攻击, 如JavaScript</li>\n</ul>\n</li>\n<li><strong>Same-Site属性</strong><ul>\n<li>Cookie 的<code>SameSite</code>属性用来限制第三方 Cookie，从而减少安全风险。<ul>\n<li>主要是为了限制CSRF攻击<ul>\n<li>什么是CSRF攻击?<ul>\n<li>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。</li>\n</ul>\n</li>\n<li>还可以用于跟踪用户信息, 比如在你的网站内部放入一个你看不见的</li>\n<li><code>&lt;img src=&quot;facebook.com&quot; style=&quot;visibility:hidden;&quot;&gt;</code></li>\n<li>这样就可以知道你访问了那些网站做一些相应的推荐</li>\n<li>那么有些同学就会联想到; 比如我在拼多多看了iPhone11; 再去看朋友圈很可能有就相应的推荐, 这些我个人猜测可能是pdd直接把你的信息卖给了腾讯, 或者做了交易(逃</li>\n</ul>\n</li>\n<li>具体的三个值Strict; Lax; None;感兴趣的同学可以自己去查这里就不展开了</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>cookie又分为本地cookie和内存cookie<ul>\n<li>本地cookie与内存cookie，区别在于cookie设置的expires字段。如果没有设置过期时间，就是内存cookie。随着浏览器的关闭而从内存中消失。</li>\n<li>还是一样都会泄露用户信息的风险</li>\n<li>哪怕是内存cookie攻击者可以设置时效使其成为本地cookie</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三-session\"><a href=\"#三-session\" class=\"headerlink\" title=\"三.session\"></a>三.session</h3><p>session是服务器为web用户独立开辟的一个空间, 里面可以有用户一些信息等等</p>\n<ul>\n<li>如果是一个服务器可能还好, 但是如果是多个服务器或者说多层转发的话就会引发一个问题, session命中问题; 所以我们需要把信息存在MySQL或者Redis里面</li>\n</ul>\n<h3 id=\"四-token\"><a href=\"#四-token\" class=\"headerlink\" title=\"四.token\"></a>四.token</h3><p>除了session和cookie来辅助http这个无状态请求, 还有什么办法? </p>\n<ul>\n<li>token<ul>\n<li>token分为很多种, 常见的有JWT, sessionId, mac地址等等</li>\n<li>token可以存储在很多地方, 比如本地的localStorage或者sessionStorage, 然后在请求头中携带</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"五-sessionStorage\"><a href=\"#五-sessionStorage\" class=\"headerlink\" title=\"五.sessionStorage\"></a>五.sessionStorage</h3><p>刚刚说到sessionStorage; 下面来说说我碰到的一个问题</p>\n<ul>\n<li>sessionStorage如果打开一个新标签页, 他的sessionStorage是否共享?</li>\n<li>大家先想想再看答案</li>\n</ul>\n<p>以前的我以为是可以共享的.其实是半错半对的</p>\n<p>为什么这么说?</p>\n<p>MDN是这么说的</p>\n<blockquote>\n<p>…data stored in sessionStorage gets cleared when the page session ends…<strong>Opening a page in a new tab or window will cause a new session to be initiated</strong>, which differs from how session cookies work.</p>\n</blockquote>\n<p>大家可以做一个实验</p>\n<blockquote>\n<ol>\n<li>在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 <a href=\"http://localhost/index.html\" target=\"_blank\" rel=\"noopener\">http://localhost/index.html</a></li>\n<li>点击页面上的链接，此时会弹出来标签页 B。</li>\n<li>在标签页 B 中打开控制台并执行 <code>sessionStorage.getItem(&#39;j&#39;)</code>，得到 <code>&#39;s&#39;</code></li>\n<li>新建一个新标签页 D，然后在地址栏内输入 <a href=\"http://localhost/index.html\" target=\"_blank\" rel=\"noopener\">http://localhost/index.html</a> 打开同样的页面， 然后执行 <code>sessionStorage.getItem(&#39;j&#39;)</code> 。</li>\n</ol>\n</blockquote>\n<p>按照我的预期，标签页 D 得到的应该还是 <code>&#39;s&#39;</code>，毕竟我认为 sessionStorage 的数据是在同一网站的多个标签页之间共享的。但是<strong>我错了</strong>，得到的结果是 <code>null</code>。</p>\n<p>细心的同学可能已经发现了</p>\n<p>细心的同学可能已经发现了，标签页 B 和标签页 D 之间唯一的不同就是它们被打开的方式：<strong>标签页 B 是通过在标签页 A 中点击链接打开的，但标签页 D 是在浏览器地址栏输入地址打开的。</strong></p>\n<p>所以现在我明白了：通过点击链接（或者用了 <code>window.open</code>）打开的新标签页之间是属于同一个 session 的，但新开一个标签页总是会初始化一个新的 session，即使网站是一样的，它们也不属于同一个 session。</p>\n"},{"title":"sprng boot 跨域 过滤器 fetch react Response to preflight request doesn't pass access control check","date":"2019-06-19T03:20:11.000Z","cover":"/image/cover/springboot.png","_content":"\n## 前言\n浏览器出于安全考虑，限制了JS发起跨站请求，使用XHR对象发起请求必须遵循同源策略（SOP：Same Origin Policy），跨站请求会被浏览器阻止，这对开发者来说是很痛苦的一件事，尤其是要开发前后端分离的应用时。\n\n在现代化的Web开发中，不同网络环境下的资源数据共享越来越普遍，同源策略可以说是在一定程度上限制了Web API的发展。\n\n简单的说，CORS就是为了请求能够安全跨域而生的。至于CORS的安全性研究，本文不做探讨。\n\n\n## CORS浅述\n名词解释：跨域资源共享（Cross-Origin Resource Sharing）\n\n概念：是一种跨域机制、规范、标准，怎么叫都一样，但是这套标准是针对服务端的，而浏览器端只要支持HTML5即可。\n\n作用：可以让服务端决定哪些请求源可以进来拿数据，所以服务端起主导作用（所以出了事找后台程序猿，无关前端^ ^）\n\n常用场景：\n\n - 前后端完全分离的应用\n\n## 服务端未允许跨域\n\n![服务端未允许跨域](/image/SpringBoot跨域/20190311105909443.png?raw=true)\n\n## 如何解决\n\n```\npackage pers.yiji.YiJiClientServer.util;\n\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n\n@Configuration\npublic class CorsConfig {\n\n    /**\n     * cors support\n     * @return\n     */\n    @Bean\n    public FilterRegistrationBean corsFilter() {\n        // 注册CORS过滤器\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = new CorsConfiguration();\n        config.setAllowCredentials(true); // 是否支持安全证书\n        config.addAllowedOrigin(\"*\"); // 允许任何域名使用\n        config.addAllowedHeader(\"*\"); // 允许任何头\n        config.addAllowedMethod(\"*\"); // 允许任何方法（post、get等）\n        // 预检请求的有效期，单位为秒。\n        //        config.setMaxAge(3600L);\n\n        source.registerCorsConfiguration(\"/**\", config);\n        FilterRegistrationBean bean = new FilterRegistrationBean(new CorsFilter(source));\n        bean.setOrder(0);\n        return bean;\n    }\n}\n```\n\n具体每句话的意思基本上注释都有写。\n\n主要就是为了注册一个过滤器，这里是基本上允许所有的请求，在特殊的场景可以使用域名控制等。\n\n```\nconfig.addAllowedOrigin(\"*\"); // 允许任何域名使用（*可以换成特定的域名）\n```\n\n\n## 结果\n![在这里插入图片描述](/image/SpringBoot跨域/20190311110721789.png?raw=true)\n\n![在这里插入图片描述](/image/SpringBoot跨域/20190311110735834.png?raw=true)\n","source":"_posts/sprng-boot-跨域-过滤器-fetch-react-Response-to-preflight-request-doesn-t-pass-access-control-check.md","raw":"---\ntitle: >-\n  sprng boot 跨域 过滤器 fetch react Response to preflight request doesn't pass\n  access control check\ndate: 2019-06-19 11:20:11\ntags: [Spring-Boot, 跨域, Java]\ncategory: [Java, Spring-Boot]\ncover: /image/cover/springboot.png\n---\n\n## 前言\n浏览器出于安全考虑，限制了JS发起跨站请求，使用XHR对象发起请求必须遵循同源策略（SOP：Same Origin Policy），跨站请求会被浏览器阻止，这对开发者来说是很痛苦的一件事，尤其是要开发前后端分离的应用时。\n\n在现代化的Web开发中，不同网络环境下的资源数据共享越来越普遍，同源策略可以说是在一定程度上限制了Web API的发展。\n\n简单的说，CORS就是为了请求能够安全跨域而生的。至于CORS的安全性研究，本文不做探讨。\n\n\n## CORS浅述\n名词解释：跨域资源共享（Cross-Origin Resource Sharing）\n\n概念：是一种跨域机制、规范、标准，怎么叫都一样，但是这套标准是针对服务端的，而浏览器端只要支持HTML5即可。\n\n作用：可以让服务端决定哪些请求源可以进来拿数据，所以服务端起主导作用（所以出了事找后台程序猿，无关前端^ ^）\n\n常用场景：\n\n - 前后端完全分离的应用\n\n## 服务端未允许跨域\n\n![服务端未允许跨域](/image/SpringBoot跨域/20190311105909443.png?raw=true)\n\n## 如何解决\n\n```\npackage pers.yiji.YiJiClientServer.util;\n\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n\n@Configuration\npublic class CorsConfig {\n\n    /**\n     * cors support\n     * @return\n     */\n    @Bean\n    public FilterRegistrationBean corsFilter() {\n        // 注册CORS过滤器\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = new CorsConfiguration();\n        config.setAllowCredentials(true); // 是否支持安全证书\n        config.addAllowedOrigin(\"*\"); // 允许任何域名使用\n        config.addAllowedHeader(\"*\"); // 允许任何头\n        config.addAllowedMethod(\"*\"); // 允许任何方法（post、get等）\n        // 预检请求的有效期，单位为秒。\n        //        config.setMaxAge(3600L);\n\n        source.registerCorsConfiguration(\"/**\", config);\n        FilterRegistrationBean bean = new FilterRegistrationBean(new CorsFilter(source));\n        bean.setOrder(0);\n        return bean;\n    }\n}\n```\n\n具体每句话的意思基本上注释都有写。\n\n主要就是为了注册一个过滤器，这里是基本上允许所有的请求，在特殊的场景可以使用域名控制等。\n\n```\nconfig.addAllowedOrigin(\"*\"); // 允许任何域名使用（*可以换成特定的域名）\n```\n\n\n## 结果\n![在这里插入图片描述](/image/SpringBoot跨域/20190311110721789.png?raw=true)\n\n![在这里插入图片描述](/image/SpringBoot跨域/20190311110735834.png?raw=true)\n","slug":"sprng-boot-跨域-过滤器-fetch-react-Response-to-preflight-request-doesn-t-pass-access-control-check","published":1,"updated":"2020-04-11T14:25:02.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq636o000rs9vm4xrogw1f","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>浏览器出于安全考虑，限制了JS发起跨站请求，使用XHR对象发起请求必须遵循同源策略（SOP：Same Origin Policy），跨站请求会被浏览器阻止，这对开发者来说是很痛苦的一件事，尤其是要开发前后端分离的应用时。</p>\n<p>在现代化的Web开发中，不同网络环境下的资源数据共享越来越普遍，同源策略可以说是在一定程度上限制了Web API的发展。</p>\n<p>简单的说，CORS就是为了请求能够安全跨域而生的。至于CORS的安全性研究，本文不做探讨。</p>\n<h2 id=\"CORS浅述\"><a href=\"#CORS浅述\" class=\"headerlink\" title=\"CORS浅述\"></a>CORS浅述</h2><p>名词解释：跨域资源共享（Cross-Origin Resource Sharing）</p>\n<p>概念：是一种跨域机制、规范、标准，怎么叫都一样，但是这套标准是针对服务端的，而浏览器端只要支持HTML5即可。</p>\n<p>作用：可以让服务端决定哪些请求源可以进来拿数据，所以服务端起主导作用（所以出了事找后台程序猿，无关前端^ ^）</p>\n<p>常用场景：</p>\n<ul>\n<li>前后端完全分离的应用</li>\n</ul>\n<h2 id=\"服务端未允许跨域\"><a href=\"#服务端未允许跨域\" class=\"headerlink\" title=\"服务端未允许跨域\"></a>服务端未允许跨域</h2><p><img src=\"/\" class=\"lazyload\" data-src=\"/image/SpringBoot%E8%B7%A8%E5%9F%9F/20190311105909443.png?raw=true\"  alt=\"服务端未允许跨域\"></p>\n<h2 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yiji.YiJiClientServer.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.web.cors.CorsConfiguration;</span><br><span class=\"line\">import org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class=\"line\">import org.springframework.web.filter.CorsFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class CorsConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * cors support</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public FilterRegistrationBean corsFilter() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 注册CORS过滤器</span><br><span class=\"line\">        UrlBasedCorsConfigurationSource source &#x3D; new UrlBasedCorsConfigurationSource();</span><br><span class=\"line\">        CorsConfiguration config &#x3D; new CorsConfiguration();</span><br><span class=\"line\">        config.setAllowCredentials(true); &#x2F;&#x2F; 是否支持安全证书</span><br><span class=\"line\">        config.addAllowedOrigin(&quot;*&quot;); &#x2F;&#x2F; 允许任何域名使用</span><br><span class=\"line\">        config.addAllowedHeader(&quot;*&quot;); &#x2F;&#x2F; 允许任何头</span><br><span class=\"line\">        config.addAllowedMethod(&quot;*&quot;); &#x2F;&#x2F; 允许任何方法（post、get等）</span><br><span class=\"line\">        &#x2F;&#x2F; 预检请求的有效期，单位为秒。</span><br><span class=\"line\">        &#x2F;&#x2F;        config.setMaxAge(3600L);</span><br><span class=\"line\"></span><br><span class=\"line\">        source.registerCorsConfiguration(&quot;&#x2F;**&quot;, config);</span><br><span class=\"line\">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean(new CorsFilter(source));</span><br><span class=\"line\">        bean.setOrder(0);</span><br><span class=\"line\">        return bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体每句话的意思基本上注释都有写。</p>\n<p>主要就是为了注册一个过滤器，这里是基本上允许所有的请求，在特殊的场景可以使用域名控制等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.addAllowedOrigin(&quot;*&quot;); &#x2F;&#x2F; 允许任何域名使用（*可以换成特定的域名）</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"/\" class=\"lazyload\" data-src=\"/image/SpringBoot%E8%B7%A8%E5%9F%9F/20190311110721789.png?raw=true\"  alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/SpringBoot%E8%B7%A8%E5%9F%9F/20190311110735834.png?raw=true\"  alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>浏览器出于安全考虑，限制了JS发起跨站请求，使用XHR对象发起请求必须遵循同源策略（SOP：Same Origin Policy），跨站请求会被浏览器阻止，这对开发者来说是很痛苦的一件事，尤其是要开发前后端分离的应用时。</p>\n<p>在现代化的Web开发中，不同网络环境下的资源数据共享越来越普遍，同源策略可以说是在一定程度上限制了Web API的发展。</p>\n<p>简单的说，CORS就是为了请求能够安全跨域而生的。至于CORS的安全性研究，本文不做探讨。</p>\n<h2 id=\"CORS浅述\"><a href=\"#CORS浅述\" class=\"headerlink\" title=\"CORS浅述\"></a>CORS浅述</h2><p>名词解释：跨域资源共享（Cross-Origin Resource Sharing）</p>\n<p>概念：是一种跨域机制、规范、标准，怎么叫都一样，但是这套标准是针对服务端的，而浏览器端只要支持HTML5即可。</p>\n<p>作用：可以让服务端决定哪些请求源可以进来拿数据，所以服务端起主导作用（所以出了事找后台程序猿，无关前端^ ^）</p>\n<p>常用场景：</p>\n<ul>\n<li>前后端完全分离的应用</li>\n</ul>\n<h2 id=\"服务端未允许跨域\"><a href=\"#服务端未允许跨域\" class=\"headerlink\" title=\"服务端未允许跨域\"></a>服务端未允许跨域</h2><p><img src=\"/image/SpringBoot%E8%B7%A8%E5%9F%9F/20190311105909443.png?raw=true\" alt=\"服务端未允许跨域\"></p>\n<h2 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package pers.yiji.YiJiClientServer.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.web.cors.CorsConfiguration;</span><br><span class=\"line\">import org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class=\"line\">import org.springframework.web.filter.CorsFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class CorsConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * cors support</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public FilterRegistrationBean corsFilter() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 注册CORS过滤器</span><br><span class=\"line\">        UrlBasedCorsConfigurationSource source &#x3D; new UrlBasedCorsConfigurationSource();</span><br><span class=\"line\">        CorsConfiguration config &#x3D; new CorsConfiguration();</span><br><span class=\"line\">        config.setAllowCredentials(true); &#x2F;&#x2F; 是否支持安全证书</span><br><span class=\"line\">        config.addAllowedOrigin(&quot;*&quot;); &#x2F;&#x2F; 允许任何域名使用</span><br><span class=\"line\">        config.addAllowedHeader(&quot;*&quot;); &#x2F;&#x2F; 允许任何头</span><br><span class=\"line\">        config.addAllowedMethod(&quot;*&quot;); &#x2F;&#x2F; 允许任何方法（post、get等）</span><br><span class=\"line\">        &#x2F;&#x2F; 预检请求的有效期，单位为秒。</span><br><span class=\"line\">        &#x2F;&#x2F;        config.setMaxAge(3600L);</span><br><span class=\"line\"></span><br><span class=\"line\">        source.registerCorsConfiguration(&quot;&#x2F;**&quot;, config);</span><br><span class=\"line\">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean(new CorsFilter(source));</span><br><span class=\"line\">        bean.setOrder(0);</span><br><span class=\"line\">        return bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体每句话的意思基本上注释都有写。</p>\n<p>主要就是为了注册一个过滤器，这里是基本上允许所有的请求，在特殊的场景可以使用域名控制等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.addAllowedOrigin(&quot;*&quot;); &#x2F;&#x2F; 允许任何域名使用（*可以换成特定的域名）</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p><img src=\"/image/SpringBoot%E8%B7%A8%E5%9F%9F/20190311110721789.png?raw=true\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/image/SpringBoot%E8%B7%A8%E5%9F%9F/20190311110735834.png?raw=true\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"window.history.back(); 缓存 返回上级页面不刷新数据","date":"2019-06-19T03:12:34.000Z","cover":"/image/cover/history.jpeg","_content":"\n## 问题\n\n - 我们经常会做完一个操作之后返回上一个页面（比如新增完一条记录）\n\n - 然后我们希望返回上一个页面的时候就自动刷新他。\n - 但是由于JS的缓存机制\n - 导致我们的数据还是从前一次里面取的（他的初衷是希望你更快，更省资源）\n - 但是和我们的需求不同\n - 如图：\n\n![在这里插入图片描述](/image/historyBack函数/20190318092239845.png)\n\n## 探索\n从网上找的一些资料：\n\n - 在`window.history.back();` 后面加`location.reload();`\n - `window.history.go(-1);window.location.reload()`\n\n均无终而返\n\n## 解决\n\n - `window.location.replace(document.referrer)`\n - `window.location.href=“上一个页面URL”`（下下策）\n","source":"_posts/window-history-back-缓存-返回上级页面不刷新数据.md","raw":"---\ntitle: window.history.back(); 缓存 返回上级页面不刷新数据\ndate: 2019-06-19 11:12:34\ntags: [HTML, JavaScript]\ncategory: [Web前端]\ncover: /image/cover/history.jpeg\n---\n\n## 问题\n\n - 我们经常会做完一个操作之后返回上一个页面（比如新增完一条记录）\n\n - 然后我们希望返回上一个页面的时候就自动刷新他。\n - 但是由于JS的缓存机制\n - 导致我们的数据还是从前一次里面取的（他的初衷是希望你更快，更省资源）\n - 但是和我们的需求不同\n - 如图：\n\n![在这里插入图片描述](/image/historyBack函数/20190318092239845.png)\n\n## 探索\n从网上找的一些资料：\n\n - 在`window.history.back();` 后面加`location.reload();`\n - `window.history.go(-1);window.location.reload()`\n\n均无终而返\n\n## 解决\n\n - `window.location.replace(document.referrer)`\n - `window.location.href=“上一个页面URL”`（下下策）\n","slug":"window-history-back-缓存-返回上级页面不刷新数据","published":1,"updated":"2020-04-11T14:30:17.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq636p000ss9vm2d313z3i","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li><p>我们经常会做完一个操作之后返回上一个页面（比如新增完一条记录）</p>\n</li>\n<li><p>然后我们希望返回上一个页面的时候就自动刷新他。</p>\n</li>\n<li><p>但是由于JS的缓存机制</p>\n</li>\n<li><p>导致我们的数据还是从前一次里面取的（他的初衷是希望你更快，更省资源）</p>\n</li>\n<li><p>但是和我们的需求不同</p>\n</li>\n<li><p>如图：</p>\n</li>\n</ul>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/historyBack%E5%87%BD%E6%95%B0/20190318092239845.png\"  alt=\"在这里插入图片描述\"></p>\n<h2 id=\"探索\"><a href=\"#探索\" class=\"headerlink\" title=\"探索\"></a>探索</h2><p>从网上找的一些资料：</p>\n<ul>\n<li>在<code>window.history.back();</code> 后面加<code>location.reload();</code></li>\n<li><code>window.history.go(-1);window.location.reload()</code></li>\n</ul>\n<p>均无终而返</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><ul>\n<li><code>window.location.replace(document.referrer)</code></li>\n<li><code>window.location.href=“上一个页面URL”</code>（下下策）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li><p>我们经常会做完一个操作之后返回上一个页面（比如新增完一条记录）</p>\n</li>\n<li><p>然后我们希望返回上一个页面的时候就自动刷新他。</p>\n</li>\n<li><p>但是由于JS的缓存机制</p>\n</li>\n<li><p>导致我们的数据还是从前一次里面取的（他的初衷是希望你更快，更省资源）</p>\n</li>\n<li><p>但是和我们的需求不同</p>\n</li>\n<li><p>如图：</p>\n</li>\n</ul>\n<p><img src=\"/image/historyBack%E5%87%BD%E6%95%B0/20190318092239845.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"探索\"><a href=\"#探索\" class=\"headerlink\" title=\"探索\"></a>探索</h2><p>从网上找的一些资料：</p>\n<ul>\n<li>在<code>window.history.back();</code> 后面加<code>location.reload();</code></li>\n<li><code>window.history.go(-1);window.location.reload()</code></li>\n</ul>\n<p>均无终而返</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><ul>\n<li><code>window.location.replace(document.referrer)</code></li>\n<li><code>window.location.href=“上一个页面URL”</code>（下下策）</li>\n</ul>\n"},{"title":"装饰器(Decorator)和React高阶组件(HOC)","date":"2019-09-15T13:59:48.000Z","cover":"/image/cover/decorator.png","_content":"## 什么是装饰器(Decorator)\n装饰器（Decorator）是一种`与类（class）相关`的语法，用来注释或修改类和类方法。\n装饰器是一种函数，写成`@ + 函数名`。它可以放在类和类方法的定义前面。\n其实只是一个语法糖. 还没有正式发布, 还需要插件`babel-plugin-transform-decorators-legacy`使用\n## 装饰器(Decorator)使用\n\n### 类的装饰器\n\n```javascript\n@testable\nclass MyTestableClass {\n  // ...\n}\n\nfunction testable(target) {\n  target.isTestable = true;\n}\n\nMyTestableClass.isTestable // true\n```\n\n上面代码中，`@testable`就是一个装饰器。它修改了`MyTestableClass`这个类的行为，为它加上了静态属性`isTestable`。`testable`函数的参数`target`是`MyTestableClass`类本身。\n\n也就是说，装饰器是一个对类进行处理的函数。装饰器函数的第一个参数，就是所要装饰的目标类。\n\n```javascript\nfunction testable(target) {\n  // ...\n}\n```\n如果想传参，可以在装饰器外面再封装一层函数。\n\n```javascript\nfunction testable(isTestable) {\n  return function(target) {\n    target.isTestable = isTestable;\n  }\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable // false\n```\n上面代码中，装饰器`testable`可以接受参数，这就等于可以修改装饰器的行为。\n\n注意，装饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，装饰器能在编译阶段运行代码。也就是说，装饰器本质就是编译时执行的函数。\n\n前面的例子是为类添加一个静态属性，如果想添加实例属性，可以通过目标类的`prototype`对象操作。\n\n```javascript\nfunction testable(target) {\n  target.prototype.isTestable = true;\n}\n\n@testable\nclass MyTestableClass {}\n\nlet obj = new MyTestableClass();\nobj.isTestable // true\n```\n\n上面代码中，装饰器函数`testable`是在目标类的`prototype`对象上添加属性，因此就可以在实例上调用。\n\n\n\n```javascript\nfunction testable(target) {\n  target.prototype.isTestable = true;\n}\n\n@testable\nclass MyTestableClass {}\n\nlet obj = new MyTestableClass();\nobj.isTestable // true\n```\n\n\n - 实际开发中，React 与 Redux 库结合使用时\n\n常常需要写成下面这样\n\n```javascript\nclass MyReactComponent extends React.Component {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyReactComponent);\n```\n\n有了装饰器，就可以改写上面的代码。\n\n```javascript\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class MyReactComponent extends React.Component {}\n```\n### 类的方法的装饰器\n\n```javascript\nfunction readonly(target, name, descriptor){\n  // descriptor对象原来的值如下\n  // {\n  //   value: specifiedFunction,\n  //   enumerable: false,\n  //   configurable: true,\n  //   writable: true\n  // };\n  descriptor.writable = false;\n  return descriptor;\n}\n\nreadonly(Person.prototype, 'name', descriptor);\n// 类似于\nObject.defineProperty(Person.prototype, 'name', descriptor);\n```\n装饰器第一个参数是类的原型对象，上例是`Person.prototype`，装饰器的本意是要“装饰”类的实例，但是这个时候实例还没生成，所以只能去装饰原型（这不同于类的装饰，那种情况时`target`参数指的是类本身）；第二个参数是所要装饰的属性名，第三个参数是该属性的描述对象。\n\n> 其余使用方法与类的装饰器相同(参数变为3个了~)\n\n### 多个装饰器\n如果同一个方法有多个装饰器，会像剥洋葱一样，先从外到内进入，然后由内向外执行。\n\n```javascript\nfunction dec(id){\n  console.log('evaluated', id);\n  return (target, property, descriptor) => console.log('executed', id);\n}\n\nclass Example {\n    @dec(1)\n    @dec(2)\n    method(){}\n}\n// evaluated 1\n// evaluated 2\n// executed 2\n// executed 1\n```\n### 装饰器不能作用于函数\n\n装饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。\n\n## React高阶组件(HOC)\n\n```react\nimport React from 'react';\n\nexport default Component => class extends React.Component {\n  render() {\n    return <div style={{cursor: 'pointer', display: 'inline-block'}}>\n      <Component/>\n    </div>\n  }\n}\n```\n这个装饰器（高阶组件）接受一个 React 组件作为参数，然后返回一个新的 React 组件。实现很简单，就是包裹了一层 div，添加了一个 style，就这么简单。以后所有被它装饰的组件都会具有这个特征。\n除了style还可以传参数\n```react\nimport React from 'react';\n\nexport default Component => class extends React.Component {\n  render() {\n    return <div test={'qwe'}>\n      <Component/>\n    </div>\n  }\n}\n```\n以后所有被它装饰的组件都可以从`props`里面获取到`test`. 他的值是`'qwe'`。\n\n## 扩展\n发挥你的想象, 你可以写无数个很方便的高阶组件, 通过装饰器的方式, 让你的代码更简洁, 更帅\n\n索引\n\n> http://es6.ruanyifeng.com/#docs/decorator","source":"_posts/装饰器(Decorator)和React高阶组件(HOC).md","raw":"---\ntitle: 装饰器(Decorator)和React高阶组件(HOC)\ndate: 2019-09-15 21:59:48\ntags: [React, ES6]\ncategory: [ES6]\ncover: /image/cover/decorator.png\n---\n## 什么是装饰器(Decorator)\n装饰器（Decorator）是一种`与类（class）相关`的语法，用来注释或修改类和类方法。\n装饰器是一种函数，写成`@ + 函数名`。它可以放在类和类方法的定义前面。\n其实只是一个语法糖. 还没有正式发布, 还需要插件`babel-plugin-transform-decorators-legacy`使用\n## 装饰器(Decorator)使用\n\n### 类的装饰器\n\n```javascript\n@testable\nclass MyTestableClass {\n  // ...\n}\n\nfunction testable(target) {\n  target.isTestable = true;\n}\n\nMyTestableClass.isTestable // true\n```\n\n上面代码中，`@testable`就是一个装饰器。它修改了`MyTestableClass`这个类的行为，为它加上了静态属性`isTestable`。`testable`函数的参数`target`是`MyTestableClass`类本身。\n\n也就是说，装饰器是一个对类进行处理的函数。装饰器函数的第一个参数，就是所要装饰的目标类。\n\n```javascript\nfunction testable(target) {\n  // ...\n}\n```\n如果想传参，可以在装饰器外面再封装一层函数。\n\n```javascript\nfunction testable(isTestable) {\n  return function(target) {\n    target.isTestable = isTestable;\n  }\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable // false\n```\n上面代码中，装饰器`testable`可以接受参数，这就等于可以修改装饰器的行为。\n\n注意，装饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，装饰器能在编译阶段运行代码。也就是说，装饰器本质就是编译时执行的函数。\n\n前面的例子是为类添加一个静态属性，如果想添加实例属性，可以通过目标类的`prototype`对象操作。\n\n```javascript\nfunction testable(target) {\n  target.prototype.isTestable = true;\n}\n\n@testable\nclass MyTestableClass {}\n\nlet obj = new MyTestableClass();\nobj.isTestable // true\n```\n\n上面代码中，装饰器函数`testable`是在目标类的`prototype`对象上添加属性，因此就可以在实例上调用。\n\n\n\n```javascript\nfunction testable(target) {\n  target.prototype.isTestable = true;\n}\n\n@testable\nclass MyTestableClass {}\n\nlet obj = new MyTestableClass();\nobj.isTestable // true\n```\n\n\n - 实际开发中，React 与 Redux 库结合使用时\n\n常常需要写成下面这样\n\n```javascript\nclass MyReactComponent extends React.Component {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyReactComponent);\n```\n\n有了装饰器，就可以改写上面的代码。\n\n```javascript\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class MyReactComponent extends React.Component {}\n```\n### 类的方法的装饰器\n\n```javascript\nfunction readonly(target, name, descriptor){\n  // descriptor对象原来的值如下\n  // {\n  //   value: specifiedFunction,\n  //   enumerable: false,\n  //   configurable: true,\n  //   writable: true\n  // };\n  descriptor.writable = false;\n  return descriptor;\n}\n\nreadonly(Person.prototype, 'name', descriptor);\n// 类似于\nObject.defineProperty(Person.prototype, 'name', descriptor);\n```\n装饰器第一个参数是类的原型对象，上例是`Person.prototype`，装饰器的本意是要“装饰”类的实例，但是这个时候实例还没生成，所以只能去装饰原型（这不同于类的装饰，那种情况时`target`参数指的是类本身）；第二个参数是所要装饰的属性名，第三个参数是该属性的描述对象。\n\n> 其余使用方法与类的装饰器相同(参数变为3个了~)\n\n### 多个装饰器\n如果同一个方法有多个装饰器，会像剥洋葱一样，先从外到内进入，然后由内向外执行。\n\n```javascript\nfunction dec(id){\n  console.log('evaluated', id);\n  return (target, property, descriptor) => console.log('executed', id);\n}\n\nclass Example {\n    @dec(1)\n    @dec(2)\n    method(){}\n}\n// evaluated 1\n// evaluated 2\n// executed 2\n// executed 1\n```\n### 装饰器不能作用于函数\n\n装饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。\n\n## React高阶组件(HOC)\n\n```react\nimport React from 'react';\n\nexport default Component => class extends React.Component {\n  render() {\n    return <div style={{cursor: 'pointer', display: 'inline-block'}}>\n      <Component/>\n    </div>\n  }\n}\n```\n这个装饰器（高阶组件）接受一个 React 组件作为参数，然后返回一个新的 React 组件。实现很简单，就是包裹了一层 div，添加了一个 style，就这么简单。以后所有被它装饰的组件都会具有这个特征。\n除了style还可以传参数\n```react\nimport React from 'react';\n\nexport default Component => class extends React.Component {\n  render() {\n    return <div test={'qwe'}>\n      <Component/>\n    </div>\n  }\n}\n```\n以后所有被它装饰的组件都可以从`props`里面获取到`test`. 他的值是`'qwe'`。\n\n## 扩展\n发挥你的想象, 你可以写无数个很方便的高阶组件, 通过装饰器的方式, 让你的代码更简洁, 更帅\n\n索引\n\n> http://es6.ruanyifeng.com/#docs/decorator","slug":"装饰器(Decorator)和React高阶组件(HOC)","published":1,"updated":"2020-04-11T13:54:51.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq636q000us9vm7gqbd32g","content":"<h2 id=\"什么是装饰器-Decorator\"><a href=\"#什么是装饰器-Decorator\" class=\"headerlink\" title=\"什么是装饰器(Decorator)\"></a>什么是装饰器(Decorator)</h2><p>装饰器（Decorator）是一种<code>与类（class）相关</code>的语法，用来注释或修改类和类方法。<br>装饰器是一种函数，写成<code>@ + 函数名</code>。它可以放在类和类方法的定义前面。<br>其实只是一个语法糖. 还没有正式发布, 还需要插件<code>babel-plugin-transform-decorators-legacy</code>使用</p>\n<h2 id=\"装饰器-Decorator-使用\"><a href=\"#装饰器-Decorator-使用\" class=\"headerlink\" title=\"装饰器(Decorator)使用\"></a>装饰器(Decorator)使用</h2><h3 id=\"类的装饰器\"><a href=\"#类的装饰器\" class=\"headerlink\" title=\"类的装饰器\"></a>类的装饰器</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@testable</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  target.isTestable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>@testable</code>就是一个装饰器。它修改了<code>MyTestableClass</code>这个类的行为，为它加上了静态属性<code>isTestable</code>。<code>testable</code>函数的参数<code>target</code>是<code>MyTestableClass</code>类本身。</p>\n<p>也就是说，装饰器是一个对类进行处理的函数。装饰器函数的第一个参数，就是所要装饰的目标类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想传参，可以在装饰器外面再封装一层函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">isTestable</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    target.isTestable = isTestable;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@testable(<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;&#125;</span><br><span class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">@testable(<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</span><br><span class=\"line\">MyClass.isTestable <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，装饰器<code>testable</code>可以接受参数，这就等于可以修改装饰器的行为。</p>\n<p>注意，装饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，装饰器能在编译阶段运行代码。也就是说，装饰器本质就是编译时执行的函数。</p>\n<p>前面的例子是为类添加一个静态属性，如果想添加实例属性，可以通过目标类的<code>prototype</code>对象操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  target.prototype.isTestable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@testable</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyTestableClass();</span><br><span class=\"line\">obj.isTestable <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，装饰器函数<code>testable</code>是在目标类的<code>prototype</code>对象上添加属性，因此就可以在实例上调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  target.prototype.isTestable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@testable</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyTestableClass();</span><br><span class=\"line\">obj.isTestable <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>实际开发中，React 与 Redux 库结合使用时</li>\n</ul>\n<p>常常需要写成下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyReactComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps, mapDispatchToProps)(MyReactComponent);</span><br></pre></td></tr></table></figure>\n\n<p>有了装饰器，就可以改写上面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@connect(mapStateToProps, mapDispatchToProps)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyReactComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类的方法的装饰器\"><a href=\"#类的方法的装饰器\" class=\"headerlink\" title=\"类的方法的装饰器\"></a>类的方法的装饰器</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readonly</span>(<span class=\"params\">target, name, descriptor</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// descriptor对象原来的值如下</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   value: specifiedFunction,</span></span><br><span class=\"line\">  <span class=\"comment\">//   enumerable: false,</span></span><br><span class=\"line\">  <span class=\"comment\">//   configurable: true,</span></span><br><span class=\"line\">  <span class=\"comment\">//   writable: true</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">  descriptor.writable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">readonly(Person.prototype, <span class=\"string\">'name'</span>, descriptor);</span><br><span class=\"line\"><span class=\"comment\">// 类似于</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Person.prototype, <span class=\"string\">'name'</span>, descriptor);</span><br></pre></td></tr></table></figure>\n<p>装饰器第一个参数是类的原型对象，上例是<code>Person.prototype</code>，装饰器的本意是要“装饰”类的实例，但是这个时候实例还没生成，所以只能去装饰原型（这不同于类的装饰，那种情况时<code>target</code>参数指的是类本身）；第二个参数是所要装饰的属性名，第三个参数是该属性的描述对象。</p>\n<blockquote>\n<p>其余使用方法与类的装饰器相同(参数变为3个了~)</p>\n</blockquote>\n<h3 id=\"多个装饰器\"><a href=\"#多个装饰器\" class=\"headerlink\" title=\"多个装饰器\"></a>多个装饰器</h3><p>如果同一个方法有多个装饰器，会像剥洋葱一样，先从外到内进入，然后由内向外执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'evaluated'</span>, id);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">target, property, descriptor</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'executed'</span>, id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> </span>&#123;</span><br><span class=\"line\">    @dec(<span class=\"number\">1</span>)</span><br><span class=\"line\">    @dec(<span class=\"number\">2</span>)</span><br><span class=\"line\">    method()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// evaluated 1</span></span><br><span class=\"line\"><span class=\"comment\">// evaluated 2</span></span><br><span class=\"line\"><span class=\"comment\">// executed 2</span></span><br><span class=\"line\"><span class=\"comment\">// executed 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"装饰器不能作用于函数\"><a href=\"#装饰器不能作用于函数\" class=\"headerlink\" title=\"装饰器不能作用于函数\"></a>装饰器不能作用于函数</h3><p>装饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。</p>\n<h2 id=\"React高阶组件-HOC\"><a href=\"#React高阶组件-HOC\" class=\"headerlink\" title=\"React高阶组件(HOC)\"></a>React高阶组件(HOC)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Component &#x3D;&gt; class extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;div style&#x3D;&#123;&#123;cursor: &#39;pointer&#39;, display: &#39;inline-block&#39;&#125;&#125;&gt;</span><br><span class=\"line\">      &lt;Component&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个装饰器（高阶组件）接受一个 React 组件作为参数，然后返回一个新的 React 组件。实现很简单，就是包裹了一层 div，添加了一个 style，就这么简单。以后所有被它装饰的组件都会具有这个特征。<br>除了style还可以传参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Component &#x3D;&gt; class extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;div test&#x3D;&#123;&#39;qwe&#39;&#125;&gt;</span><br><span class=\"line\">      &lt;Component&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以后所有被它装饰的组件都可以从<code>props</code>里面获取到<code>test</code>. 他的值是<code>&#39;qwe&#39;</code>。</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>发挥你的想象, 你可以写无数个很方便的高阶组件, 通过装饰器的方式, 让你的代码更简洁, 更帅</p>\n<p>索引</p>\n<blockquote>\n<p><a href=\"http://es6.ruanyifeng.com/#docs/decorator\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/decorator</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是装饰器-Decorator\"><a href=\"#什么是装饰器-Decorator\" class=\"headerlink\" title=\"什么是装饰器(Decorator)\"></a>什么是装饰器(Decorator)</h2><p>装饰器（Decorator）是一种<code>与类（class）相关</code>的语法，用来注释或修改类和类方法。<br>装饰器是一种函数，写成<code>@ + 函数名</code>。它可以放在类和类方法的定义前面。<br>其实只是一个语法糖. 还没有正式发布, 还需要插件<code>babel-plugin-transform-decorators-legacy</code>使用</p>\n<h2 id=\"装饰器-Decorator-使用\"><a href=\"#装饰器-Decorator-使用\" class=\"headerlink\" title=\"装饰器(Decorator)使用\"></a>装饰器(Decorator)使用</h2><h3 id=\"类的装饰器\"><a href=\"#类的装饰器\" class=\"headerlink\" title=\"类的装饰器\"></a>类的装饰器</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@testable</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  target.isTestable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>@testable</code>就是一个装饰器。它修改了<code>MyTestableClass</code>这个类的行为，为它加上了静态属性<code>isTestable</code>。<code>testable</code>函数的参数<code>target</code>是<code>MyTestableClass</code>类本身。</p>\n<p>也就是说，装饰器是一个对类进行处理的函数。装饰器函数的第一个参数，就是所要装饰的目标类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想传参，可以在装饰器外面再封装一层函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">isTestable</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    target.isTestable = isTestable;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@testable(<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;&#125;</span><br><span class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">@testable(<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</span><br><span class=\"line\">MyClass.isTestable <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，装饰器<code>testable</code>可以接受参数，这就等于可以修改装饰器的行为。</p>\n<p>注意，装饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，装饰器能在编译阶段运行代码。也就是说，装饰器本质就是编译时执行的函数。</p>\n<p>前面的例子是为类添加一个静态属性，如果想添加实例属性，可以通过目标类的<code>prototype</code>对象操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  target.prototype.isTestable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@testable</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyTestableClass();</span><br><span class=\"line\">obj.isTestable <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，装饰器函数<code>testable</code>是在目标类的<code>prototype</code>对象上添加属性，因此就可以在实例上调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  target.prototype.isTestable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@testable</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyTestableClass();</span><br><span class=\"line\">obj.isTestable <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>实际开发中，React 与 Redux 库结合使用时</li>\n</ul>\n<p>常常需要写成下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyReactComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps, mapDispatchToProps)(MyReactComponent);</span><br></pre></td></tr></table></figure>\n\n<p>有了装饰器，就可以改写上面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@connect(mapStateToProps, mapDispatchToProps)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyReactComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类的方法的装饰器\"><a href=\"#类的方法的装饰器\" class=\"headerlink\" title=\"类的方法的装饰器\"></a>类的方法的装饰器</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readonly</span>(<span class=\"params\">target, name, descriptor</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// descriptor对象原来的值如下</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   value: specifiedFunction,</span></span><br><span class=\"line\">  <span class=\"comment\">//   enumerable: false,</span></span><br><span class=\"line\">  <span class=\"comment\">//   configurable: true,</span></span><br><span class=\"line\">  <span class=\"comment\">//   writable: true</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">  descriptor.writable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">readonly(Person.prototype, <span class=\"string\">'name'</span>, descriptor);</span><br><span class=\"line\"><span class=\"comment\">// 类似于</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Person.prototype, <span class=\"string\">'name'</span>, descriptor);</span><br></pre></td></tr></table></figure>\n<p>装饰器第一个参数是类的原型对象，上例是<code>Person.prototype</code>，装饰器的本意是要“装饰”类的实例，但是这个时候实例还没生成，所以只能去装饰原型（这不同于类的装饰，那种情况时<code>target</code>参数指的是类本身）；第二个参数是所要装饰的属性名，第三个参数是该属性的描述对象。</p>\n<blockquote>\n<p>其余使用方法与类的装饰器相同(参数变为3个了~)</p>\n</blockquote>\n<h3 id=\"多个装饰器\"><a href=\"#多个装饰器\" class=\"headerlink\" title=\"多个装饰器\"></a>多个装饰器</h3><p>如果同一个方法有多个装饰器，会像剥洋葱一样，先从外到内进入，然后由内向外执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'evaluated'</span>, id);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">target, property, descriptor</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'executed'</span>, id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> </span>&#123;</span><br><span class=\"line\">    @dec(<span class=\"number\">1</span>)</span><br><span class=\"line\">    @dec(<span class=\"number\">2</span>)</span><br><span class=\"line\">    method()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// evaluated 1</span></span><br><span class=\"line\"><span class=\"comment\">// evaluated 2</span></span><br><span class=\"line\"><span class=\"comment\">// executed 2</span></span><br><span class=\"line\"><span class=\"comment\">// executed 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"装饰器不能作用于函数\"><a href=\"#装饰器不能作用于函数\" class=\"headerlink\" title=\"装饰器不能作用于函数\"></a>装饰器不能作用于函数</h3><p>装饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。</p>\n<h2 id=\"React高阶组件-HOC\"><a href=\"#React高阶组件-HOC\" class=\"headerlink\" title=\"React高阶组件(HOC)\"></a>React高阶组件(HOC)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Component &#x3D;&gt; class extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;div style&#x3D;&#123;&#123;cursor: &#39;pointer&#39;, display: &#39;inline-block&#39;&#125;&#125;&gt;</span><br><span class=\"line\">      &lt;Component&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个装饰器（高阶组件）接受一个 React 组件作为参数，然后返回一个新的 React 组件。实现很简单，就是包裹了一层 div，添加了一个 style，就这么简单。以后所有被它装饰的组件都会具有这个特征。<br>除了style还可以传参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Component &#x3D;&gt; class extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;div test&#x3D;&#123;&#39;qwe&#39;&#125;&gt;</span><br><span class=\"line\">      &lt;Component&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以后所有被它装饰的组件都可以从<code>props</code>里面获取到<code>test</code>. 他的值是<code>&#39;qwe&#39;</code>。</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>发挥你的想象, 你可以写无数个很方便的高阶组件, 通过装饰器的方式, 让你的代码更简洁, 更帅</p>\n<p>索引</p>\n<blockquote>\n<p><a href=\"http://es6.ruanyifeng.com/#docs/decorator\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/decorator</a></p>\n</blockquote>\n"},{"title":"HTTPH/TTPS协议","date":"2019-08-24T11:02:25.000Z","cover":"/image/cover/http.png","_content":"\n## 协议\n\n网络协议是计算机之间为了实现网络通信而达成的一种“约定”或者”规则“，有了这种”约定“，不同厂商的生产设备，以及不同操作系统组成的计算机之间，就可以实现通信。\n\n### HTTP协议\nHTTP协议是超文本传输协议的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。\n\n设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。\n\nHTPP有多个版本，目前广泛使用的是HTTP/1.1版本。\n\n## HTTP\nHTTP 全称是 HyperText Transfer Protocal ，即：超文本传输协议，从 1990 年开始就在 WWW 上广泛应用，是现今在 WWW 上应用最多的协议，HTTP 是应用层协议，当你上网浏览网页的时候，浏览器和 web 服务器之间就会通过 HTTP 在 Internet 上进行数据的发送和接收。HTTP 是一个基于请求/响应模式的、无状态的协议。即我们通常所说的 Request/Response\n\n### HTTP原理\n\nHTTP是一个基于TCP/IP通信协议来传递数据的协议，传输的数据类型为HTML 文件,、图片文件, 查询结果等。\n\nHTTP协议一般用于B/S架构（）。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。\n\n### HTTP协议\n\nHTTP协议是超文本传输协议的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。\n\n设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。\n\nHTPP有多个版本，目前广泛使用的是HTTP/1.1版本。\n\n### HTTP特点\n\n - 支持客户端/服务器模式\n - 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快\n - 灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记\n - 无连接：无连接的含义是限制每次链接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开链接，采用这种方式可以节省传输时间\n - 无状态：HTTP 协议是无状态协议。无状态是指协议对于事物处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快\n\n## HTTPS\nHTTPS 协议（HyperText Transfer Protocol over Secure Socket Layer）：一般理解为HTTP+SSL/TLS，通过 SSL证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。\n\n解决HTTP的一些问题\n - 请求信息明文传输，容易被窃听截取。\n - 数据的完整性未校验，容易被篡改\n - 没有验证对方身份，存在冒充危险\n\n\n## 总结HTTPS和HTTP的区别\n\n - HTTPS是HTTP协议的安全版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理。\n - http和https使用连接方式不同，默认端口也不一样，http是80，https是443。\n\n## URL详解\n\nURL（Uniform Resource Locator）是统一资源定位符的简称，有时候也被俗称为网页地址（网址），如同是网络上的门牌，是因特网上标准的资源的地址\n\n### 基本组成\n\n| 名称         | 功能                                                         |\n| ------------ | ------------------------------------------------------------ |\n| scheme       | 访问服务器以获取资源时要使用哪种协议，比如，http，https 和 FTP 等 |\n| host         | HTTP 服务器的 IP 地址或域名                                  |\n| port#        | HTTP 服务器的默认端口是 80，这种情况下端口号可以省略，如果使用了别的端口，必须指明，例如www.cnblogs.com：8080 |\n| path         | 访问资源的路径                                               |\n| query-string | 发给 http 服务器的数据                                       |\n| anchor       | 锚                                                           |\n\n![在这里插入图片描述](/image/httpHttps/15fc2525666dc96e.jpg)\n\n## HTTP请求\n### 类型\n| 名称    | 功能                                                         |\n| ------- | ------------------------------------------------------------ |\n| GET     | 向指定的资源发出“显示”请求，使用 GET 方法应该只用在读取数据上，而不应该用于产生“副作用”的操作中 |\n| POST    | 指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求文本中。这个请求可能会创建新的资源或者修改现有资源，或两者皆有。 |\n| PUT     | 向指定资源位置上传其最新内容                                 |\n| DELETE  | 请求服务器删除 Request-URI 所标识的资源                      |\n| OPTIONS | 使服务器传回该资源所支持的所有HTTP请求方法。用*来代替资源名称，向 Web 服务器发送 OPTIONS 请求，可以测试服务器功能是否正常运作 |\n| HEAD    | 与 GET 方法一样，都是向服务器发出指定资源的请求，只不过服务器将不传回资源的本文部分，它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中关于该资源的信息（原信息或称元数据） |\n| TRACE   | 显示服务器收到的请求，主要用于测试或诊断                     |\n| CONNECT | HTTP/1.1 中预留给能够将连接改为通道方式的代理服务器。通常用于 SSL 加密服务器的链接（经由非加密的 HTTP 代理服务器） |\n\n其中，最常见的是 GET 和 POST 方法，如果是 RESful 接口的话一般会用到 PUT、DELETE、GET、POST（分别对应增删查改\n\n### 请求头\n| 名称              | 功能                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| Authorization     | 用于设置身份认证信息                                         |\n| User-Agent        | 用户标识，如：OS 和浏览器的类型和版本                        |\n| If-Modified-Since | 值为上一次服务器返回的Last-Modified值，用于确定某个资源是否被更改过，没有更改过就从缓存中读取 |\n| If-None-Match     | 值为上一次服务器返回的 ETag 值，一般会和If-Modified-Since    |\n| Cookie            | 已有的Cookie                                                 |\n| Referer           | 标识请求引用自哪个地址，比如你从页面 A 跳转到页面 B 时，值为页面 A 的地址 |\n| Host              | 请求的主机和端口号                                           |\n\n### 状态码\n| 状态码 | 对应的信息                                                   |\n| ------ | ------------------------------------------------------------ |\n| 1XX    | 提示信息—表示请求已接收，继续处理                            |\n| 2XX    | 用于表示请求已被成功接收、理解、接收                         |\n| 3XX    | 用于表示资源（网页等）被永久转移到其它 URL，也就是所谓的重定向 |\n| 4XX    | 客户端错误—请求有语法错误或者请求无法实现                    |\n| 5XX    | 服务器端错误—服务器未能实现合法的请求                        |\n\n### 响应头\n| 名称              | 功能                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| Date              | 服务器的日期                                                 |\n| Last-Modified     | 该资源最后被修改的时间                                       |\n| Transfer-Encoding | 取值一般为 chunked，出现在 Content-Length 不能确定的情况下，表示服务器不知道响应板体的数据大小，一般同时出现Content-Encoding响应头 |\n| Set-Cookie        | 设置 Cookie                                                  |\n| Location          | 重定向到另一个 URL，如输入浏览器就输入 baidu.com 回车，会自动跳转到www.baidu.com 就是通过这个响应头控制的 |\n| Server            | 后台服务器                                                   |\n\n>  Reference \n>  https://zhuanlan.zhihu.com/p/72616216\n>  https://juejin.im/post/5a0ce1d95188253e24708454","source":"_posts/HTTPHTTPS协议.md","raw":"---\ntitle: HTTPH/TTPS协议\ndate: 2019-08-24 19:02:25\ntags: [HTTP]\ncategories: [HTTP]\ncover: /image/cover/http.png\n---\n\n## 协议\n\n网络协议是计算机之间为了实现网络通信而达成的一种“约定”或者”规则“，有了这种”约定“，不同厂商的生产设备，以及不同操作系统组成的计算机之间，就可以实现通信。\n\n### HTTP协议\nHTTP协议是超文本传输协议的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。\n\n设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。\n\nHTPP有多个版本，目前广泛使用的是HTTP/1.1版本。\n\n## HTTP\nHTTP 全称是 HyperText Transfer Protocal ，即：超文本传输协议，从 1990 年开始就在 WWW 上广泛应用，是现今在 WWW 上应用最多的协议，HTTP 是应用层协议，当你上网浏览网页的时候，浏览器和 web 服务器之间就会通过 HTTP 在 Internet 上进行数据的发送和接收。HTTP 是一个基于请求/响应模式的、无状态的协议。即我们通常所说的 Request/Response\n\n### HTTP原理\n\nHTTP是一个基于TCP/IP通信协议来传递数据的协议，传输的数据类型为HTML 文件,、图片文件, 查询结果等。\n\nHTTP协议一般用于B/S架构（）。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。\n\n### HTTP协议\n\nHTTP协议是超文本传输协议的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。\n\n设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。\n\nHTPP有多个版本，目前广泛使用的是HTTP/1.1版本。\n\n### HTTP特点\n\n - 支持客户端/服务器模式\n - 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快\n - 灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记\n - 无连接：无连接的含义是限制每次链接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开链接，采用这种方式可以节省传输时间\n - 无状态：HTTP 协议是无状态协议。无状态是指协议对于事物处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快\n\n## HTTPS\nHTTPS 协议（HyperText Transfer Protocol over Secure Socket Layer）：一般理解为HTTP+SSL/TLS，通过 SSL证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。\n\n解决HTTP的一些问题\n - 请求信息明文传输，容易被窃听截取。\n - 数据的完整性未校验，容易被篡改\n - 没有验证对方身份，存在冒充危险\n\n\n## 总结HTTPS和HTTP的区别\n\n - HTTPS是HTTP协议的安全版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理。\n - http和https使用连接方式不同，默认端口也不一样，http是80，https是443。\n\n## URL详解\n\nURL（Uniform Resource Locator）是统一资源定位符的简称，有时候也被俗称为网页地址（网址），如同是网络上的门牌，是因特网上标准的资源的地址\n\n### 基本组成\n\n| 名称         | 功能                                                         |\n| ------------ | ------------------------------------------------------------ |\n| scheme       | 访问服务器以获取资源时要使用哪种协议，比如，http，https 和 FTP 等 |\n| host         | HTTP 服务器的 IP 地址或域名                                  |\n| port#        | HTTP 服务器的默认端口是 80，这种情况下端口号可以省略，如果使用了别的端口，必须指明，例如www.cnblogs.com：8080 |\n| path         | 访问资源的路径                                               |\n| query-string | 发给 http 服务器的数据                                       |\n| anchor       | 锚                                                           |\n\n![在这里插入图片描述](/image/httpHttps/15fc2525666dc96e.jpg)\n\n## HTTP请求\n### 类型\n| 名称    | 功能                                                         |\n| ------- | ------------------------------------------------------------ |\n| GET     | 向指定的资源发出“显示”请求，使用 GET 方法应该只用在读取数据上，而不应该用于产生“副作用”的操作中 |\n| POST    | 指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求文本中。这个请求可能会创建新的资源或者修改现有资源，或两者皆有。 |\n| PUT     | 向指定资源位置上传其最新内容                                 |\n| DELETE  | 请求服务器删除 Request-URI 所标识的资源                      |\n| OPTIONS | 使服务器传回该资源所支持的所有HTTP请求方法。用*来代替资源名称，向 Web 服务器发送 OPTIONS 请求，可以测试服务器功能是否正常运作 |\n| HEAD    | 与 GET 方法一样，都是向服务器发出指定资源的请求，只不过服务器将不传回资源的本文部分，它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中关于该资源的信息（原信息或称元数据） |\n| TRACE   | 显示服务器收到的请求，主要用于测试或诊断                     |\n| CONNECT | HTTP/1.1 中预留给能够将连接改为通道方式的代理服务器。通常用于 SSL 加密服务器的链接（经由非加密的 HTTP 代理服务器） |\n\n其中，最常见的是 GET 和 POST 方法，如果是 RESful 接口的话一般会用到 PUT、DELETE、GET、POST（分别对应增删查改\n\n### 请求头\n| 名称              | 功能                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| Authorization     | 用于设置身份认证信息                                         |\n| User-Agent        | 用户标识，如：OS 和浏览器的类型和版本                        |\n| If-Modified-Since | 值为上一次服务器返回的Last-Modified值，用于确定某个资源是否被更改过，没有更改过就从缓存中读取 |\n| If-None-Match     | 值为上一次服务器返回的 ETag 值，一般会和If-Modified-Since    |\n| Cookie            | 已有的Cookie                                                 |\n| Referer           | 标识请求引用自哪个地址，比如你从页面 A 跳转到页面 B 时，值为页面 A 的地址 |\n| Host              | 请求的主机和端口号                                           |\n\n### 状态码\n| 状态码 | 对应的信息                                                   |\n| ------ | ------------------------------------------------------------ |\n| 1XX    | 提示信息—表示请求已接收，继续处理                            |\n| 2XX    | 用于表示请求已被成功接收、理解、接收                         |\n| 3XX    | 用于表示资源（网页等）被永久转移到其它 URL，也就是所谓的重定向 |\n| 4XX    | 客户端错误—请求有语法错误或者请求无法实现                    |\n| 5XX    | 服务器端错误—服务器未能实现合法的请求                        |\n\n### 响应头\n| 名称              | 功能                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| Date              | 服务器的日期                                                 |\n| Last-Modified     | 该资源最后被修改的时间                                       |\n| Transfer-Encoding | 取值一般为 chunked，出现在 Content-Length 不能确定的情况下，表示服务器不知道响应板体的数据大小，一般同时出现Content-Encoding响应头 |\n| Set-Cookie        | 设置 Cookie                                                  |\n| Location          | 重定向到另一个 URL，如输入浏览器就输入 baidu.com 回车，会自动跳转到www.baidu.com 就是通过这个响应头控制的 |\n| Server            | 后台服务器                                                   |\n\n>  Reference \n>  https://zhuanlan.zhihu.com/p/72616216\n>  https://juejin.im/post/5a0ce1d95188253e24708454","slug":"HTTPHTTPS协议","published":1,"updated":"2020-04-11T14:15:04.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq63850032s9vm1obn4cxg","content":"<h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><p>网络协议是计算机之间为了实现网络通信而达成的一种“约定”或者”规则“，有了这种”约定“，不同厂商的生产设备，以及不同操作系统组成的计算机之间，就可以实现通信。</p>\n<h3 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h3><p>HTTP协议是超文本传输协议的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。</p>\n<p>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</p>\n<p>HTPP有多个版本，目前广泛使用的是HTTP/1.1版本。</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>HTTP 全称是 HyperText Transfer Protocal ，即：超文本传输协议，从 1990 年开始就在 WWW 上广泛应用，是现今在 WWW 上应用最多的协议，HTTP 是应用层协议，当你上网浏览网页的时候，浏览器和 web 服务器之间就会通过 HTTP 在 Internet 上进行数据的发送和接收。HTTP 是一个基于请求/响应模式的、无状态的协议。即我们通常所说的 Request/Response</p>\n<h3 id=\"HTTP原理\"><a href=\"#HTTP原理\" class=\"headerlink\" title=\"HTTP原理\"></a>HTTP原理</h3><p>HTTP是一个基于TCP/IP通信协议来传递数据的协议，传输的数据类型为HTML 文件,、图片文件, 查询结果等。</p>\n<p>HTTP协议一般用于B/S架构（）。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。</p>\n<h3 id=\"HTTP协议-1\"><a href=\"#HTTP协议-1\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h3><p>HTTP协议是超文本传输协议的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。</p>\n<p>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</p>\n<p>HTPP有多个版本，目前广泛使用的是HTTP/1.1版本。</p>\n<h3 id=\"HTTP特点\"><a href=\"#HTTP特点\" class=\"headerlink\" title=\"HTTP特点\"></a>HTTP特点</h3><ul>\n<li>支持客户端/服务器模式</li>\n<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快</li>\n<li>灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记</li>\n<li>无连接：无连接的含义是限制每次链接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开链接，采用这种方式可以节省传输时间</li>\n<li>无状态：HTTP 协议是无状态协议。无状态是指协议对于事物处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快</li>\n</ul>\n<h2 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h2><p>HTTPS 协议（HyperText Transfer Protocol over Secure Socket Layer）：一般理解为HTTP+SSL/TLS，通过 SSL证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。</p>\n<p>解决HTTP的一些问题</p>\n<ul>\n<li>请求信息明文传输，容易被窃听截取。</li>\n<li>数据的完整性未校验，容易被篡改</li>\n<li>没有验证对方身份，存在冒充危险</li>\n</ul>\n<h2 id=\"总结HTTPS和HTTP的区别\"><a href=\"#总结HTTPS和HTTP的区别\" class=\"headerlink\" title=\"总结HTTPS和HTTP的区别\"></a>总结HTTPS和HTTP的区别</h2><ul>\n<li>HTTPS是HTTP协议的安全版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理。</li>\n<li>http和https使用连接方式不同，默认端口也不一样，http是80，https是443。</li>\n</ul>\n<h2 id=\"URL详解\"><a href=\"#URL详解\" class=\"headerlink\" title=\"URL详解\"></a>URL详解</h2><p>URL（Uniform Resource Locator）是统一资源定位符的简称，有时候也被俗称为网页地址（网址），如同是网络上的门牌，是因特网上标准的资源的地址</p>\n<h3 id=\"基本组成\"><a href=\"#基本组成\" class=\"headerlink\" title=\"基本组成\"></a>基本组成</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>scheme</td>\n<td>访问服务器以获取资源时要使用哪种协议，比如，http，https 和 FTP 等</td>\n</tr>\n<tr>\n<td>host</td>\n<td>HTTP 服务器的 IP 地址或域名</td>\n</tr>\n<tr>\n<td>port#</td>\n<td>HTTP 服务器的默认端口是 80，这种情况下端口号可以省略，如果使用了别的端口，必须指明，例如<a href=\"http://www.cnblogs.com：8080\">www.cnblogs.com：8080</a></td>\n</tr>\n<tr>\n<td>path</td>\n<td>访问资源的路径</td>\n</tr>\n<tr>\n<td>query-string</td>\n<td>发给 http 服务器的数据</td>\n</tr>\n<tr>\n<td>anchor</td>\n<td>锚</td>\n</tr>\n</tbody></table>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/httpHttps/15fc2525666dc96e.jpg\"  alt=\"在这里插入图片描述\"></p>\n<h2 id=\"HTTP请求\"><a href=\"#HTTP请求\" class=\"headerlink\" title=\"HTTP请求\"></a>HTTP请求</h2><h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td>向指定的资源发出“显示”请求，使用 GET 方法应该只用在读取数据上，而不应该用于产生“副作用”的操作中</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求文本中。这个请求可能会创建新的资源或者修改现有资源，或两者皆有。</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>向指定资源位置上传其最新内容</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>请求服务器删除 Request-URI 所标识的资源</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>使服务器传回该资源所支持的所有HTTP请求方法。用*来代替资源名称，向 Web 服务器发送 OPTIONS 请求，可以测试服务器功能是否正常运作</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>与 GET 方法一样，都是向服务器发出指定资源的请求，只不过服务器将不传回资源的本文部分，它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中关于该资源的信息（原信息或称元数据）</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>显示服务器收到的请求，主要用于测试或诊断</td>\n</tr>\n<tr>\n<td>CONNECT</td>\n<td>HTTP/1.1 中预留给能够将连接改为通道方式的代理服务器。通常用于 SSL 加密服务器的链接（经由非加密的 HTTP 代理服务器）</td>\n</tr>\n</tbody></table>\n<p>其中，最常见的是 GET 和 POST 方法，如果是 RESful 接口的话一般会用到 PUT、DELETE、GET、POST（分别对应增删查改</p>\n<h3 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Authorization</td>\n<td>用于设置身份认证信息</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>用户标识，如：OS 和浏览器的类型和版本</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>值为上一次服务器返回的Last-Modified值，用于确定某个资源是否被更改过，没有更改过就从缓存中读取</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>值为上一次服务器返回的 ETag 值，一般会和If-Modified-Since</td>\n</tr>\n<tr>\n<td>Cookie</td>\n<td>已有的Cookie</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>标识请求引用自哪个地址，比如你从页面 A 跳转到页面 B 时，值为页面 A 的地址</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>请求的主机和端口号</td>\n</tr>\n</tbody></table>\n<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>对应的信息</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1XX</td>\n<td>提示信息—表示请求已接收，继续处理</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td>用于表示请求已被成功接收、理解、接收</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td>用于表示资源（网页等）被永久转移到其它 URL，也就是所谓的重定向</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td>客户端错误—请求有语法错误或者请求无法实现</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td>服务器端错误—服务器未能实现合法的请求</td>\n</tr>\n</tbody></table>\n<h3 id=\"响应头\"><a href=\"#响应头\" class=\"headerlink\" title=\"响应头\"></a>响应头</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Date</td>\n<td>服务器的日期</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>该资源最后被修改的时间</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>取值一般为 chunked，出现在 Content-Length 不能确定的情况下，表示服务器不知道响应板体的数据大小，一般同时出现Content-Encoding响应头</td>\n</tr>\n<tr>\n<td>Set-Cookie</td>\n<td>设置 Cookie</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>重定向到另一个 URL，如输入浏览器就输入 baidu.com 回车，会自动跳转到<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a> 就是通过这个响应头控制的</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>后台服务器</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p> Reference<br> <a href=\"https://zhuanlan.zhihu.com/p/72616216\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/72616216</a><br> <a href=\"https://juejin.im/post/5a0ce1d95188253e24708454\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a0ce1d95188253e24708454</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><p>网络协议是计算机之间为了实现网络通信而达成的一种“约定”或者”规则“，有了这种”约定“，不同厂商的生产设备，以及不同操作系统组成的计算机之间，就可以实现通信。</p>\n<h3 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h3><p>HTTP协议是超文本传输协议的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。</p>\n<p>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</p>\n<p>HTPP有多个版本，目前广泛使用的是HTTP/1.1版本。</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>HTTP 全称是 HyperText Transfer Protocal ，即：超文本传输协议，从 1990 年开始就在 WWW 上广泛应用，是现今在 WWW 上应用最多的协议，HTTP 是应用层协议，当你上网浏览网页的时候，浏览器和 web 服务器之间就会通过 HTTP 在 Internet 上进行数据的发送和接收。HTTP 是一个基于请求/响应模式的、无状态的协议。即我们通常所说的 Request/Response</p>\n<h3 id=\"HTTP原理\"><a href=\"#HTTP原理\" class=\"headerlink\" title=\"HTTP原理\"></a>HTTP原理</h3><p>HTTP是一个基于TCP/IP通信协议来传递数据的协议，传输的数据类型为HTML 文件,、图片文件, 查询结果等。</p>\n<p>HTTP协议一般用于B/S架构（）。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。</p>\n<h3 id=\"HTTP协议-1\"><a href=\"#HTTP协议-1\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h3><p>HTTP协议是超文本传输协议的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。</p>\n<p>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</p>\n<p>HTPP有多个版本，目前广泛使用的是HTTP/1.1版本。</p>\n<h3 id=\"HTTP特点\"><a href=\"#HTTP特点\" class=\"headerlink\" title=\"HTTP特点\"></a>HTTP特点</h3><ul>\n<li>支持客户端/服务器模式</li>\n<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快</li>\n<li>灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记</li>\n<li>无连接：无连接的含义是限制每次链接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开链接，采用这种方式可以节省传输时间</li>\n<li>无状态：HTTP 协议是无状态协议。无状态是指协议对于事物处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快</li>\n</ul>\n<h2 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h2><p>HTTPS 协议（HyperText Transfer Protocol over Secure Socket Layer）：一般理解为HTTP+SSL/TLS，通过 SSL证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。</p>\n<p>解决HTTP的一些问题</p>\n<ul>\n<li>请求信息明文传输，容易被窃听截取。</li>\n<li>数据的完整性未校验，容易被篡改</li>\n<li>没有验证对方身份，存在冒充危险</li>\n</ul>\n<h2 id=\"总结HTTPS和HTTP的区别\"><a href=\"#总结HTTPS和HTTP的区别\" class=\"headerlink\" title=\"总结HTTPS和HTTP的区别\"></a>总结HTTPS和HTTP的区别</h2><ul>\n<li>HTTPS是HTTP协议的安全版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理。</li>\n<li>http和https使用连接方式不同，默认端口也不一样，http是80，https是443。</li>\n</ul>\n<h2 id=\"URL详解\"><a href=\"#URL详解\" class=\"headerlink\" title=\"URL详解\"></a>URL详解</h2><p>URL（Uniform Resource Locator）是统一资源定位符的简称，有时候也被俗称为网页地址（网址），如同是网络上的门牌，是因特网上标准的资源的地址</p>\n<h3 id=\"基本组成\"><a href=\"#基本组成\" class=\"headerlink\" title=\"基本组成\"></a>基本组成</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>scheme</td>\n<td>访问服务器以获取资源时要使用哪种协议，比如，http，https 和 FTP 等</td>\n</tr>\n<tr>\n<td>host</td>\n<td>HTTP 服务器的 IP 地址或域名</td>\n</tr>\n<tr>\n<td>port#</td>\n<td>HTTP 服务器的默认端口是 80，这种情况下端口号可以省略，如果使用了别的端口，必须指明，例如<a href=\"http://www.cnblogs.com：8080\">www.cnblogs.com：8080</a></td>\n</tr>\n<tr>\n<td>path</td>\n<td>访问资源的路径</td>\n</tr>\n<tr>\n<td>query-string</td>\n<td>发给 http 服务器的数据</td>\n</tr>\n<tr>\n<td>anchor</td>\n<td>锚</td>\n</tr>\n</tbody></table>\n<p><img src=\"/image/httpHttps/15fc2525666dc96e.jpg\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"HTTP请求\"><a href=\"#HTTP请求\" class=\"headerlink\" title=\"HTTP请求\"></a>HTTP请求</h2><h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td>向指定的资源发出“显示”请求，使用 GET 方法应该只用在读取数据上，而不应该用于产生“副作用”的操作中</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求文本中。这个请求可能会创建新的资源或者修改现有资源，或两者皆有。</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>向指定资源位置上传其最新内容</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>请求服务器删除 Request-URI 所标识的资源</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>使服务器传回该资源所支持的所有HTTP请求方法。用*来代替资源名称，向 Web 服务器发送 OPTIONS 请求，可以测试服务器功能是否正常运作</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>与 GET 方法一样，都是向服务器发出指定资源的请求，只不过服务器将不传回资源的本文部分，它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中关于该资源的信息（原信息或称元数据）</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>显示服务器收到的请求，主要用于测试或诊断</td>\n</tr>\n<tr>\n<td>CONNECT</td>\n<td>HTTP/1.1 中预留给能够将连接改为通道方式的代理服务器。通常用于 SSL 加密服务器的链接（经由非加密的 HTTP 代理服务器）</td>\n</tr>\n</tbody></table>\n<p>其中，最常见的是 GET 和 POST 方法，如果是 RESful 接口的话一般会用到 PUT、DELETE、GET、POST（分别对应增删查改</p>\n<h3 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Authorization</td>\n<td>用于设置身份认证信息</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>用户标识，如：OS 和浏览器的类型和版本</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>值为上一次服务器返回的Last-Modified值，用于确定某个资源是否被更改过，没有更改过就从缓存中读取</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>值为上一次服务器返回的 ETag 值，一般会和If-Modified-Since</td>\n</tr>\n<tr>\n<td>Cookie</td>\n<td>已有的Cookie</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>标识请求引用自哪个地址，比如你从页面 A 跳转到页面 B 时，值为页面 A 的地址</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>请求的主机和端口号</td>\n</tr>\n</tbody></table>\n<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>对应的信息</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1XX</td>\n<td>提示信息—表示请求已接收，继续处理</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td>用于表示请求已被成功接收、理解、接收</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td>用于表示资源（网页等）被永久转移到其它 URL，也就是所谓的重定向</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td>客户端错误—请求有语法错误或者请求无法实现</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td>服务器端错误—服务器未能实现合法的请求</td>\n</tr>\n</tbody></table>\n<h3 id=\"响应头\"><a href=\"#响应头\" class=\"headerlink\" title=\"响应头\"></a>响应头</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Date</td>\n<td>服务器的日期</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>该资源最后被修改的时间</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>取值一般为 chunked，出现在 Content-Length 不能确定的情况下，表示服务器不知道响应板体的数据大小，一般同时出现Content-Encoding响应头</td>\n</tr>\n<tr>\n<td>Set-Cookie</td>\n<td>设置 Cookie</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>重定向到另一个 URL，如输入浏览器就输入 baidu.com 回车，会自动跳转到<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a> 就是通过这个响应头控制的</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>后台服务器</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p> Reference<br> <a href=\"https://zhuanlan.zhihu.com/p/72616216\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/72616216</a><br> <a href=\"https://juejin.im/post/5a0ce1d95188253e24708454\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a0ce1d95188253e24708454</a></p>\n</blockquote>\n"},{"title":"React入门（一） State详解","date":"2019-06-19T03:22:03.000Z","cover":"/image/cover/React.jpeg","_content":"\n@[TOC](React入门（一） State详解)\n\n# React入门（一） State详解\n\n我们都是程序员，废话不多说马上开始！\n\n## 一、 Demo创建/下载\n\n两种方法创建新的React APP\n\n### 1. github下载\n\n- 下载[git地址](https://github.com/DerrickTel/ReactDemo1.git).\n - 解压-打开\n  - npm install\n  - npm start \n  - ![如果有询问](/image/React入门/20181123111537542.png)\n  - y（3000端口任务在运行是否愿意运行在别的端口上？）\n\n\n\n### 2. 自己的命令行创建\n- 找到自己**心仪的文件夹**   *（全英文）*\n - 用命令行打开并抵达**心仪文件夹**\n  - npx create-react-app my-app\n  - cd my-app\n  - npm start\n> **注意**\n> npx在第一行不是一个错字 - 它是一个包转发工具，附带npm 5.2+。\n> 创建的时候已经默认运行过（npm install ）可以直接start\n\n然后把 src/app.js的文件内容先改一下\n\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <p>\n            修改文件夹 <code>src/App.js</code> 保存时候之后自动加载.\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n```\nCtrl + C \n\nCtrl + V\n\n## 二、State是什么？\n![在这里插入图片描述](/image/React入门/20181123134126335.png)\n\n英文翻译是状态。\n\n其实也可以理解为状态，一段文字中的某个值改变了，也可以理解为状态改变了。\n看一个简单的例子\n\n\n把 src/app.js的文件内容先改一下\n\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state={Text:'我是state'}\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            State输出：{this.state.Text}\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n```javascript\n  state={Text:'我是state'}\n```\n\n这里的state是给state设置初值，不然会报错。不相信的话自己可以试一下。*（因为state是undefined，所以他里面取不到Text）*\n\n通过上面的例子可以知道state里面放的是XX的状态\n\nkey value对应的\n\nthis.state.xx就可以取到对应key的**状态**的*值*\n\n\n## 三、State如何改变？\n\n通常在JS里面，我们要改变某一个值可能就只需要  X = XX; 就可以。\n\n\n这里的state是一个状态。状态改变了，页面会自动刷新为最新的页面用最新的状态显示。\n下面我们做一个小实验。\n\n\n把 src/app.js的文件内容先改一下\n\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state={Text:'我是state'}\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            State输出：{this.state.Text}\n          </p>\n          <button onClick={()=>{\n            this.state.Text = '我是通过this.state.Text改变的State';\n            alert(this.state.Text);\n          }}>\n            按我改变state\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n（不要在意细节！！！我们是测试按钮的样式不重要！！！）\n\n点击按钮之后，我们发现，state的值是改变了，但是页面上面显示的值不是我们想要的啊。\n\n\n\n那我要怎么才可以刷新页面出现我想要的state的值呢？\n\n官方提供的方法\n\nsetState(updater, [callback])\n\n\n可以这么理解，针对上面的例子\n\n\n```javascript\nthis.setState({Text:'我是通过this.state.Text改变的State'}, function(){})\n```\n\n后面的function，可以有，也可以没有。不需要的话就可以不用写-----------稍后会说\n\n所以只需要\n\n```javascript\nthis.setState({Text:'我是通过this.state.Text改变的State'})\n```\n\n\n把 src/app.js的文件内容先改一下\n\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state={Text:'我是state'}\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            State输出：{this.state.Text}\n          </p>\n          <button onClick={()=>{\n            this.setState({Text:'我是通过this.state.Text改变的State'})\n            alert(this.state.Text);\n          }}>\n            按我改变state\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n保存-热加载\n之后我们发现，状态是改变了，可是alert的值不是我们想要的，还是老的值（状态）的。\n\n可能你不知道我在说什么\n\n通过一个小例子我们仔细感受一下。官方的setState究竟在干什么。\n\n把 src/app.js的文件内容先改一下\n\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state={\n    Text:'大家一起看log吧，我这次啥也不做',\n    conut:0,\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            State输出：{this.state.Text}\n          </p>\n          <button onClick={()=>{\n            console.log(this.state.conut);\n            this.setState({conut: this.state.conut + 1});\n            console.log(this.state.conut);\n          }}>\n            按我改变state\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n打开我们的react页面\n按Ctrl + Shift + I\n看log\n然后按钮\n\n![在这里插入图片描述](/image/React入门/20181123143905811.png)\n\n诶，我不是setState了吗，为什么值没有改变还是初值呢？\n\n我们换一个方法试一下\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state={\n    Text:'大家一起看log吧，我这次啥也不做',\n    conut:0,\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            State输出：{this.state.Text}\n          </p>\n          <button onClick={()=>{\n            console.log(this.state.conut);\n            this.setState({conut: this.state.conut + 1})\n            setTimeout(()=>{\n              console.log(this.state.conut);\n            },1000);\n          }}>\n            按我改变state\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n\n那我们是不是可以认为setState不是一个立刻生效的函数。\n\n有点类似异步的网络请求。\n\n\n\n这是一个坑，很多新手都会遇到的坑。我曾经也遇到所以写出来。\n\n那既然是类似异步的网络请求肯定也有callback咯？\n\n是的！\n\n我们把console.log放到刚刚我们没有写function里面。\n\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state={\n    Text:'大家一起看log吧，我这次啥也不做',\n    conut:0,\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            State输出：{this.state.Text}\n          </p>\n          <button onClick={()=>{\n            console.log(this.state.conut);\n            this.setState({conut: this.state.conut + 1}, ()=>{\n              console.log(this.state.conut);\n            })\n            \n          }}>\n            按我改变state\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n这样的好处我们不需要手动的控制等待时间的大小，因为根据设备的不同这个时间可能会太多或者太少。\n\n本人React小菜，有说的不对的地方还请大神指出。\n","source":"_posts/React入门（一）-State详解.md","raw":"---\ntitle: React入门（一） State详解\ndate: 2019-06-19 11:22:03\ntags: [React, State]\ncategory: [React]\ncover: /image/cover/React.jpeg\n---\n\n@[TOC](React入门（一） State详解)\n\n# React入门（一） State详解\n\n我们都是程序员，废话不多说马上开始！\n\n## 一、 Demo创建/下载\n\n两种方法创建新的React APP\n\n### 1. github下载\n\n- 下载[git地址](https://github.com/DerrickTel/ReactDemo1.git).\n - 解压-打开\n  - npm install\n  - npm start \n  - ![如果有询问](/image/React入门/20181123111537542.png)\n  - y（3000端口任务在运行是否愿意运行在别的端口上？）\n\n\n\n### 2. 自己的命令行创建\n- 找到自己**心仪的文件夹**   *（全英文）*\n - 用命令行打开并抵达**心仪文件夹**\n  - npx create-react-app my-app\n  - cd my-app\n  - npm start\n> **注意**\n> npx在第一行不是一个错字 - 它是一个包转发工具，附带npm 5.2+。\n> 创建的时候已经默认运行过（npm install ）可以直接start\n\n然后把 src/app.js的文件内容先改一下\n\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <p>\n            修改文件夹 <code>src/App.js</code> 保存时候之后自动加载.\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n```\nCtrl + C \n\nCtrl + V\n\n## 二、State是什么？\n![在这里插入图片描述](/image/React入门/20181123134126335.png)\n\n英文翻译是状态。\n\n其实也可以理解为状态，一段文字中的某个值改变了，也可以理解为状态改变了。\n看一个简单的例子\n\n\n把 src/app.js的文件内容先改一下\n\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state={Text:'我是state'}\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            State输出：{this.state.Text}\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n```javascript\n  state={Text:'我是state'}\n```\n\n这里的state是给state设置初值，不然会报错。不相信的话自己可以试一下。*（因为state是undefined，所以他里面取不到Text）*\n\n通过上面的例子可以知道state里面放的是XX的状态\n\nkey value对应的\n\nthis.state.xx就可以取到对应key的**状态**的*值*\n\n\n## 三、State如何改变？\n\n通常在JS里面，我们要改变某一个值可能就只需要  X = XX; 就可以。\n\n\n这里的state是一个状态。状态改变了，页面会自动刷新为最新的页面用最新的状态显示。\n下面我们做一个小实验。\n\n\n把 src/app.js的文件内容先改一下\n\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state={Text:'我是state'}\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            State输出：{this.state.Text}\n          </p>\n          <button onClick={()=>{\n            this.state.Text = '我是通过this.state.Text改变的State';\n            alert(this.state.Text);\n          }}>\n            按我改变state\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n（不要在意细节！！！我们是测试按钮的样式不重要！！！）\n\n点击按钮之后，我们发现，state的值是改变了，但是页面上面显示的值不是我们想要的啊。\n\n\n\n那我要怎么才可以刷新页面出现我想要的state的值呢？\n\n官方提供的方法\n\nsetState(updater, [callback])\n\n\n可以这么理解，针对上面的例子\n\n\n```javascript\nthis.setState({Text:'我是通过this.state.Text改变的State'}, function(){})\n```\n\n后面的function，可以有，也可以没有。不需要的话就可以不用写-----------稍后会说\n\n所以只需要\n\n```javascript\nthis.setState({Text:'我是通过this.state.Text改变的State'})\n```\n\n\n把 src/app.js的文件内容先改一下\n\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state={Text:'我是state'}\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            State输出：{this.state.Text}\n          </p>\n          <button onClick={()=>{\n            this.setState({Text:'我是通过this.state.Text改变的State'})\n            alert(this.state.Text);\n          }}>\n            按我改变state\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n保存-热加载\n之后我们发现，状态是改变了，可是alert的值不是我们想要的，还是老的值（状态）的。\n\n可能你不知道我在说什么\n\n通过一个小例子我们仔细感受一下。官方的setState究竟在干什么。\n\n把 src/app.js的文件内容先改一下\n\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state={\n    Text:'大家一起看log吧，我这次啥也不做',\n    conut:0,\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            State输出：{this.state.Text}\n          </p>\n          <button onClick={()=>{\n            console.log(this.state.conut);\n            this.setState({conut: this.state.conut + 1});\n            console.log(this.state.conut);\n          }}>\n            按我改变state\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n打开我们的react页面\n按Ctrl + Shift + I\n看log\n然后按钮\n\n![在这里插入图片描述](/image/React入门/20181123143905811.png)\n\n诶，我不是setState了吗，为什么值没有改变还是初值呢？\n\n我们换一个方法试一下\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state={\n    Text:'大家一起看log吧，我这次啥也不做',\n    conut:0,\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            State输出：{this.state.Text}\n          </p>\n          <button onClick={()=>{\n            console.log(this.state.conut);\n            this.setState({conut: this.state.conut + 1})\n            setTimeout(()=>{\n              console.log(this.state.conut);\n            },1000);\n          }}>\n            按我改变state\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n\n那我们是不是可以认为setState不是一个立刻生效的函数。\n\n有点类似异步的网络请求。\n\n\n\n这是一个坑，很多新手都会遇到的坑。我曾经也遇到所以写出来。\n\n那既然是类似异步的网络请求肯定也有callback咯？\n\n是的！\n\n我们把console.log放到刚刚我们没有写function里面。\n\n```javascript\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state={\n    Text:'大家一起看log吧，我这次啥也不做',\n    conut:0,\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            State输出：{this.state.Text}\n          </p>\n          <button onClick={()=>{\n            console.log(this.state.conut);\n            this.setState({conut: this.state.conut + 1}, ()=>{\n              console.log(this.state.conut);\n            })\n            \n          }}>\n            按我改变state\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n这样的好处我们不需要手动的控制等待时间的大小，因为根据设备的不同这个时间可能会太多或者太少。\n\n本人React小菜，有说的不对的地方还请大神指出。\n","slug":"React入门（一）-State详解","published":1,"updated":"2020-04-11T14:23:37.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq63860033s9vmb62mfzhv","content":"<p>@[TOC](React入门（一） State详解)</p>\n<h1 id=\"React入门（一）-State详解\"><a href=\"#React入门（一）-State详解\" class=\"headerlink\" title=\"React入门（一） State详解\"></a>React入门（一） State详解</h1><p>我们都是程序员，废话不多说马上开始！</p>\n<h2 id=\"一、-Demo创建-下载\"><a href=\"#一、-Demo创建-下载\" class=\"headerlink\" title=\"一、 Demo创建/下载\"></a>一、 Demo创建/下载</h2><p>两种方法创建新的React APP</p>\n<h3 id=\"1-github下载\"><a href=\"#1-github下载\" class=\"headerlink\" title=\"1. github下载\"></a>1. github下载</h3><ul>\n<li>下载<a href=\"https://github.com/DerrickTel/ReactDemo1.git\" target=\"_blank\" rel=\"noopener\">git地址</a>.<ul>\n<li>解压-打开</li>\n<li>npm install</li>\n<li>npm start </li>\n<li><img src=\"/\" class=\"lazyload\" data-src=\"/image/React%E5%85%A5%E9%97%A8/20181123111537542.png\"  alt=\"如果有询问\"></li>\n<li>y（3000端口任务在运行是否愿意运行在别的端口上？）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-自己的命令行创建\"><a href=\"#2-自己的命令行创建\" class=\"headerlink\" title=\"2. 自己的命令行创建\"></a>2. 自己的命令行创建</h3><ul>\n<li>找到自己<strong>心仪的文件夹</strong>   <em>（全英文）</em><ul>\n<li>用命令行打开并抵达<strong>心仪文件夹</strong></li>\n<li>npx create-react-app my-app</li>\n<li>cd my-app</li>\n<li>npm start<blockquote>\n<p><strong>注意</strong><br>npx在第一行不是一个错字 - 它是一个包转发工具，附带npm 5.2+。<br>创建的时候已经默认运行过（npm install ）可以直接start</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p>然后把 src/app.js的文件内容先改一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            Edit &lt;code&gt;src/App.js&lt;<span class=\"regexp\">/code&gt; and save to reload.</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>p&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            修改文件夹 &lt;code&gt;src/App.js&lt;<span class=\"regexp\">/code&gt; 保存时候之后自动加载.</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>p&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n<p>Ctrl + C </p>\n<p>Ctrl + V</p>\n<h2 id=\"二、State是什么？\"><a href=\"#二、State是什么？\" class=\"headerlink\" title=\"二、State是什么？\"></a>二、State是什么？</h2><p><img src=\"/\" class=\"lazyload\" data-src=\"/image/React%E5%85%A5%E9%97%A8/20181123134126335.png\"  alt=\"在这里插入图片描述\"></p>\n<p>英文翻译是状态。</p>\n<p>其实也可以理解为状态，一段文字中的某个值改变了，也可以理解为状态改变了。<br>看一个简单的例子</p>\n<p>把 src/app.js的文件内容先改一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state=&#123;<span class=\"attr\">Text</span>:<span class=\"string\">'我是state'</span>&#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            State输出：&#123;<span class=\"keyword\">this</span>.state.Text&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>header&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state=&#123;<span class=\"attr\">Text</span>:<span class=\"string\">'我是state'</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的state是给state设置初值，不然会报错。不相信的话自己可以试一下。<em>（因为state是undefined，所以他里面取不到Text）</em></p>\n<p>通过上面的例子可以知道state里面放的是XX的状态</p>\n<p>key value对应的</p>\n<p>this.state.xx就可以取到对应key的<strong>状态</strong>的<em>值</em></p>\n<h2 id=\"三、State如何改变？\"><a href=\"#三、State如何改变？\" class=\"headerlink\" title=\"三、State如何改变？\"></a>三、State如何改变？</h2><p>通常在JS里面，我们要改变某一个值可能就只需要  X = XX; 就可以。</p>\n<p>这里的state是一个状态。状态改变了，页面会自动刷新为最新的页面用最新的状态显示。<br>下面我们做一个小实验。</p>\n<p>把 src/app.js的文件内容先改一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state=&#123;<span class=\"attr\">Text</span>:<span class=\"string\">'我是state'</span>&#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            State输出：&#123;<span class=\"keyword\">this</span>.state.Text&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            this.state.Text = '我是通过this.state.Text改变的State';</span></span><br><span class=\"line\"><span class=\"regexp\">            alert(this.state.Text);</span></span><br><span class=\"line\"><span class=\"regexp\">          &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            按我改变state</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n<p>（不要在意细节！！！我们是测试按钮的样式不重要！！！）</p>\n<p>点击按钮之后，我们发现，state的值是改变了，但是页面上面显示的值不是我们想要的啊。</p>\n<p>那我要怎么才可以刷新页面出现我想要的state的值呢？</p>\n<p>官方提供的方法</p>\n<p>setState(updater, [callback])</p>\n<p>可以这么理解，针对上面的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">Text</span>:<span class=\"string\">'我是通过this.state.Text改变的State'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>后面的function，可以有，也可以没有。不需要的话就可以不用写———–稍后会说</p>\n<p>所以只需要</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">Text</span>:<span class=\"string\">'我是通过this.state.Text改变的State'</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>把 src/app.js的文件内容先改一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state=&#123;<span class=\"attr\">Text</span>:<span class=\"string\">'我是state'</span>&#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            State输出：&#123;<span class=\"keyword\">this</span>.state.Text&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            this.setState(&#123;Text:'我是通过this.state.Text改变的State'&#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">            alert(this.state.Text);</span></span><br><span class=\"line\"><span class=\"regexp\">          &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            按我改变state</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n<p>保存-热加载<br>之后我们发现，状态是改变了，可是alert的值不是我们想要的，还是老的值（状态）的。</p>\n<p>可能你不知道我在说什么</p>\n<p>通过一个小例子我们仔细感受一下。官方的setState究竟在干什么。</p>\n<p>把 src/app.js的文件内容先改一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state=&#123;</span><br><span class=\"line\">    Text:<span class=\"string\">'大家一起看log吧，我这次啥也不做'</span>,</span><br><span class=\"line\">    conut:<span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            State输出：&#123;<span class=\"keyword\">this</span>.state.Text&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            console.log(this.state.conut);</span></span><br><span class=\"line\"><span class=\"regexp\">            this.setState(&#123;conut: this.state.conut + 1&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">            console.log(this.state.conut);</span></span><br><span class=\"line\"><span class=\"regexp\">          &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            按我改变state</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n<p>打开我们的react页面<br>按Ctrl + Shift + I<br>看log<br>然后按钮</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/React%E5%85%A5%E9%97%A8/20181123143905811.png\"  alt=\"在这里插入图片描述\"></p>\n<p>诶，我不是setState了吗，为什么值没有改变还是初值呢？</p>\n<p>我们换一个方法试一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state=&#123;</span><br><span class=\"line\">    Text:<span class=\"string\">'大家一起看log吧，我这次啥也不做'</span>,</span><br><span class=\"line\">    conut:<span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            State输出：&#123;<span class=\"keyword\">this</span>.state.Text&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            console.log(this.state.conut);</span></span><br><span class=\"line\"><span class=\"regexp\">            this.setState(&#123;conut: this.state.conut + 1&#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">            setTimeout(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">              console.log(this.state.conut);</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;,1000);</span></span><br><span class=\"line\"><span class=\"regexp\">          &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            按我改变state</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n\n<p>那我们是不是可以认为setState不是一个立刻生效的函数。</p>\n<p>有点类似异步的网络请求。</p>\n<p>这是一个坑，很多新手都会遇到的坑。我曾经也遇到所以写出来。</p>\n<p>那既然是类似异步的网络请求肯定也有callback咯？</p>\n<p>是的！</p>\n<p>我们把console.log放到刚刚我们没有写function里面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state=&#123;</span><br><span class=\"line\">    Text:<span class=\"string\">'大家一起看log吧，我这次啥也不做'</span>,</span><br><span class=\"line\">    conut:<span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            State输出：&#123;<span class=\"keyword\">this</span>.state.Text&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            console.log(this.state.conut);</span></span><br><span class=\"line\"><span class=\"regexp\">            this.setState(&#123;conut: this.state.conut + 1&#125;, ()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">              console.log(this.state.conut);</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">            </span></span><br><span class=\"line\"><span class=\"regexp\">          &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            按我改变state</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n<p>这样的好处我们不需要手动的控制等待时间的大小，因为根据设备的不同这个时间可能会太多或者太少。</p>\n<p>本人React小菜，有说的不对的地方还请大神指出。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>@[TOC](React入门（一） State详解)</p>\n<h1 id=\"React入门（一）-State详解\"><a href=\"#React入门（一）-State详解\" class=\"headerlink\" title=\"React入门（一） State详解\"></a>React入门（一） State详解</h1><p>我们都是程序员，废话不多说马上开始！</p>\n<h2 id=\"一、-Demo创建-下载\"><a href=\"#一、-Demo创建-下载\" class=\"headerlink\" title=\"一、 Demo创建/下载\"></a>一、 Demo创建/下载</h2><p>两种方法创建新的React APP</p>\n<h3 id=\"1-github下载\"><a href=\"#1-github下载\" class=\"headerlink\" title=\"1. github下载\"></a>1. github下载</h3><ul>\n<li>下载<a href=\"https://github.com/DerrickTel/ReactDemo1.git\" target=\"_blank\" rel=\"noopener\">git地址</a>.<ul>\n<li>解压-打开</li>\n<li>npm install</li>\n<li>npm start </li>\n<li><img src=\"/image/React%E5%85%A5%E9%97%A8/20181123111537542.png\" alt=\"如果有询问\"></li>\n<li>y（3000端口任务在运行是否愿意运行在别的端口上？）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-自己的命令行创建\"><a href=\"#2-自己的命令行创建\" class=\"headerlink\" title=\"2. 自己的命令行创建\"></a>2. 自己的命令行创建</h3><ul>\n<li>找到自己<strong>心仪的文件夹</strong>   <em>（全英文）</em><ul>\n<li>用命令行打开并抵达<strong>心仪文件夹</strong></li>\n<li>npx create-react-app my-app</li>\n<li>cd my-app</li>\n<li>npm start<blockquote>\n<p><strong>注意</strong><br>npx在第一行不是一个错字 - 它是一个包转发工具，附带npm 5.2+。<br>创建的时候已经默认运行过（npm install ）可以直接start</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p>然后把 src/app.js的文件内容先改一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            Edit &lt;code&gt;src/App.js&lt;<span class=\"regexp\">/code&gt; and save to reload.</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>p&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            修改文件夹 &lt;code&gt;src/App.js&lt;<span class=\"regexp\">/code&gt; 保存时候之后自动加载.</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>p&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n<p>Ctrl + C </p>\n<p>Ctrl + V</p>\n<h2 id=\"二、State是什么？\"><a href=\"#二、State是什么？\" class=\"headerlink\" title=\"二、State是什么？\"></a>二、State是什么？</h2><p><img src=\"/image/React%E5%85%A5%E9%97%A8/20181123134126335.png\" alt=\"在这里插入图片描述\"></p>\n<p>英文翻译是状态。</p>\n<p>其实也可以理解为状态，一段文字中的某个值改变了，也可以理解为状态改变了。<br>看一个简单的例子</p>\n<p>把 src/app.js的文件内容先改一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state=&#123;<span class=\"attr\">Text</span>:<span class=\"string\">'我是state'</span>&#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            State输出：&#123;<span class=\"keyword\">this</span>.state.Text&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>header&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default App;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state=&#123;<span class=\"attr\">Text</span>:<span class=\"string\">'我是state'</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的state是给state设置初值，不然会报错。不相信的话自己可以试一下。<em>（因为state是undefined，所以他里面取不到Text）</em></p>\n<p>通过上面的例子可以知道state里面放的是XX的状态</p>\n<p>key value对应的</p>\n<p>this.state.xx就可以取到对应key的<strong>状态</strong>的<em>值</em></p>\n<h2 id=\"三、State如何改变？\"><a href=\"#三、State如何改变？\" class=\"headerlink\" title=\"三、State如何改变？\"></a>三、State如何改变？</h2><p>通常在JS里面，我们要改变某一个值可能就只需要  X = XX; 就可以。</p>\n<p>这里的state是一个状态。状态改变了，页面会自动刷新为最新的页面用最新的状态显示。<br>下面我们做一个小实验。</p>\n<p>把 src/app.js的文件内容先改一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state=&#123;<span class=\"attr\">Text</span>:<span class=\"string\">'我是state'</span>&#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            State输出：&#123;<span class=\"keyword\">this</span>.state.Text&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            this.state.Text = '我是通过this.state.Text改变的State';</span></span><br><span class=\"line\"><span class=\"regexp\">            alert(this.state.Text);</span></span><br><span class=\"line\"><span class=\"regexp\">          &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            按我改变state</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n<p>（不要在意细节！！！我们是测试按钮的样式不重要！！！）</p>\n<p>点击按钮之后，我们发现，state的值是改变了，但是页面上面显示的值不是我们想要的啊。</p>\n<p>那我要怎么才可以刷新页面出现我想要的state的值呢？</p>\n<p>官方提供的方法</p>\n<p>setState(updater, [callback])</p>\n<p>可以这么理解，针对上面的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">Text</span>:<span class=\"string\">'我是通过this.state.Text改变的State'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>后面的function，可以有，也可以没有。不需要的话就可以不用写———–稍后会说</p>\n<p>所以只需要</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">Text</span>:<span class=\"string\">'我是通过this.state.Text改变的State'</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>把 src/app.js的文件内容先改一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state=&#123;<span class=\"attr\">Text</span>:<span class=\"string\">'我是state'</span>&#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            State输出：&#123;<span class=\"keyword\">this</span>.state.Text&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            this.setState(&#123;Text:'我是通过this.state.Text改变的State'&#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">            alert(this.state.Text);</span></span><br><span class=\"line\"><span class=\"regexp\">          &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            按我改变state</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n<p>保存-热加载<br>之后我们发现，状态是改变了，可是alert的值不是我们想要的，还是老的值（状态）的。</p>\n<p>可能你不知道我在说什么</p>\n<p>通过一个小例子我们仔细感受一下。官方的setState究竟在干什么。</p>\n<p>把 src/app.js的文件内容先改一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state=&#123;</span><br><span class=\"line\">    Text:<span class=\"string\">'大家一起看log吧，我这次啥也不做'</span>,</span><br><span class=\"line\">    conut:<span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            State输出：&#123;<span class=\"keyword\">this</span>.state.Text&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            console.log(this.state.conut);</span></span><br><span class=\"line\"><span class=\"regexp\">            this.setState(&#123;conut: this.state.conut + 1&#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">            console.log(this.state.conut);</span></span><br><span class=\"line\"><span class=\"regexp\">          &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            按我改变state</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n<p>打开我们的react页面<br>按Ctrl + Shift + I<br>看log<br>然后按钮</p>\n<p><img src=\"/image/React%E5%85%A5%E9%97%A8/20181123143905811.png\" alt=\"在这里插入图片描述\"></p>\n<p>诶，我不是setState了吗，为什么值没有改变还是初值呢？</p>\n<p>我们换一个方法试一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state=&#123;</span><br><span class=\"line\">    Text:<span class=\"string\">'大家一起看log吧，我这次啥也不做'</span>,</span><br><span class=\"line\">    conut:<span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            State输出：&#123;<span class=\"keyword\">this</span>.state.Text&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            console.log(this.state.conut);</span></span><br><span class=\"line\"><span class=\"regexp\">            this.setState(&#123;conut: this.state.conut + 1&#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">            setTimeout(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">              console.log(this.state.conut);</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;,1000);</span></span><br><span class=\"line\"><span class=\"regexp\">          &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            按我改变state</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n\n<p>那我们是不是可以认为setState不是一个立刻生效的函数。</p>\n<p>有点类似异步的网络请求。</p>\n<p>这是一个坑，很多新手都会遇到的坑。我曾经也遇到所以写出来。</p>\n<p>那既然是类似异步的网络请求肯定也有callback咯？</p>\n<p>是的！</p>\n<p>我们把console.log放到刚刚我们没有写function里面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> logo <span class=\"keyword\">from</span> <span class=\"string\">'./logo.svg'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state=&#123;</span><br><span class=\"line\">    Text:<span class=\"string\">'大家一起看log吧，我这次啥也不做'</span>,</span><br><span class=\"line\">    conut:<span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">        &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">          &lt;img src=&#123;logo&#125; className=<span class=\"string\">\"App-logo\"</span> alt=<span class=\"string\">\"logo\"</span> /&gt;</span><br><span class=\"line\">          &lt;p&gt;</span><br><span class=\"line\">            State输出：&#123;<span class=\"keyword\">this</span>.state.Text&#125;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;button onClick=&#123;()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            console.log(this.state.conut);</span></span><br><span class=\"line\"><span class=\"regexp\">            this.setState(&#123;conut: this.state.conut + 1&#125;, ()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">              console.log(this.state.conut);</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">            </span></span><br><span class=\"line\"><span class=\"regexp\">          &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            按我改变state</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/</span>button&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n<p>这样的好处我们不需要手动的控制等待时间的大小，因为根据设备的不同这个时间可能会太多或者太少。</p>\n<p>本人React小菜，有说的不对的地方还请大神指出。</p>\n"},{"title":"Ant Design Form 组件总结 结合Modal 自定义Modal的实现 （Upload Input Select DatePicker Cascader）","date":"2019-06-19T02:24:07.000Z","cover":"/image/cover/ANTD.png","_content":"\n## 起源\n\n最近在项目中发现要写多个弹框（用于查看、编辑、新建XX信息），如下图。\n\n![测试图片](/image/AntDesignForm总结/modal.png)\n\n像这样花里胡哨的弹框在一个大型的中台管理系统中，可能要写上好几遍的Modal\n但是其实他们大同小异。\n\n首先，他们的title是固定的（增、改、查）\n\n底下的内容也是固定的，无非就是Upload Input Select DatePicker Cascader\n\n（写不了<>。其实应该是ant design 的组件）\n\n\n## 改进\n\n所以我想自己写一个ModalView的组件。只需要传入这上面的数据类型，title之类的数据就可以完成渲染。\n\n如下，这个是我项目中的一个例子\n\n\n```\n<ModalView \n          onOk={this.edit}     // 点击Modal确定时的回调\n          onCancel={this.hideModal}   // 点击Modal取消，或者点击mask时的回调\n          show={visible}        // Modal的显隐\n          category={category}      // Modal的title，通过category来判断（目前只有查看、编辑、新增）\n          data={fStaffManage}     // 自定义Modal的核心，整个Modal的渲染\n          showData={showData}    // 点击查看和编辑时的默认数据\n/>\n```\n\n\n接下来是fStaffManage的数据结构\n\n\n```\nexport const fStaffManage = [\n  {\n    label: '员工编号（自动生成）',\n    key: 'id',\n    type: 'input',\n    Message: '请输入员工编号',\n    disabled: true,\n  },\n  {\n    label: '门店',\n    key: 'storeNo',\n    type: 'select',\n    Message: '请选择门店',\n    option: [],\n  },\n  {\n    label: '员工姓名',\n    key: 'userName',\n    type: 'input',\n    Message: '请输入员工姓名',\n  },\n  {\n    label: '角色类型',\n    key: 'roleCodes',\n    type: 'select',\n    Message: '请选择角色类型',\n    option: [{ severKey: '店员', showValue: '店员' }, { severKey: '店长', showValue: '店长' }],\n  },\n  {\n    label: '联系电话',\n    key: 'mobile',\n    type: 'input',\n    Message: '请输入联系电话',\n    pattern: '^1[34578]\\\\d{9}$',\n  },\n  {\n    label: '测试上传图片',\n    key: 'testImgUpload',\n    type: 'imageUpload',\n    Message: '请上传图片',\n  },\n];\n```\n**Message**  是用于Form表单的提示用于以及placeholder\n\n**label**   是用于Form的label\n\n**key**   是用于map循环时的key（防止warning和提升效率）\n\n**type**   是用于显示那种类型的组件\n\n**pattern**   是用于Form表单检测的正则表达式\n\n\n```\n/*\n * @Author: Derrick\n * @Date: 2019-04-04 16:53:05\n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-28 15:48:04\n */\nimport React, { PureComponent } from 'react';\nimport { Modal, Form, Button, Table, Upload, message, Row, Select } from 'antd';\nimport { connect } from 'dva';\nimport PropTypes from 'prop-types';\nimport componentAuth from '@/common/ComponentAuth';\nimport FormSelect from '@/common/FormItems/FormSelect';\nimport FormInput from '@/common/FormItems/FormInput';\nimport FormDataPicker from '@/common/FormItems/FormDataPicker';\nimport FormCascader from '@/common/FormItems/FormCascader';\nimport FormTextArea from '@/common/FormItems/FormTextArea';\nimport FormImageUpload from '@/common/FormItems/FormImageUpload';\nimport { HEADER_BASE, SEVER_URL_BASE } from '@/utils/constant';\nimport Col from 'antd/es/col';\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 5 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\nconst { Item } = Form;\nconst { Option } = Select;\n\n@connect(({ mIdentifyCenter }) => ({\n  mIdentifyCenter\n}))\nclass ModalView extends PureComponent {\n  state = {\n    data: [],\n    storeId: '',\n  };\n\n  // 返回title\n  caseCategory = category => {\n    switch (category) {\n      case 'check':\n        return { title: '查看' };\n      case 'import':\n        return { title: '导入', import: true };\n      case 'create':\n        return { title: '新增' };\n      case 'edit':\n        return { title: '编辑' };\n      default:\n        return { title: '查看' };\n    }\n  };\n\n  showLabel = (type, label) => {\n    const { category } = this.props;\n\n    if (category === 'search') {\n      if (type !== 'datePicker') {\n        return undefined;\n      }\n      return label;\n    }\n    return label;\n  };\n\n  showRequire = disabled => {\n    const { category } = this.props;\n    if (category === 'search') {\n      return false;\n    }\n    if (disabled) {\n      return false;\n    }\n    return true;\n  };\n\n  form = () => {\n    const {\n      form: { getFieldDecorator },\n      data,\n      showData,\n      category,\n    } = this.props;\n\n    let ShowType;\n\n    return data.map(value => {\n      const { label, key, type, Message, option, disabled, pattern } = value;\n      if (!value) {\n        return null;\n      }\n      switch (type) {\n        case 'input':\n          ShowType = FormInput;\n          break;\n        case 'select':\n          ShowType = FormSelect;\n          break;\n        case 'datePicker':\n          ShowType = FormDataPicker;\n          break;\n        case 'cascader':\n          ShowType = FormCascader;\n          showData.region = [showData.provinceId, showData.cityId, showData.countyId];\n          break;\n        case 'textArea':\n          ShowType = FormTextArea;\n          break;\n        case 'imageUpload':\n          ShowType = FormImageUpload;\n          break;\n        default:\n          ShowType = null;\n      }\n      return (\n        <Item label={this.showLabel(type, label)} key={key}>\n          {getFieldDecorator(key, {\n            rules: [\n              {\n                required: this.showRequire(disabled),\n                message: Message,\n                pattern: pattern || undefined,\n                type: type === 'cascader' ? 'array' : 'string',\n              },\n            ],\n            initialValue: showData[key] ? showData[key] : undefined,\n          })(\n            <ShowType\n              option={option}\n              message={Message}\n              disabled={!!(disabled || category === 'check')}\n            />\n          )}\n        </Item>\n      );\n    });\n  };\n\n  checkOk = () => {\n    const { onOk, form } = this.props;\n    form.validateFields((err, fieldsValue) => {\n      if (!err) {\n        onOk(fieldsValue);\n      }\n    });\n  };\n  \n  closeModal = () => {\n    const { onCancel, form: { resetFields } } = this.props;\n    resetFields();\n    onCancel();\n  }\n\n  render() {\n    const { data } = this.state;\n    const { show, category = '', importColums, downloadUrl } = this.props;\n    const modalData = this.caseCategory(category);\n    return (\n      <Modal\n        visible={show}\n        onCancel={this.closeModal}\n        onOk={category === 'import' ? this.importOk : this.checkOk}\n        title={modalData.title}\n        width=\"70%\"\n        footer={modalData.title === '查看' ? null : undefined}\n      >\n          <Form style={{ paddingTop: '20px' }} {...formItemLayout}>\n            {this.form()}\n          </Form>\n      </Modal>\n    );\n  }\n}\n\nModalView.propTypes = {\n  onOk: PropTypes.func.isRequired, // 弹框点击确定\n  onCancel: PropTypes.func.isRequired, // 隐藏弹框\n  show: PropTypes.bool, // 是否显示弹窗\n  category: PropTypes.string, // 弹框的类型（title显示\n  data: PropTypes.arrayOf(PropTypes.object).isRequired, // 数据类型; 位置:'@/common/constant/sormView.js' 记得写注释; 格式: `s${文件名}`\n  showData: PropTypes.object, // 查看或者编辑时的默认数据\n  importCallBack: PropTypes.func, // 导入之后，点击确定的回调函数\n  importColums: PropTypes.array, // 导入时候显示表格的表头\n  downloadUrl: PropTypes.string, // 下载的模板的文件名\n};\n\nModalView.defaultProps = {\n  show: false,\n  category: 'check',\n  showData: {},\n  importCallBack: () => {},\n  importColums: [],\n  downloadUrl: '',\n};\n\nexport default Form.create()(ModalView);\n```\n\n - **FormCascader**\n\n```\n/*\n * @Author: Derrick \n * @Date: 2019-04-11 09:57:54 \n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-28 16:52:57\n */\nimport React, { Component } from 'react';\nimport { Cascader } from 'antd';\nimport PropTypes from 'prop-types';\nimport regionData from '@/constant/regionData'\n\nclass FormCascader extends Component {\n\n  change = (e) => {\n    const {onChange} = this.props;\n    onChange(e)\n  }\n\n  render() {\n    const {value, disabled, message} = this.props;\n    return (\n      <Cascader placeholder={message} options={regionData} disabled={disabled} value={value} onChange={this.change} />\n    );\n  }\n}\n\nFormCascader.propsType = {\n  disabled: PropTypes.bool, // 是否不可选\n  message: PropTypes.string, // 默认文字（placeholder\n}\n\nFormCascader.defalutProps = {\n  disabled: false,\n  message: '',\n}\n\nexport default FormCascader;\n```\n\n - **FormDataPicker**\n\n```\n/*\n * @Author: Derrick \n * @Date: 2019-04-10 10:57:08 \n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-15 14:28:40\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DatePicker } from 'antd';\n\nclass FormDataPicker extends Component {\n\n  change = (e) => {\n    const {onChange} = this.props\n    onChange(e)\n  }\n\n  render() {\n    const {value, disabled} = this.props;\n    return (\n      <DatePicker disabled={disabled} value={value} onChange={this.change} />\n      );\n  }\n}\n\nFormDataPicker.propsType = {\n  disabled: PropTypes.bool, // 是否不可选\n}\n\nFormDataPicker.defalutProps = {\n  disabled: false,\n}\n\nexport default FormDataPicker;\n```\n\n - **FormImageUpload**\n\n```\n/*\n * @Author: Derrick \n * @Date: 2019-04-26 14:20:20 \n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-28 18:11:44\n */\nimport React, { PureComponent } from 'react';\nimport { Upload, Icon, message } from 'antd';\nimport { PICTURE_UPLOAD, HEADER_BASE } from '@/utils/constant';\n\nclass FormImageUpload extends PureComponent {\n\n  state = {\n    loading: false,\n  };\n\n  uploadButton = () => {\n    const { loading } = this.state;\n    return (\n      <div>\n        <Icon type={loading ? 'loading' : 'plus'} />\n        <div className=\"ant-upload-text\">Upload</div>\n      </div>\n    )\n  }\n\n  handleChange = (info) => {\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    if (info.file.status === 'done') {\n      const {onChange} = this.props\n      this.setState({imageUrl: info.file.response.data[0], loading: false,})\n      onChange(info.file.response.data[0])\n    }\n  }\n\n  beforeUpload = (file) => {\n    const isJPG = file.type === 'image/jpeg';\n    if (!isJPG) {\n      message.error('只能上传JPG的图片!');\n    }\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n      message.error('图片大小不能大于2MB!');\n    }\n    return isJPG && isLt2M;\n  }\n\n  upLoadProps = () => {\n    HEADER_BASE.user_id = window.sessionStorage.getItem('userId');\n    HEADER_BASE.token_id = window.sessionStorage.getItem('tokenId');\n    const props = {\n      name: 'file',\n      action: PICTURE_UPLOAD,\n      headers: HEADER_BASE,\n      onChange: this.handleChange,\n      showUploadList: false,\n      beforeUpload: this.beforeUpload,\n    };\n    return props;\n  };\n\n  render() {\n    \n    const { imageUrl } = this.state;\n\n    return (\n      <Upload\n        listType=\"picture-card\"\n        {...this.upLoadProps()}\n\n      >\n        {imageUrl ? <img src={imageUrl} alt=\"avatar\" /> : this.uploadButton()}\n      </Upload>\n    )\n  }\n}\n\nexport default FormImageUpload;\n```\n\n - **FormInput**\n\n```\n/*\n * @Author: Derrick \n * @Date: 2019-04-10 10:57:08 \n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-15 14:46:23\n */\nimport React, { Component } from 'react';\nimport { Input } from 'antd';\nimport PropTypes from 'prop-types';\n\nclass FormInput extends Component {\n\n  change = (e) => {\n    const {onChange} = this.props;\n    onChange(e)\n  }\n\n  render() {\n    const {message, value, disabled} = this.props;\n    return (\n      <Input disabled={disabled} placeholder={message} value={value} onChange={this.change} />\n      );\n  }\n}\n\nFormInput.propsType = {\n  disabled: PropTypes.bool, // 是否不可选\n  message: PropTypes.string, // 默认文字（placeholder\n}\n\nFormInput.defalutProps = {\n  disabled: false,\n  message: '',\n}\n\nexport default FormInput;\n```\n\n\n - **FormSelect**\n\n\n```\n/*\n * @Author: Derrick \n * @Date: 2019-04-10 10:13:58 \n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-28 15:59:22\n */\nimport React, { Component } from 'react';\nimport { Select } from 'antd';\nimport PropTypes, { object } from 'prop-types';\n\nconst { Option } = Select;\nclass FormSelect extends Component {\n\n  option = () => {\n    const {option = []} = this.props;\n    return option.map((v) => {\n      const {showValue, severKey} = v;\n      return <Option value={severKey} key={severKey}>{showValue}</Option>\n    })\n  }\n\n  selectCurrency = (e) => {\n    const {onChange} = this.props\n    onChange(e)\n  }\n\n  render() {\n    const {message, value, disabled} = this.props;\n    return (\n      <Select disabled={disabled} value={value} placeholder={message} style={{width: '170px'}} onSelect={this.selectCurrency}>\n        {this.option()}\n      </Select>    \n      );\n  }\n}\n\nFormSelect.propsType = {\n  disabled: PropTypes.bool, // 是否不可选\n  message: PropTypes.string, // 默认文字（placeholder\n  option: PropTypes.arrayOf(object), // 选择框的选项\n}\n\nFormSelect.defalutProps = {\n  disabled: false,\n  message: '',\n  option: [],\n}\n\nexport default FormSelect;\n```\n\n - **FormTextArea**\n\n```\n/*\n * @Author: Derrick \n * @Date: 2019-04-23 10:20:36 \n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-23 10:21:33\n */\nimport React, { Component } from 'react';\nimport { Input } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst { TextArea } = Input;\nclass FormTextArea extends Component {\n\n  change = (e) => {\n    const {onChange} = this.props;\n    onChange(e)\n  }\n\n  render() {\n    const {message, value, disabled} = this.props;\n    return (\n      <TextArea rows={4} disabled={disabled} placeholder={message} value={value} onChange={this.change} />\n      );\n  }\n}\n\nFormTextArea.propsType = {\n  disabled: PropTypes.bool, // 是否不可选\n  message: PropTypes.string, // 默认文字（placeholder\n}\n\nFormTextArea.defalutProps = {\n  disabled: false,\n  message: '',\n}\n\nexport default FormTextArea;\n```\n\n\n## 核心\n\n\n```\nconst {onChange} = this.props;\nonChange(XX)\n```\n\n\n这个onChange是可以直接改变FormItem的值。\n\n接下来可以加入您自己喜欢的组件，都是大同小异，基本上都离不开这个onChange。\n\n\n以上就是本人最近封装的一个组件，我感觉很好用所以想分享出来。\n","source":"_posts/ant-design-Form-组件总结-结合Modal-自定义Modal的实现-（Upload-Input-Select-DatePicker-Cascader）.md","raw":"---\ntitle: >-\n  Ant Design Form 组件总结 结合Modal 自定义Modal的实现 （Upload Input Select DatePicker\n  Cascader）\ndate: 2019-06-19 10:24:07\ntags: [Ant-Design-Form, Ant-Design组件合集]\ncategory: [Ant-Design, JavaScript]\ncover: /image/cover/ANTD.png\n---\n\n## 起源\n\n最近在项目中发现要写多个弹框（用于查看、编辑、新建XX信息），如下图。\n\n![测试图片](/image/AntDesignForm总结/modal.png)\n\n像这样花里胡哨的弹框在一个大型的中台管理系统中，可能要写上好几遍的Modal\n但是其实他们大同小异。\n\n首先，他们的title是固定的（增、改、查）\n\n底下的内容也是固定的，无非就是Upload Input Select DatePicker Cascader\n\n（写不了<>。其实应该是ant design 的组件）\n\n\n## 改进\n\n所以我想自己写一个ModalView的组件。只需要传入这上面的数据类型，title之类的数据就可以完成渲染。\n\n如下，这个是我项目中的一个例子\n\n\n```\n<ModalView \n          onOk={this.edit}     // 点击Modal确定时的回调\n          onCancel={this.hideModal}   // 点击Modal取消，或者点击mask时的回调\n          show={visible}        // Modal的显隐\n          category={category}      // Modal的title，通过category来判断（目前只有查看、编辑、新增）\n          data={fStaffManage}     // 自定义Modal的核心，整个Modal的渲染\n          showData={showData}    // 点击查看和编辑时的默认数据\n/>\n```\n\n\n接下来是fStaffManage的数据结构\n\n\n```\nexport const fStaffManage = [\n  {\n    label: '员工编号（自动生成）',\n    key: 'id',\n    type: 'input',\n    Message: '请输入员工编号',\n    disabled: true,\n  },\n  {\n    label: '门店',\n    key: 'storeNo',\n    type: 'select',\n    Message: '请选择门店',\n    option: [],\n  },\n  {\n    label: '员工姓名',\n    key: 'userName',\n    type: 'input',\n    Message: '请输入员工姓名',\n  },\n  {\n    label: '角色类型',\n    key: 'roleCodes',\n    type: 'select',\n    Message: '请选择角色类型',\n    option: [{ severKey: '店员', showValue: '店员' }, { severKey: '店长', showValue: '店长' }],\n  },\n  {\n    label: '联系电话',\n    key: 'mobile',\n    type: 'input',\n    Message: '请输入联系电话',\n    pattern: '^1[34578]\\\\d{9}$',\n  },\n  {\n    label: '测试上传图片',\n    key: 'testImgUpload',\n    type: 'imageUpload',\n    Message: '请上传图片',\n  },\n];\n```\n**Message**  是用于Form表单的提示用于以及placeholder\n\n**label**   是用于Form的label\n\n**key**   是用于map循环时的key（防止warning和提升效率）\n\n**type**   是用于显示那种类型的组件\n\n**pattern**   是用于Form表单检测的正则表达式\n\n\n```\n/*\n * @Author: Derrick\n * @Date: 2019-04-04 16:53:05\n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-28 15:48:04\n */\nimport React, { PureComponent } from 'react';\nimport { Modal, Form, Button, Table, Upload, message, Row, Select } from 'antd';\nimport { connect } from 'dva';\nimport PropTypes from 'prop-types';\nimport componentAuth from '@/common/ComponentAuth';\nimport FormSelect from '@/common/FormItems/FormSelect';\nimport FormInput from '@/common/FormItems/FormInput';\nimport FormDataPicker from '@/common/FormItems/FormDataPicker';\nimport FormCascader from '@/common/FormItems/FormCascader';\nimport FormTextArea from '@/common/FormItems/FormTextArea';\nimport FormImageUpload from '@/common/FormItems/FormImageUpload';\nimport { HEADER_BASE, SEVER_URL_BASE } from '@/utils/constant';\nimport Col from 'antd/es/col';\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 5 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\nconst { Item } = Form;\nconst { Option } = Select;\n\n@connect(({ mIdentifyCenter }) => ({\n  mIdentifyCenter\n}))\nclass ModalView extends PureComponent {\n  state = {\n    data: [],\n    storeId: '',\n  };\n\n  // 返回title\n  caseCategory = category => {\n    switch (category) {\n      case 'check':\n        return { title: '查看' };\n      case 'import':\n        return { title: '导入', import: true };\n      case 'create':\n        return { title: '新增' };\n      case 'edit':\n        return { title: '编辑' };\n      default:\n        return { title: '查看' };\n    }\n  };\n\n  showLabel = (type, label) => {\n    const { category } = this.props;\n\n    if (category === 'search') {\n      if (type !== 'datePicker') {\n        return undefined;\n      }\n      return label;\n    }\n    return label;\n  };\n\n  showRequire = disabled => {\n    const { category } = this.props;\n    if (category === 'search') {\n      return false;\n    }\n    if (disabled) {\n      return false;\n    }\n    return true;\n  };\n\n  form = () => {\n    const {\n      form: { getFieldDecorator },\n      data,\n      showData,\n      category,\n    } = this.props;\n\n    let ShowType;\n\n    return data.map(value => {\n      const { label, key, type, Message, option, disabled, pattern } = value;\n      if (!value) {\n        return null;\n      }\n      switch (type) {\n        case 'input':\n          ShowType = FormInput;\n          break;\n        case 'select':\n          ShowType = FormSelect;\n          break;\n        case 'datePicker':\n          ShowType = FormDataPicker;\n          break;\n        case 'cascader':\n          ShowType = FormCascader;\n          showData.region = [showData.provinceId, showData.cityId, showData.countyId];\n          break;\n        case 'textArea':\n          ShowType = FormTextArea;\n          break;\n        case 'imageUpload':\n          ShowType = FormImageUpload;\n          break;\n        default:\n          ShowType = null;\n      }\n      return (\n        <Item label={this.showLabel(type, label)} key={key}>\n          {getFieldDecorator(key, {\n            rules: [\n              {\n                required: this.showRequire(disabled),\n                message: Message,\n                pattern: pattern || undefined,\n                type: type === 'cascader' ? 'array' : 'string',\n              },\n            ],\n            initialValue: showData[key] ? showData[key] : undefined,\n          })(\n            <ShowType\n              option={option}\n              message={Message}\n              disabled={!!(disabled || category === 'check')}\n            />\n          )}\n        </Item>\n      );\n    });\n  };\n\n  checkOk = () => {\n    const { onOk, form } = this.props;\n    form.validateFields((err, fieldsValue) => {\n      if (!err) {\n        onOk(fieldsValue);\n      }\n    });\n  };\n  \n  closeModal = () => {\n    const { onCancel, form: { resetFields } } = this.props;\n    resetFields();\n    onCancel();\n  }\n\n  render() {\n    const { data } = this.state;\n    const { show, category = '', importColums, downloadUrl } = this.props;\n    const modalData = this.caseCategory(category);\n    return (\n      <Modal\n        visible={show}\n        onCancel={this.closeModal}\n        onOk={category === 'import' ? this.importOk : this.checkOk}\n        title={modalData.title}\n        width=\"70%\"\n        footer={modalData.title === '查看' ? null : undefined}\n      >\n          <Form style={{ paddingTop: '20px' }} {...formItemLayout}>\n            {this.form()}\n          </Form>\n      </Modal>\n    );\n  }\n}\n\nModalView.propTypes = {\n  onOk: PropTypes.func.isRequired, // 弹框点击确定\n  onCancel: PropTypes.func.isRequired, // 隐藏弹框\n  show: PropTypes.bool, // 是否显示弹窗\n  category: PropTypes.string, // 弹框的类型（title显示\n  data: PropTypes.arrayOf(PropTypes.object).isRequired, // 数据类型; 位置:'@/common/constant/sormView.js' 记得写注释; 格式: `s${文件名}`\n  showData: PropTypes.object, // 查看或者编辑时的默认数据\n  importCallBack: PropTypes.func, // 导入之后，点击确定的回调函数\n  importColums: PropTypes.array, // 导入时候显示表格的表头\n  downloadUrl: PropTypes.string, // 下载的模板的文件名\n};\n\nModalView.defaultProps = {\n  show: false,\n  category: 'check',\n  showData: {},\n  importCallBack: () => {},\n  importColums: [],\n  downloadUrl: '',\n};\n\nexport default Form.create()(ModalView);\n```\n\n - **FormCascader**\n\n```\n/*\n * @Author: Derrick \n * @Date: 2019-04-11 09:57:54 \n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-28 16:52:57\n */\nimport React, { Component } from 'react';\nimport { Cascader } from 'antd';\nimport PropTypes from 'prop-types';\nimport regionData from '@/constant/regionData'\n\nclass FormCascader extends Component {\n\n  change = (e) => {\n    const {onChange} = this.props;\n    onChange(e)\n  }\n\n  render() {\n    const {value, disabled, message} = this.props;\n    return (\n      <Cascader placeholder={message} options={regionData} disabled={disabled} value={value} onChange={this.change} />\n    );\n  }\n}\n\nFormCascader.propsType = {\n  disabled: PropTypes.bool, // 是否不可选\n  message: PropTypes.string, // 默认文字（placeholder\n}\n\nFormCascader.defalutProps = {\n  disabled: false,\n  message: '',\n}\n\nexport default FormCascader;\n```\n\n - **FormDataPicker**\n\n```\n/*\n * @Author: Derrick \n * @Date: 2019-04-10 10:57:08 \n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-15 14:28:40\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DatePicker } from 'antd';\n\nclass FormDataPicker extends Component {\n\n  change = (e) => {\n    const {onChange} = this.props\n    onChange(e)\n  }\n\n  render() {\n    const {value, disabled} = this.props;\n    return (\n      <DatePicker disabled={disabled} value={value} onChange={this.change} />\n      );\n  }\n}\n\nFormDataPicker.propsType = {\n  disabled: PropTypes.bool, // 是否不可选\n}\n\nFormDataPicker.defalutProps = {\n  disabled: false,\n}\n\nexport default FormDataPicker;\n```\n\n - **FormImageUpload**\n\n```\n/*\n * @Author: Derrick \n * @Date: 2019-04-26 14:20:20 \n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-28 18:11:44\n */\nimport React, { PureComponent } from 'react';\nimport { Upload, Icon, message } from 'antd';\nimport { PICTURE_UPLOAD, HEADER_BASE } from '@/utils/constant';\n\nclass FormImageUpload extends PureComponent {\n\n  state = {\n    loading: false,\n  };\n\n  uploadButton = () => {\n    const { loading } = this.state;\n    return (\n      <div>\n        <Icon type={loading ? 'loading' : 'plus'} />\n        <div className=\"ant-upload-text\">Upload</div>\n      </div>\n    )\n  }\n\n  handleChange = (info) => {\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    if (info.file.status === 'done') {\n      const {onChange} = this.props\n      this.setState({imageUrl: info.file.response.data[0], loading: false,})\n      onChange(info.file.response.data[0])\n    }\n  }\n\n  beforeUpload = (file) => {\n    const isJPG = file.type === 'image/jpeg';\n    if (!isJPG) {\n      message.error('只能上传JPG的图片!');\n    }\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n      message.error('图片大小不能大于2MB!');\n    }\n    return isJPG && isLt2M;\n  }\n\n  upLoadProps = () => {\n    HEADER_BASE.user_id = window.sessionStorage.getItem('userId');\n    HEADER_BASE.token_id = window.sessionStorage.getItem('tokenId');\n    const props = {\n      name: 'file',\n      action: PICTURE_UPLOAD,\n      headers: HEADER_BASE,\n      onChange: this.handleChange,\n      showUploadList: false,\n      beforeUpload: this.beforeUpload,\n    };\n    return props;\n  };\n\n  render() {\n    \n    const { imageUrl } = this.state;\n\n    return (\n      <Upload\n        listType=\"picture-card\"\n        {...this.upLoadProps()}\n\n      >\n        {imageUrl ? <img src={imageUrl} alt=\"avatar\" /> : this.uploadButton()}\n      </Upload>\n    )\n  }\n}\n\nexport default FormImageUpload;\n```\n\n - **FormInput**\n\n```\n/*\n * @Author: Derrick \n * @Date: 2019-04-10 10:57:08 \n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-15 14:46:23\n */\nimport React, { Component } from 'react';\nimport { Input } from 'antd';\nimport PropTypes from 'prop-types';\n\nclass FormInput extends Component {\n\n  change = (e) => {\n    const {onChange} = this.props;\n    onChange(e)\n  }\n\n  render() {\n    const {message, value, disabled} = this.props;\n    return (\n      <Input disabled={disabled} placeholder={message} value={value} onChange={this.change} />\n      );\n  }\n}\n\nFormInput.propsType = {\n  disabled: PropTypes.bool, // 是否不可选\n  message: PropTypes.string, // 默认文字（placeholder\n}\n\nFormInput.defalutProps = {\n  disabled: false,\n  message: '',\n}\n\nexport default FormInput;\n```\n\n\n - **FormSelect**\n\n\n```\n/*\n * @Author: Derrick \n * @Date: 2019-04-10 10:13:58 \n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-28 15:59:22\n */\nimport React, { Component } from 'react';\nimport { Select } from 'antd';\nimport PropTypes, { object } from 'prop-types';\n\nconst { Option } = Select;\nclass FormSelect extends Component {\n\n  option = () => {\n    const {option = []} = this.props;\n    return option.map((v) => {\n      const {showValue, severKey} = v;\n      return <Option value={severKey} key={severKey}>{showValue}</Option>\n    })\n  }\n\n  selectCurrency = (e) => {\n    const {onChange} = this.props\n    onChange(e)\n  }\n\n  render() {\n    const {message, value, disabled} = this.props;\n    return (\n      <Select disabled={disabled} value={value} placeholder={message} style={{width: '170px'}} onSelect={this.selectCurrency}>\n        {this.option()}\n      </Select>    \n      );\n  }\n}\n\nFormSelect.propsType = {\n  disabled: PropTypes.bool, // 是否不可选\n  message: PropTypes.string, // 默认文字（placeholder\n  option: PropTypes.arrayOf(object), // 选择框的选项\n}\n\nFormSelect.defalutProps = {\n  disabled: false,\n  message: '',\n  option: [],\n}\n\nexport default FormSelect;\n```\n\n - **FormTextArea**\n\n```\n/*\n * @Author: Derrick \n * @Date: 2019-04-23 10:20:36 \n * @Last Modified by: Derrick\n * @Last Modified time: 2019-04-23 10:21:33\n */\nimport React, { Component } from 'react';\nimport { Input } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst { TextArea } = Input;\nclass FormTextArea extends Component {\n\n  change = (e) => {\n    const {onChange} = this.props;\n    onChange(e)\n  }\n\n  render() {\n    const {message, value, disabled} = this.props;\n    return (\n      <TextArea rows={4} disabled={disabled} placeholder={message} value={value} onChange={this.change} />\n      );\n  }\n}\n\nFormTextArea.propsType = {\n  disabled: PropTypes.bool, // 是否不可选\n  message: PropTypes.string, // 默认文字（placeholder\n}\n\nFormTextArea.defalutProps = {\n  disabled: false,\n  message: '',\n}\n\nexport default FormTextArea;\n```\n\n\n## 核心\n\n\n```\nconst {onChange} = this.props;\nonChange(XX)\n```\n\n\n这个onChange是可以直接改变FormItem的值。\n\n接下来可以加入您自己喜欢的组件，都是大同小异，基本上都离不开这个onChange。\n\n\n以上就是本人最近封装的一个组件，我感觉很好用所以想分享出来。\n","slug":"ant-design-Form-组件总结-结合Modal-自定义Modal的实现-（Upload-Input-Select-DatePicker-Cascader）","published":1,"updated":"2020-04-11T13:56:14.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vq63890035s9vm9cuy5qx6","content":"<h2 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h2><p>最近在项目中发现要写多个弹框（用于查看、编辑、新建XX信息），如下图。</p>\n<p><img src=\"/\" class=\"lazyload\" data-src=\"/image/AntDesignForm%E6%80%BB%E7%BB%93/modal.png\"  alt=\"测试图片\"></p>\n<p>像这样花里胡哨的弹框在一个大型的中台管理系统中，可能要写上好几遍的Modal<br>但是其实他们大同小异。</p>\n<p>首先，他们的title是固定的（增、改、查）</p>\n<p>底下的内容也是固定的，无非就是Upload Input Select DatePicker Cascader</p>\n<p>（写不了&lt;&gt;。其实应该是ant design 的组件）</p>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><p>所以我想自己写一个ModalView的组件。只需要传入这上面的数据类型，title之类的数据就可以完成渲染。</p>\n<p>如下，这个是我项目中的一个例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ModalView </span><br><span class=\"line\">          onOk&#x3D;&#123;this.edit&#125;     &#x2F;&#x2F; 点击Modal确定时的回调</span><br><span class=\"line\">          onCancel&#x3D;&#123;this.hideModal&#125;   &#x2F;&#x2F; 点击Modal取消，或者点击mask时的回调</span><br><span class=\"line\">          show&#x3D;&#123;visible&#125;        &#x2F;&#x2F; Modal的显隐</span><br><span class=\"line\">          category&#x3D;&#123;category&#125;      &#x2F;&#x2F; Modal的title，通过category来判断（目前只有查看、编辑、新增）</span><br><span class=\"line\">          data&#x3D;&#123;fStaffManage&#125;     &#x2F;&#x2F; 自定义Modal的核心，整个Modal的渲染</span><br><span class=\"line\">          showData&#x3D;&#123;showData&#125;    &#x2F;&#x2F; 点击查看和编辑时的默认数据</span><br><span class=\"line\">&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>接下来是fStaffManage的数据结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const fStaffManage &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: &#39;员工编号（自动生成）&#39;,</span><br><span class=\"line\">    key: &#39;id&#39;,</span><br><span class=\"line\">    type: &#39;input&#39;,</span><br><span class=\"line\">    Message: &#39;请输入员工编号&#39;,</span><br><span class=\"line\">    disabled: true,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: &#39;门店&#39;,</span><br><span class=\"line\">    key: &#39;storeNo&#39;,</span><br><span class=\"line\">    type: &#39;select&#39;,</span><br><span class=\"line\">    Message: &#39;请选择门店&#39;,</span><br><span class=\"line\">    option: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: &#39;员工姓名&#39;,</span><br><span class=\"line\">    key: &#39;userName&#39;,</span><br><span class=\"line\">    type: &#39;input&#39;,</span><br><span class=\"line\">    Message: &#39;请输入员工姓名&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: &#39;角色类型&#39;,</span><br><span class=\"line\">    key: &#39;roleCodes&#39;,</span><br><span class=\"line\">    type: &#39;select&#39;,</span><br><span class=\"line\">    Message: &#39;请选择角色类型&#39;,</span><br><span class=\"line\">    option: [&#123; severKey: &#39;店员&#39;, showValue: &#39;店员&#39; &#125;, &#123; severKey: &#39;店长&#39;, showValue: &#39;店长&#39; &#125;],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: &#39;联系电话&#39;,</span><br><span class=\"line\">    key: &#39;mobile&#39;,</span><br><span class=\"line\">    type: &#39;input&#39;,</span><br><span class=\"line\">    Message: &#39;请输入联系电话&#39;,</span><br><span class=\"line\">    pattern: &#39;^1[34578]\\\\d&#123;9&#125;$&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: &#39;测试上传图片&#39;,</span><br><span class=\"line\">    key: &#39;testImgUpload&#39;,</span><br><span class=\"line\">    type: &#39;imageUpload&#39;,</span><br><span class=\"line\">    Message: &#39;请上传图片&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p><strong>Message</strong>  是用于Form表单的提示用于以及placeholder</p>\n<p><strong>label</strong>   是用于Form的label</p>\n<p><strong>key</strong>   是用于map循环时的key（防止warning和提升效率）</p>\n<p><strong>type</strong>   是用于显示那种类型的组件</p>\n<p><strong>pattern</strong>   是用于Form表单检测的正则表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick</span><br><span class=\"line\"> * @Date: 2019-04-04 16:53:05</span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-28 15:48:04</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; PureComponent &#125; from &#39;react&#39;;</span><br><span class=\"line\">import &#123; Modal, Form, Button, Table, Upload, message, Row, Select &#125; from &#39;antd&#39;;</span><br><span class=\"line\">import &#123; connect &#125; from &#39;dva&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;;</span><br><span class=\"line\">import componentAuth from &#39;@&#x2F;common&#x2F;ComponentAuth&#39;;</span><br><span class=\"line\">import FormSelect from &#39;@&#x2F;common&#x2F;FormItems&#x2F;FormSelect&#39;;</span><br><span class=\"line\">import FormInput from &#39;@&#x2F;common&#x2F;FormItems&#x2F;FormInput&#39;;</span><br><span class=\"line\">import FormDataPicker from &#39;@&#x2F;common&#x2F;FormItems&#x2F;FormDataPicker&#39;;</span><br><span class=\"line\">import FormCascader from &#39;@&#x2F;common&#x2F;FormItems&#x2F;FormCascader&#39;;</span><br><span class=\"line\">import FormTextArea from &#39;@&#x2F;common&#x2F;FormItems&#x2F;FormTextArea&#39;;</span><br><span class=\"line\">import FormImageUpload from &#39;@&#x2F;common&#x2F;FormItems&#x2F;FormImageUpload&#39;;</span><br><span class=\"line\">import &#123; HEADER_BASE, SEVER_URL_BASE &#125; from &#39;@&#x2F;utils&#x2F;constant&#39;;</span><br><span class=\"line\">import Col from &#39;antd&#x2F;es&#x2F;col&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">const formItemLayout &#x3D; &#123;</span><br><span class=\"line\">  labelCol: &#123;</span><br><span class=\"line\">    xs: &#123; span: 24 &#125;,</span><br><span class=\"line\">    sm: &#123; span: 5 &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  wrapperCol: &#123;</span><br><span class=\"line\">    xs: &#123; span: 24 &#125;,</span><br><span class=\"line\">    sm: &#123; span: 16 &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const &#123; Item &#125; &#x3D; Form;</span><br><span class=\"line\">const &#123; Option &#125; &#x3D; Select;</span><br><span class=\"line\"></span><br><span class=\"line\">@connect((&#123; mIdentifyCenter &#125;) &#x3D;&gt; (&#123;</span><br><span class=\"line\">  mIdentifyCenter</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">class ModalView extends PureComponent &#123;</span><br><span class=\"line\">  state &#x3D; &#123;</span><br><span class=\"line\">    data: [],</span><br><span class=\"line\">    storeId: &#39;&#39;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 返回title</span><br><span class=\"line\">  caseCategory &#x3D; category &#x3D;&gt; &#123;</span><br><span class=\"line\">    switch (category) &#123;</span><br><span class=\"line\">      case &#39;check&#39;:</span><br><span class=\"line\">        return &#123; title: &#39;查看&#39; &#125;;</span><br><span class=\"line\">      case &#39;import&#39;:</span><br><span class=\"line\">        return &#123; title: &#39;导入&#39;, import: true &#125;;</span><br><span class=\"line\">      case &#39;create&#39;:</span><br><span class=\"line\">        return &#123; title: &#39;新增&#39; &#125;;</span><br><span class=\"line\">      case &#39;edit&#39;:</span><br><span class=\"line\">        return &#123; title: &#39;编辑&#39; &#125;;</span><br><span class=\"line\">      default:</span><br><span class=\"line\">        return &#123; title: &#39;查看&#39; &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  showLabel &#x3D; (type, label) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123; category &#125; &#x3D; this.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (category &#x3D;&#x3D;&#x3D; &#39;search&#39;) &#123;</span><br><span class=\"line\">      if (type !&#x3D;&#x3D; &#39;datePicker&#39;) &#123;</span><br><span class=\"line\">        return undefined;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return label;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return label;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  showRequire &#x3D; disabled &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123; category &#125; &#x3D; this.props;</span><br><span class=\"line\">    if (category &#x3D;&#x3D;&#x3D; &#39;search&#39;) &#123;</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (disabled) &#123;</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  form &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;</span><br><span class=\"line\">      form: &#123; getFieldDecorator &#125;,</span><br><span class=\"line\">      data,</span><br><span class=\"line\">      showData,</span><br><span class=\"line\">      category,</span><br><span class=\"line\">    &#125; &#x3D; this.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    let ShowType;</span><br><span class=\"line\"></span><br><span class=\"line\">    return data.map(value &#x3D;&gt; &#123;</span><br><span class=\"line\">      const &#123; label, key, type, Message, option, disabled, pattern &#125; &#x3D; value;</span><br><span class=\"line\">      if (!value) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      switch (type) &#123;</span><br><span class=\"line\">        case &#39;input&#39;:</span><br><span class=\"line\">          ShowType &#x3D; FormInput;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        case &#39;select&#39;:</span><br><span class=\"line\">          ShowType &#x3D; FormSelect;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        case &#39;datePicker&#39;:</span><br><span class=\"line\">          ShowType &#x3D; FormDataPicker;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        case &#39;cascader&#39;:</span><br><span class=\"line\">          ShowType &#x3D; FormCascader;</span><br><span class=\"line\">          showData.region &#x3D; [showData.provinceId, showData.cityId, showData.countyId];</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        case &#39;textArea&#39;:</span><br><span class=\"line\">          ShowType &#x3D; FormTextArea;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        case &#39;imageUpload&#39;:</span><br><span class=\"line\">          ShowType &#x3D; FormImageUpload;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">          ShowType &#x3D; null;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return (</span><br><span class=\"line\">        &lt;Item label&#x3D;&#123;this.showLabel(type, label)&#125; key&#x3D;&#123;key&#125;&gt;</span><br><span class=\"line\">          &#123;getFieldDecorator(key, &#123;</span><br><span class=\"line\">            rules: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                required: this.showRequire(disabled),</span><br><span class=\"line\">                message: Message,</span><br><span class=\"line\">                pattern: pattern || undefined,</span><br><span class=\"line\">                type: type &#x3D;&#x3D;&#x3D; &#39;cascader&#39; ? &#39;array&#39; : &#39;string&#39;,</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            initialValue: showData[key] ? showData[key] : undefined,</span><br><span class=\"line\">          &#125;)(</span><br><span class=\"line\">            &lt;ShowType</span><br><span class=\"line\">              option&#x3D;&#123;option&#125;</span><br><span class=\"line\">              message&#x3D;&#123;Message&#125;</span><br><span class=\"line\">              disabled&#x3D;&#123;!!(disabled || category &#x3D;&#x3D;&#x3D; &#39;check&#39;)&#125;</span><br><span class=\"line\">            &#x2F;&gt;</span><br><span class=\"line\">          )&#125;</span><br><span class=\"line\">        &lt;&#x2F;Item&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  checkOk &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123; onOk, form &#125; &#x3D; this.props;</span><br><span class=\"line\">    form.validateFields((err, fieldsValue) &#x3D;&gt; &#123;</span><br><span class=\"line\">      if (!err) &#123;</span><br><span class=\"line\">        onOk(fieldsValue);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  closeModal &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123; onCancel, form: &#123; resetFields &#125; &#125; &#x3D; this.props;</span><br><span class=\"line\">    resetFields();</span><br><span class=\"line\">    onCancel();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123; data &#125; &#x3D; this.state;</span><br><span class=\"line\">    const &#123; show, category &#x3D; &#39;&#39;, importColums, downloadUrl &#125; &#x3D; this.props;</span><br><span class=\"line\">    const modalData &#x3D; this.caseCategory(category);</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Modal</span><br><span class=\"line\">        visible&#x3D;&#123;show&#125;</span><br><span class=\"line\">        onCancel&#x3D;&#123;this.closeModal&#125;</span><br><span class=\"line\">        onOk&#x3D;&#123;category &#x3D;&#x3D;&#x3D; &#39;import&#39; ? this.importOk : this.checkOk&#125;</span><br><span class=\"line\">        title&#x3D;&#123;modalData.title&#125;</span><br><span class=\"line\">        width&#x3D;&quot;70%&quot;</span><br><span class=\"line\">        footer&#x3D;&#123;modalData.title &#x3D;&#x3D;&#x3D; &#39;查看&#39; ? null : undefined&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">          &lt;Form style&#x3D;&#123;&#123; paddingTop: &#39;20px&#39; &#125;&#125; &#123;...formItemLayout&#125;&gt;</span><br><span class=\"line\">            &#123;this.form()&#125;</span><br><span class=\"line\">          &lt;&#x2F;Form&gt;</span><br><span class=\"line\">      &lt;&#x2F;Modal&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ModalView.propTypes &#x3D; &#123;</span><br><span class=\"line\">  onOk: PropTypes.func.isRequired, &#x2F;&#x2F; 弹框点击确定</span><br><span class=\"line\">  onCancel: PropTypes.func.isRequired, &#x2F;&#x2F; 隐藏弹框</span><br><span class=\"line\">  show: PropTypes.bool, &#x2F;&#x2F; 是否显示弹窗</span><br><span class=\"line\">  category: PropTypes.string, &#x2F;&#x2F; 弹框的类型（title显示</span><br><span class=\"line\">  data: PropTypes.arrayOf(PropTypes.object).isRequired, &#x2F;&#x2F; 数据类型; 位置:&#39;@&#x2F;common&#x2F;constant&#x2F;sormView.js&#39; 记得写注释; 格式: &#96;s$&#123;文件名&#125;&#96;</span><br><span class=\"line\">  showData: PropTypes.object, &#x2F;&#x2F; 查看或者编辑时的默认数据</span><br><span class=\"line\">  importCallBack: PropTypes.func, &#x2F;&#x2F; 导入之后，点击确定的回调函数</span><br><span class=\"line\">  importColums: PropTypes.array, &#x2F;&#x2F; 导入时候显示表格的表头</span><br><span class=\"line\">  downloadUrl: PropTypes.string, &#x2F;&#x2F; 下载的模板的文件名</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ModalView.defaultProps &#x3D; &#123;</span><br><span class=\"line\">  show: false,</span><br><span class=\"line\">  category: &#39;check&#39;,</span><br><span class=\"line\">  showData: &#123;&#125;,</span><br><span class=\"line\">  importCallBack: () &#x3D;&gt; &#123;&#125;,</span><br><span class=\"line\">  importColums: [],</span><br><span class=\"line\">  downloadUrl: &#39;&#39;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Form.create()(ModalView);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>FormCascader</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick </span><br><span class=\"line\"> * @Date: 2019-04-11 09:57:54 </span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-28 16:52:57</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class=\"line\">import &#123; Cascader &#125; from &#39;antd&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;;</span><br><span class=\"line\">import regionData from &#39;@&#x2F;constant&#x2F;regionData&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">class FormCascader extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  change &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;onChange&#125; &#x3D; this.props;</span><br><span class=\"line\">    onChange(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;value, disabled, message&#125; &#x3D; this.props;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Cascader placeholder&#x3D;&#123;message&#125; options&#x3D;&#123;regionData&#125; disabled&#x3D;&#123;disabled&#125; value&#x3D;&#123;value&#125; onChange&#x3D;&#123;this.change&#125; &#x2F;&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormCascader.propsType &#x3D; &#123;</span><br><span class=\"line\">  disabled: PropTypes.bool, &#x2F;&#x2F; 是否不可选</span><br><span class=\"line\">  message: PropTypes.string, &#x2F;&#x2F; 默认文字（placeholder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormCascader.defalutProps &#x3D; &#123;</span><br><span class=\"line\">  disabled: false,</span><br><span class=\"line\">  message: &#39;&#39;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormCascader;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>FormDataPicker</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick </span><br><span class=\"line\"> * @Date: 2019-04-10 10:57:08 </span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-15 14:28:40</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;;</span><br><span class=\"line\">import &#123; DatePicker &#125; from &#39;antd&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">class FormDataPicker extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  change &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;onChange&#125; &#x3D; this.props</span><br><span class=\"line\">    onChange(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;value, disabled&#125; &#x3D; this.props;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;DatePicker disabled&#x3D;&#123;disabled&#125; value&#x3D;&#123;value&#125; onChange&#x3D;&#123;this.change&#125; &#x2F;&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormDataPicker.propsType &#x3D; &#123;</span><br><span class=\"line\">  disabled: PropTypes.bool, &#x2F;&#x2F; 是否不可选</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormDataPicker.defalutProps &#x3D; &#123;</span><br><span class=\"line\">  disabled: false,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormDataPicker;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>FormImageUpload</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick </span><br><span class=\"line\"> * @Date: 2019-04-26 14:20:20 </span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-28 18:11:44</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; PureComponent &#125; from &#39;react&#39;;</span><br><span class=\"line\">import &#123; Upload, Icon, message &#125; from &#39;antd&#39;;</span><br><span class=\"line\">import &#123; PICTURE_UPLOAD, HEADER_BASE &#125; from &#39;@&#x2F;utils&#x2F;constant&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">class FormImageUpload extends PureComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  state &#x3D; &#123;</span><br><span class=\"line\">    loading: false,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  uploadButton &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123; loading &#125; &#x3D; this.state;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Icon type&#x3D;&#123;loading ? &#39;loading&#39; : &#39;plus&#39;&#125; &#x2F;&gt;</span><br><span class=\"line\">        &lt;div className&#x3D;&quot;ant-upload-text&quot;&gt;Upload&lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange &#x3D; (info) &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (info.file.status &#x3D;&#x3D;&#x3D; &#39;uploading&#39;) &#123;</span><br><span class=\"line\">      this.setState(&#123; loading: true &#125;);</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (info.file.status &#x3D;&#x3D;&#x3D; &#39;done&#39;) &#123;</span><br><span class=\"line\">      const &#123;onChange&#125; &#x3D; this.props</span><br><span class=\"line\">      this.setState(&#123;imageUrl: info.file.response.data[0], loading: false,&#125;)</span><br><span class=\"line\">      onChange(info.file.response.data[0])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  beforeUpload &#x3D; (file) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const isJPG &#x3D; file.type &#x3D;&#x3D;&#x3D; &#39;image&#x2F;jpeg&#39;;</span><br><span class=\"line\">    if (!isJPG) &#123;</span><br><span class=\"line\">      message.error(&#39;只能上传JPG的图片!&#39;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const isLt2M &#x3D; file.size &#x2F; 1024 &#x2F; 1024 &lt; 2;</span><br><span class=\"line\">    if (!isLt2M) &#123;</span><br><span class=\"line\">      message.error(&#39;图片大小不能大于2MB!&#39;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return isJPG &amp;&amp; isLt2M;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  upLoadProps &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    HEADER_BASE.user_id &#x3D; window.sessionStorage.getItem(&#39;userId&#39;);</span><br><span class=\"line\">    HEADER_BASE.token_id &#x3D; window.sessionStorage.getItem(&#39;tokenId&#39;);</span><br><span class=\"line\">    const props &#x3D; &#123;</span><br><span class=\"line\">      name: &#39;file&#39;,</span><br><span class=\"line\">      action: PICTURE_UPLOAD,</span><br><span class=\"line\">      headers: HEADER_BASE,</span><br><span class=\"line\">      onChange: this.handleChange,</span><br><span class=\"line\">      showUploadList: false,</span><br><span class=\"line\">      beforeUpload: this.beforeUpload,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return props;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    const &#123; imageUrl &#125; &#x3D; this.state;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Upload</span><br><span class=\"line\">        listType&#x3D;&quot;picture-card&quot;</span><br><span class=\"line\">        &#123;...this.upLoadProps()&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &#123;imageUrl ? &lt;img src&#x3D;&#123;imageUrl&#125; alt&#x3D;&quot;avatar&quot; &#x2F;&gt; : this.uploadButton()&#125;</span><br><span class=\"line\">      &lt;&#x2F;Upload&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormImageUpload;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>FormInput</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick </span><br><span class=\"line\"> * @Date: 2019-04-10 10:57:08 </span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-15 14:46:23</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class=\"line\">import &#123; Input &#125; from &#39;antd&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">class FormInput extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  change &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;onChange&#125; &#x3D; this.props;</span><br><span class=\"line\">    onChange(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;message, value, disabled&#125; &#x3D; this.props;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Input disabled&#x3D;&#123;disabled&#125; placeholder&#x3D;&#123;message&#125; value&#x3D;&#123;value&#125; onChange&#x3D;&#123;this.change&#125; &#x2F;&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormInput.propsType &#x3D; &#123;</span><br><span class=\"line\">  disabled: PropTypes.bool, &#x2F;&#x2F; 是否不可选</span><br><span class=\"line\">  message: PropTypes.string, &#x2F;&#x2F; 默认文字（placeholder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormInput.defalutProps &#x3D; &#123;</span><br><span class=\"line\">  disabled: false,</span><br><span class=\"line\">  message: &#39;&#39;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormInput;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><strong>FormSelect</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick </span><br><span class=\"line\"> * @Date: 2019-04-10 10:13:58 </span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-28 15:59:22</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class=\"line\">import &#123; Select &#125; from &#39;antd&#39;;</span><br><span class=\"line\">import PropTypes, &#123; object &#125; from &#39;prop-types&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; Option &#125; &#x3D; Select;</span><br><span class=\"line\">class FormSelect extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  option &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;option &#x3D; []&#125; &#x3D; this.props;</span><br><span class=\"line\">    return option.map((v) &#x3D;&gt; &#123;</span><br><span class=\"line\">      const &#123;showValue, severKey&#125; &#x3D; v;</span><br><span class=\"line\">      return &lt;Option value&#x3D;&#123;severKey&#125; key&#x3D;&#123;severKey&#125;&gt;&#123;showValue&#125;&lt;&#x2F;Option&gt;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  selectCurrency &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;onChange&#125; &#x3D; this.props</span><br><span class=\"line\">    onChange(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;message, value, disabled&#125; &#x3D; this.props;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Select disabled&#x3D;&#123;disabled&#125; value&#x3D;&#123;value&#125; placeholder&#x3D;&#123;message&#125; style&#x3D;&#123;&#123;width: &#39;170px&#39;&#125;&#125; onSelect&#x3D;&#123;this.selectCurrency&#125;&gt;</span><br><span class=\"line\">        &#123;this.option()&#125;</span><br><span class=\"line\">      &lt;&#x2F;Select&gt;    </span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormSelect.propsType &#x3D; &#123;</span><br><span class=\"line\">  disabled: PropTypes.bool, &#x2F;&#x2F; 是否不可选</span><br><span class=\"line\">  message: PropTypes.string, &#x2F;&#x2F; 默认文字（placeholder</span><br><span class=\"line\">  option: PropTypes.arrayOf(object), &#x2F;&#x2F; 选择框的选项</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormSelect.defalutProps &#x3D; &#123;</span><br><span class=\"line\">  disabled: false,</span><br><span class=\"line\">  message: &#39;&#39;,</span><br><span class=\"line\">  option: [],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormSelect;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>FormTextArea</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick </span><br><span class=\"line\"> * @Date: 2019-04-23 10:20:36 </span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-23 10:21:33</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class=\"line\">import &#123; Input &#125; from &#39;antd&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; TextArea &#125; &#x3D; Input;</span><br><span class=\"line\">class FormTextArea extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  change &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;onChange&#125; &#x3D; this.props;</span><br><span class=\"line\">    onChange(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;message, value, disabled&#125; &#x3D; this.props;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;TextArea rows&#x3D;&#123;4&#125; disabled&#x3D;&#123;disabled&#125; placeholder&#x3D;&#123;message&#125; value&#x3D;&#123;value&#125; onChange&#x3D;&#123;this.change&#125; &#x2F;&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormTextArea.propsType &#x3D; &#123;</span><br><span class=\"line\">  disabled: PropTypes.bool, &#x2F;&#x2F; 是否不可选</span><br><span class=\"line\">  message: PropTypes.string, &#x2F;&#x2F; 默认文字（placeholder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormTextArea.defalutProps &#x3D; &#123;</span><br><span class=\"line\">  disabled: false,</span><br><span class=\"line\">  message: &#39;&#39;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormTextArea;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123;onChange&#125; &#x3D; this.props;</span><br><span class=\"line\">onChange(XX)</span><br></pre></td></tr></table></figure>\n\n\n<p>这个onChange是可以直接改变FormItem的值。</p>\n<p>接下来可以加入您自己喜欢的组件，都是大同小异，基本上都离不开这个onChange。</p>\n<p>以上就是本人最近封装的一个组件，我感觉很好用所以想分享出来。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h2><p>最近在项目中发现要写多个弹框（用于查看、编辑、新建XX信息），如下图。</p>\n<p><img src=\"/image/AntDesignForm%E6%80%BB%E7%BB%93/modal.png\" alt=\"测试图片\"></p>\n<p>像这样花里胡哨的弹框在一个大型的中台管理系统中，可能要写上好几遍的Modal<br>但是其实他们大同小异。</p>\n<p>首先，他们的title是固定的（增、改、查）</p>\n<p>底下的内容也是固定的，无非就是Upload Input Select DatePicker Cascader</p>\n<p>（写不了&lt;&gt;。其实应该是ant design 的组件）</p>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><p>所以我想自己写一个ModalView的组件。只需要传入这上面的数据类型，title之类的数据就可以完成渲染。</p>\n<p>如下，这个是我项目中的一个例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ModalView </span><br><span class=\"line\">          onOk&#x3D;&#123;this.edit&#125;     &#x2F;&#x2F; 点击Modal确定时的回调</span><br><span class=\"line\">          onCancel&#x3D;&#123;this.hideModal&#125;   &#x2F;&#x2F; 点击Modal取消，或者点击mask时的回调</span><br><span class=\"line\">          show&#x3D;&#123;visible&#125;        &#x2F;&#x2F; Modal的显隐</span><br><span class=\"line\">          category&#x3D;&#123;category&#125;      &#x2F;&#x2F; Modal的title，通过category来判断（目前只有查看、编辑、新增）</span><br><span class=\"line\">          data&#x3D;&#123;fStaffManage&#125;     &#x2F;&#x2F; 自定义Modal的核心，整个Modal的渲染</span><br><span class=\"line\">          showData&#x3D;&#123;showData&#125;    &#x2F;&#x2F; 点击查看和编辑时的默认数据</span><br><span class=\"line\">&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>接下来是fStaffManage的数据结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const fStaffManage &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: &#39;员工编号（自动生成）&#39;,</span><br><span class=\"line\">    key: &#39;id&#39;,</span><br><span class=\"line\">    type: &#39;input&#39;,</span><br><span class=\"line\">    Message: &#39;请输入员工编号&#39;,</span><br><span class=\"line\">    disabled: true,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: &#39;门店&#39;,</span><br><span class=\"line\">    key: &#39;storeNo&#39;,</span><br><span class=\"line\">    type: &#39;select&#39;,</span><br><span class=\"line\">    Message: &#39;请选择门店&#39;,</span><br><span class=\"line\">    option: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: &#39;员工姓名&#39;,</span><br><span class=\"line\">    key: &#39;userName&#39;,</span><br><span class=\"line\">    type: &#39;input&#39;,</span><br><span class=\"line\">    Message: &#39;请输入员工姓名&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: &#39;角色类型&#39;,</span><br><span class=\"line\">    key: &#39;roleCodes&#39;,</span><br><span class=\"line\">    type: &#39;select&#39;,</span><br><span class=\"line\">    Message: &#39;请选择角色类型&#39;,</span><br><span class=\"line\">    option: [&#123; severKey: &#39;店员&#39;, showValue: &#39;店员&#39; &#125;, &#123; severKey: &#39;店长&#39;, showValue: &#39;店长&#39; &#125;],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: &#39;联系电话&#39;,</span><br><span class=\"line\">    key: &#39;mobile&#39;,</span><br><span class=\"line\">    type: &#39;input&#39;,</span><br><span class=\"line\">    Message: &#39;请输入联系电话&#39;,</span><br><span class=\"line\">    pattern: &#39;^1[34578]\\\\d&#123;9&#125;$&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: &#39;测试上传图片&#39;,</span><br><span class=\"line\">    key: &#39;testImgUpload&#39;,</span><br><span class=\"line\">    type: &#39;imageUpload&#39;,</span><br><span class=\"line\">    Message: &#39;请上传图片&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p><strong>Message</strong>  是用于Form表单的提示用于以及placeholder</p>\n<p><strong>label</strong>   是用于Form的label</p>\n<p><strong>key</strong>   是用于map循环时的key（防止warning和提升效率）</p>\n<p><strong>type</strong>   是用于显示那种类型的组件</p>\n<p><strong>pattern</strong>   是用于Form表单检测的正则表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick</span><br><span class=\"line\"> * @Date: 2019-04-04 16:53:05</span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-28 15:48:04</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; PureComponent &#125; from &#39;react&#39;;</span><br><span class=\"line\">import &#123; Modal, Form, Button, Table, Upload, message, Row, Select &#125; from &#39;antd&#39;;</span><br><span class=\"line\">import &#123; connect &#125; from &#39;dva&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;;</span><br><span class=\"line\">import componentAuth from &#39;@&#x2F;common&#x2F;ComponentAuth&#39;;</span><br><span class=\"line\">import FormSelect from &#39;@&#x2F;common&#x2F;FormItems&#x2F;FormSelect&#39;;</span><br><span class=\"line\">import FormInput from &#39;@&#x2F;common&#x2F;FormItems&#x2F;FormInput&#39;;</span><br><span class=\"line\">import FormDataPicker from &#39;@&#x2F;common&#x2F;FormItems&#x2F;FormDataPicker&#39;;</span><br><span class=\"line\">import FormCascader from &#39;@&#x2F;common&#x2F;FormItems&#x2F;FormCascader&#39;;</span><br><span class=\"line\">import FormTextArea from &#39;@&#x2F;common&#x2F;FormItems&#x2F;FormTextArea&#39;;</span><br><span class=\"line\">import FormImageUpload from &#39;@&#x2F;common&#x2F;FormItems&#x2F;FormImageUpload&#39;;</span><br><span class=\"line\">import &#123; HEADER_BASE, SEVER_URL_BASE &#125; from &#39;@&#x2F;utils&#x2F;constant&#39;;</span><br><span class=\"line\">import Col from &#39;antd&#x2F;es&#x2F;col&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">const formItemLayout &#x3D; &#123;</span><br><span class=\"line\">  labelCol: &#123;</span><br><span class=\"line\">    xs: &#123; span: 24 &#125;,</span><br><span class=\"line\">    sm: &#123; span: 5 &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  wrapperCol: &#123;</span><br><span class=\"line\">    xs: &#123; span: 24 &#125;,</span><br><span class=\"line\">    sm: &#123; span: 16 &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const &#123; Item &#125; &#x3D; Form;</span><br><span class=\"line\">const &#123; Option &#125; &#x3D; Select;</span><br><span class=\"line\"></span><br><span class=\"line\">@connect((&#123; mIdentifyCenter &#125;) &#x3D;&gt; (&#123;</span><br><span class=\"line\">  mIdentifyCenter</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">class ModalView extends PureComponent &#123;</span><br><span class=\"line\">  state &#x3D; &#123;</span><br><span class=\"line\">    data: [],</span><br><span class=\"line\">    storeId: &#39;&#39;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 返回title</span><br><span class=\"line\">  caseCategory &#x3D; category &#x3D;&gt; &#123;</span><br><span class=\"line\">    switch (category) &#123;</span><br><span class=\"line\">      case &#39;check&#39;:</span><br><span class=\"line\">        return &#123; title: &#39;查看&#39; &#125;;</span><br><span class=\"line\">      case &#39;import&#39;:</span><br><span class=\"line\">        return &#123; title: &#39;导入&#39;, import: true &#125;;</span><br><span class=\"line\">      case &#39;create&#39;:</span><br><span class=\"line\">        return &#123; title: &#39;新增&#39; &#125;;</span><br><span class=\"line\">      case &#39;edit&#39;:</span><br><span class=\"line\">        return &#123; title: &#39;编辑&#39; &#125;;</span><br><span class=\"line\">      default:</span><br><span class=\"line\">        return &#123; title: &#39;查看&#39; &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  showLabel &#x3D; (type, label) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123; category &#125; &#x3D; this.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (category &#x3D;&#x3D;&#x3D; &#39;search&#39;) &#123;</span><br><span class=\"line\">      if (type !&#x3D;&#x3D; &#39;datePicker&#39;) &#123;</span><br><span class=\"line\">        return undefined;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return label;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return label;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  showRequire &#x3D; disabled &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123; category &#125; &#x3D; this.props;</span><br><span class=\"line\">    if (category &#x3D;&#x3D;&#x3D; &#39;search&#39;) &#123;</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (disabled) &#123;</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  form &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;</span><br><span class=\"line\">      form: &#123; getFieldDecorator &#125;,</span><br><span class=\"line\">      data,</span><br><span class=\"line\">      showData,</span><br><span class=\"line\">      category,</span><br><span class=\"line\">    &#125; &#x3D; this.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    let ShowType;</span><br><span class=\"line\"></span><br><span class=\"line\">    return data.map(value &#x3D;&gt; &#123;</span><br><span class=\"line\">      const &#123; label, key, type, Message, option, disabled, pattern &#125; &#x3D; value;</span><br><span class=\"line\">      if (!value) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      switch (type) &#123;</span><br><span class=\"line\">        case &#39;input&#39;:</span><br><span class=\"line\">          ShowType &#x3D; FormInput;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        case &#39;select&#39;:</span><br><span class=\"line\">          ShowType &#x3D; FormSelect;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        case &#39;datePicker&#39;:</span><br><span class=\"line\">          ShowType &#x3D; FormDataPicker;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        case &#39;cascader&#39;:</span><br><span class=\"line\">          ShowType &#x3D; FormCascader;</span><br><span class=\"line\">          showData.region &#x3D; [showData.provinceId, showData.cityId, showData.countyId];</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        case &#39;textArea&#39;:</span><br><span class=\"line\">          ShowType &#x3D; FormTextArea;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        case &#39;imageUpload&#39;:</span><br><span class=\"line\">          ShowType &#x3D; FormImageUpload;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">          ShowType &#x3D; null;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return (</span><br><span class=\"line\">        &lt;Item label&#x3D;&#123;this.showLabel(type, label)&#125; key&#x3D;&#123;key&#125;&gt;</span><br><span class=\"line\">          &#123;getFieldDecorator(key, &#123;</span><br><span class=\"line\">            rules: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                required: this.showRequire(disabled),</span><br><span class=\"line\">                message: Message,</span><br><span class=\"line\">                pattern: pattern || undefined,</span><br><span class=\"line\">                type: type &#x3D;&#x3D;&#x3D; &#39;cascader&#39; ? &#39;array&#39; : &#39;string&#39;,</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            initialValue: showData[key] ? showData[key] : undefined,</span><br><span class=\"line\">          &#125;)(</span><br><span class=\"line\">            &lt;ShowType</span><br><span class=\"line\">              option&#x3D;&#123;option&#125;</span><br><span class=\"line\">              message&#x3D;&#123;Message&#125;</span><br><span class=\"line\">              disabled&#x3D;&#123;!!(disabled || category &#x3D;&#x3D;&#x3D; &#39;check&#39;)&#125;</span><br><span class=\"line\">            &#x2F;&gt;</span><br><span class=\"line\">          )&#125;</span><br><span class=\"line\">        &lt;&#x2F;Item&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  checkOk &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123; onOk, form &#125; &#x3D; this.props;</span><br><span class=\"line\">    form.validateFields((err, fieldsValue) &#x3D;&gt; &#123;</span><br><span class=\"line\">      if (!err) &#123;</span><br><span class=\"line\">        onOk(fieldsValue);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  closeModal &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123; onCancel, form: &#123; resetFields &#125; &#125; &#x3D; this.props;</span><br><span class=\"line\">    resetFields();</span><br><span class=\"line\">    onCancel();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123; data &#125; &#x3D; this.state;</span><br><span class=\"line\">    const &#123; show, category &#x3D; &#39;&#39;, importColums, downloadUrl &#125; &#x3D; this.props;</span><br><span class=\"line\">    const modalData &#x3D; this.caseCategory(category);</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Modal</span><br><span class=\"line\">        visible&#x3D;&#123;show&#125;</span><br><span class=\"line\">        onCancel&#x3D;&#123;this.closeModal&#125;</span><br><span class=\"line\">        onOk&#x3D;&#123;category &#x3D;&#x3D;&#x3D; &#39;import&#39; ? this.importOk : this.checkOk&#125;</span><br><span class=\"line\">        title&#x3D;&#123;modalData.title&#125;</span><br><span class=\"line\">        width&#x3D;&quot;70%&quot;</span><br><span class=\"line\">        footer&#x3D;&#123;modalData.title &#x3D;&#x3D;&#x3D; &#39;查看&#39; ? null : undefined&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">          &lt;Form style&#x3D;&#123;&#123; paddingTop: &#39;20px&#39; &#125;&#125; &#123;...formItemLayout&#125;&gt;</span><br><span class=\"line\">            &#123;this.form()&#125;</span><br><span class=\"line\">          &lt;&#x2F;Form&gt;</span><br><span class=\"line\">      &lt;&#x2F;Modal&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ModalView.propTypes &#x3D; &#123;</span><br><span class=\"line\">  onOk: PropTypes.func.isRequired, &#x2F;&#x2F; 弹框点击确定</span><br><span class=\"line\">  onCancel: PropTypes.func.isRequired, &#x2F;&#x2F; 隐藏弹框</span><br><span class=\"line\">  show: PropTypes.bool, &#x2F;&#x2F; 是否显示弹窗</span><br><span class=\"line\">  category: PropTypes.string, &#x2F;&#x2F; 弹框的类型（title显示</span><br><span class=\"line\">  data: PropTypes.arrayOf(PropTypes.object).isRequired, &#x2F;&#x2F; 数据类型; 位置:&#39;@&#x2F;common&#x2F;constant&#x2F;sormView.js&#39; 记得写注释; 格式: &#96;s$&#123;文件名&#125;&#96;</span><br><span class=\"line\">  showData: PropTypes.object, &#x2F;&#x2F; 查看或者编辑时的默认数据</span><br><span class=\"line\">  importCallBack: PropTypes.func, &#x2F;&#x2F; 导入之后，点击确定的回调函数</span><br><span class=\"line\">  importColums: PropTypes.array, &#x2F;&#x2F; 导入时候显示表格的表头</span><br><span class=\"line\">  downloadUrl: PropTypes.string, &#x2F;&#x2F; 下载的模板的文件名</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ModalView.defaultProps &#x3D; &#123;</span><br><span class=\"line\">  show: false,</span><br><span class=\"line\">  category: &#39;check&#39;,</span><br><span class=\"line\">  showData: &#123;&#125;,</span><br><span class=\"line\">  importCallBack: () &#x3D;&gt; &#123;&#125;,</span><br><span class=\"line\">  importColums: [],</span><br><span class=\"line\">  downloadUrl: &#39;&#39;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Form.create()(ModalView);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>FormCascader</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick </span><br><span class=\"line\"> * @Date: 2019-04-11 09:57:54 </span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-28 16:52:57</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class=\"line\">import &#123; Cascader &#125; from &#39;antd&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;;</span><br><span class=\"line\">import regionData from &#39;@&#x2F;constant&#x2F;regionData&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">class FormCascader extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  change &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;onChange&#125; &#x3D; this.props;</span><br><span class=\"line\">    onChange(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;value, disabled, message&#125; &#x3D; this.props;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Cascader placeholder&#x3D;&#123;message&#125; options&#x3D;&#123;regionData&#125; disabled&#x3D;&#123;disabled&#125; value&#x3D;&#123;value&#125; onChange&#x3D;&#123;this.change&#125; &#x2F;&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormCascader.propsType &#x3D; &#123;</span><br><span class=\"line\">  disabled: PropTypes.bool, &#x2F;&#x2F; 是否不可选</span><br><span class=\"line\">  message: PropTypes.string, &#x2F;&#x2F; 默认文字（placeholder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormCascader.defalutProps &#x3D; &#123;</span><br><span class=\"line\">  disabled: false,</span><br><span class=\"line\">  message: &#39;&#39;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormCascader;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>FormDataPicker</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick </span><br><span class=\"line\"> * @Date: 2019-04-10 10:57:08 </span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-15 14:28:40</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;;</span><br><span class=\"line\">import &#123; DatePicker &#125; from &#39;antd&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">class FormDataPicker extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  change &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;onChange&#125; &#x3D; this.props</span><br><span class=\"line\">    onChange(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;value, disabled&#125; &#x3D; this.props;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;DatePicker disabled&#x3D;&#123;disabled&#125; value&#x3D;&#123;value&#125; onChange&#x3D;&#123;this.change&#125; &#x2F;&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormDataPicker.propsType &#x3D; &#123;</span><br><span class=\"line\">  disabled: PropTypes.bool, &#x2F;&#x2F; 是否不可选</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormDataPicker.defalutProps &#x3D; &#123;</span><br><span class=\"line\">  disabled: false,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormDataPicker;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>FormImageUpload</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick </span><br><span class=\"line\"> * @Date: 2019-04-26 14:20:20 </span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-28 18:11:44</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; PureComponent &#125; from &#39;react&#39;;</span><br><span class=\"line\">import &#123; Upload, Icon, message &#125; from &#39;antd&#39;;</span><br><span class=\"line\">import &#123; PICTURE_UPLOAD, HEADER_BASE &#125; from &#39;@&#x2F;utils&#x2F;constant&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">class FormImageUpload extends PureComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  state &#x3D; &#123;</span><br><span class=\"line\">    loading: false,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  uploadButton &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123; loading &#125; &#x3D; this.state;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Icon type&#x3D;&#123;loading ? &#39;loading&#39; : &#39;plus&#39;&#125; &#x2F;&gt;</span><br><span class=\"line\">        &lt;div className&#x3D;&quot;ant-upload-text&quot;&gt;Upload&lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange &#x3D; (info) &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (info.file.status &#x3D;&#x3D;&#x3D; &#39;uploading&#39;) &#123;</span><br><span class=\"line\">      this.setState(&#123; loading: true &#125;);</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (info.file.status &#x3D;&#x3D;&#x3D; &#39;done&#39;) &#123;</span><br><span class=\"line\">      const &#123;onChange&#125; &#x3D; this.props</span><br><span class=\"line\">      this.setState(&#123;imageUrl: info.file.response.data[0], loading: false,&#125;)</span><br><span class=\"line\">      onChange(info.file.response.data[0])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  beforeUpload &#x3D; (file) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const isJPG &#x3D; file.type &#x3D;&#x3D;&#x3D; &#39;image&#x2F;jpeg&#39;;</span><br><span class=\"line\">    if (!isJPG) &#123;</span><br><span class=\"line\">      message.error(&#39;只能上传JPG的图片!&#39;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const isLt2M &#x3D; file.size &#x2F; 1024 &#x2F; 1024 &lt; 2;</span><br><span class=\"line\">    if (!isLt2M) &#123;</span><br><span class=\"line\">      message.error(&#39;图片大小不能大于2MB!&#39;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return isJPG &amp;&amp; isLt2M;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  upLoadProps &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    HEADER_BASE.user_id &#x3D; window.sessionStorage.getItem(&#39;userId&#39;);</span><br><span class=\"line\">    HEADER_BASE.token_id &#x3D; window.sessionStorage.getItem(&#39;tokenId&#39;);</span><br><span class=\"line\">    const props &#x3D; &#123;</span><br><span class=\"line\">      name: &#39;file&#39;,</span><br><span class=\"line\">      action: PICTURE_UPLOAD,</span><br><span class=\"line\">      headers: HEADER_BASE,</span><br><span class=\"line\">      onChange: this.handleChange,</span><br><span class=\"line\">      showUploadList: false,</span><br><span class=\"line\">      beforeUpload: this.beforeUpload,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return props;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    const &#123; imageUrl &#125; &#x3D; this.state;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Upload</span><br><span class=\"line\">        listType&#x3D;&quot;picture-card&quot;</span><br><span class=\"line\">        &#123;...this.upLoadProps()&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &#123;imageUrl ? &lt;img src&#x3D;&#123;imageUrl&#125; alt&#x3D;&quot;avatar&quot; &#x2F;&gt; : this.uploadButton()&#125;</span><br><span class=\"line\">      &lt;&#x2F;Upload&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormImageUpload;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>FormInput</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick </span><br><span class=\"line\"> * @Date: 2019-04-10 10:57:08 </span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-15 14:46:23</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class=\"line\">import &#123; Input &#125; from &#39;antd&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">class FormInput extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  change &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;onChange&#125; &#x3D; this.props;</span><br><span class=\"line\">    onChange(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;message, value, disabled&#125; &#x3D; this.props;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Input disabled&#x3D;&#123;disabled&#125; placeholder&#x3D;&#123;message&#125; value&#x3D;&#123;value&#125; onChange&#x3D;&#123;this.change&#125; &#x2F;&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormInput.propsType &#x3D; &#123;</span><br><span class=\"line\">  disabled: PropTypes.bool, &#x2F;&#x2F; 是否不可选</span><br><span class=\"line\">  message: PropTypes.string, &#x2F;&#x2F; 默认文字（placeholder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormInput.defalutProps &#x3D; &#123;</span><br><span class=\"line\">  disabled: false,</span><br><span class=\"line\">  message: &#39;&#39;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormInput;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><strong>FormSelect</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick </span><br><span class=\"line\"> * @Date: 2019-04-10 10:13:58 </span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-28 15:59:22</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class=\"line\">import &#123; Select &#125; from &#39;antd&#39;;</span><br><span class=\"line\">import PropTypes, &#123; object &#125; from &#39;prop-types&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; Option &#125; &#x3D; Select;</span><br><span class=\"line\">class FormSelect extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  option &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;option &#x3D; []&#125; &#x3D; this.props;</span><br><span class=\"line\">    return option.map((v) &#x3D;&gt; &#123;</span><br><span class=\"line\">      const &#123;showValue, severKey&#125; &#x3D; v;</span><br><span class=\"line\">      return &lt;Option value&#x3D;&#123;severKey&#125; key&#x3D;&#123;severKey&#125;&gt;&#123;showValue&#125;&lt;&#x2F;Option&gt;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  selectCurrency &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;onChange&#125; &#x3D; this.props</span><br><span class=\"line\">    onChange(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;message, value, disabled&#125; &#x3D; this.props;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Select disabled&#x3D;&#123;disabled&#125; value&#x3D;&#123;value&#125; placeholder&#x3D;&#123;message&#125; style&#x3D;&#123;&#123;width: &#39;170px&#39;&#125;&#125; onSelect&#x3D;&#123;this.selectCurrency&#125;&gt;</span><br><span class=\"line\">        &#123;this.option()&#125;</span><br><span class=\"line\">      &lt;&#x2F;Select&gt;    </span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormSelect.propsType &#x3D; &#123;</span><br><span class=\"line\">  disabled: PropTypes.bool, &#x2F;&#x2F; 是否不可选</span><br><span class=\"line\">  message: PropTypes.string, &#x2F;&#x2F; 默认文字（placeholder</span><br><span class=\"line\">  option: PropTypes.arrayOf(object), &#x2F;&#x2F; 选择框的选项</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormSelect.defalutProps &#x3D; &#123;</span><br><span class=\"line\">  disabled: false,</span><br><span class=\"line\">  message: &#39;&#39;,</span><br><span class=\"line\">  option: [],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormSelect;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>FormTextArea</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * @Author: Derrick </span><br><span class=\"line\"> * @Date: 2019-04-23 10:20:36 </span><br><span class=\"line\"> * @Last Modified by: Derrick</span><br><span class=\"line\"> * @Last Modified time: 2019-04-23 10:21:33</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class=\"line\">import &#123; Input &#125; from &#39;antd&#39;;</span><br><span class=\"line\">import PropTypes from &#39;prop-types&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; TextArea &#125; &#x3D; Input;</span><br><span class=\"line\">class FormTextArea extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  change &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const &#123;onChange&#125; &#x3D; this.props;</span><br><span class=\"line\">    onChange(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;message, value, disabled&#125; &#x3D; this.props;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;TextArea rows&#x3D;&#123;4&#125; disabled&#x3D;&#123;disabled&#125; placeholder&#x3D;&#123;message&#125; value&#x3D;&#123;value&#125; onChange&#x3D;&#123;this.change&#125; &#x2F;&gt;</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormTextArea.propsType &#x3D; &#123;</span><br><span class=\"line\">  disabled: PropTypes.bool, &#x2F;&#x2F; 是否不可选</span><br><span class=\"line\">  message: PropTypes.string, &#x2F;&#x2F; 默认文字（placeholder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FormTextArea.defalutProps &#x3D; &#123;</span><br><span class=\"line\">  disabled: false,</span><br><span class=\"line\">  message: &#39;&#39;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default FormTextArea;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123;onChange&#125; &#x3D; this.props;</span><br><span class=\"line\">onChange(XX)</span><br></pre></td></tr></table></figure>\n\n\n<p>这个onChange是可以直接改变FormItem的值。</p>\n<p>接下来可以加入您自己喜欢的组件，都是大同小异，基本上都离不开这个onChange。</p>\n<p>以上就是本人最近封装的一个组件，我感觉很好用所以想分享出来。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck8vq63560000s9vmdtxve6h3","category_id":"ck8vq635v0004s9vm9wc49z75","_id":"ck8vq6368000ds9vm4i397rf6"},{"post_id":"ck8vq63620006s9vmbr5l2c9c","category_id":"ck8vq6369000es9vm7jq53d7u","_id":"ck8vq636n000os9vm5zwpf1gc"},{"post_id":"ck8vq63630007s9vmc8cxftq4","category_id":"ck8vq636j000ks9vm80sw69ou","_id":"ck8vq636q000ts9vm7mo0dfej"},{"post_id":"ck8vq63650008s9vmf20fdp8q","category_id":"ck8vq636o000ps9vm9cv48q9u","_id":"ck8vq636x0010s9vmbapb0m9f"},{"post_id":"ck8vq6367000bs9vmhl3afsge","category_id":"ck8vq636o000ps9vm9cv48q9u","_id":"ck8vq636z0013s9vm3f868i31"},{"post_id":"ck8vq635s0002s9vmgakj5r0b","category_id":"ck8vq63650009s9vm7gt37sfm","_id":"ck8vq63700017s9vmamrugxah"},{"post_id":"ck8vq635s0002s9vmgakj5r0b","category_id":"ck8vq636x000zs9vm6yn2czml","_id":"ck8vq6371001bs9vmfsw4bkav"},{"post_id":"ck8vq6368000cs9vm2csv9zs8","category_id":"ck8vq636z0014s9vmfpx2gfr4","_id":"ck8vq6371001cs9vmdx9s0f7l"},{"post_id":"ck8vq636b000gs9vm5hh5611t","category_id":"ck8vq63700019s9vm5qush6q7","_id":"ck8vq6373001gs9vmdj2e1p42"},{"post_id":"ck8vq636h000is9vm78619f6x","category_id":"ck8vq6371001ds9vm5or775qs","_id":"ck8vq6374001ks9vmhcs5a99b"},{"post_id":"ck8vq636j000ms9vm8p4qf5yd","category_id":"ck8vq6373001is9vm7pn53x1c","_id":"ck8vq6376001os9vm8hisazgr"},{"post_id":"ck8vq636m000ns9vm5bct2p36","category_id":"ck8vq6375001ls9vm20vocy35","_id":"ck8vq637a001ts9vmh9r5arzn"},{"post_id":"ck8vq636o000rs9vm4xrogw1f","category_id":"ck8vq63650009s9vm7gt37sfm","_id":"ck8vq637d001ws9vm0c1i6n4j"},{"post_id":"ck8vq636o000rs9vm4xrogw1f","category_id":"ck8vq636x000zs9vm6yn2czml","_id":"ck8vq637e001ys9vmfjceat3m"},{"post_id":"ck8vq636p000ss9vm2d313z3i","category_id":"ck8vq636z0014s9vmfpx2gfr4","_id":"ck8vq637e0020s9vm3e527r3z"},{"post_id":"ck8vq636q000us9vm7gqbd32g","category_id":"ck8vq637c001vs9vmgijs99ne","_id":"ck8vq637f0024s9vm28xo3n3g"},{"post_id":"ck8vq63850032s9vm1obn4cxg","category_id":"ck8vq6375001ls9vm20vocy35","_id":"ck8vq638l0037s9vm62xf3twr"},{"post_id":"ck8vq63860033s9vmb62mfzhv","category_id":"ck8vq636o000ps9vm9cv48q9u","_id":"ck8vq638m0039s9vm0ghi52qi"},{"post_id":"ck8vq63890035s9vm9cuy5qx6","category_id":"ck8vq635v0004s9vm9wc49z75","_id":"ck8vq638o003es9vm7rgb7eos"},{"post_id":"ck8vq63890035s9vm9cuy5qx6","category_id":"ck8vq638m0038s9vm85swh17c","_id":"ck8vq638o003gs9vm9g3ufhxd"}],"PostTag":[{"post_id":"ck8vq63560000s9vmdtxve6h3","tag_id":"ck8vq63610005s9vm95jqcgjy","_id":"ck8vq636f000hs9vm9i7t58ut"},{"post_id":"ck8vq63560000s9vmdtxve6h3","tag_id":"ck8vq6366000as9vm2sclas01","_id":"ck8vq636i000js9vm4jd47xqp"},{"post_id":"ck8vq635s0002s9vmgakj5r0b","tag_id":"ck8vq636a000fs9vm8flb3v3w","_id":"ck8vq636w000xs9vm2azied2i"},{"post_id":"ck8vq635s0002s9vmgakj5r0b","tag_id":"ck8vq636j000ls9vm2edeh5fo","_id":"ck8vq636x000ys9vmgp1ef1vf"},{"post_id":"ck8vq635s0002s9vmgakj5r0b","tag_id":"ck8vq636o000qs9vm6a97eqjq","_id":"ck8vq636y0012s9vm4o5hfye6"},{"post_id":"ck8vq63620006s9vmbr5l2c9c","tag_id":"ck8vq636r000ws9vm65xo6jhu","_id":"ck8vq63700016s9vm5mlo0srn"},{"post_id":"ck8vq63620006s9vmbr5l2c9c","tag_id":"ck8vq636y0011s9vm3vro446l","_id":"ck8vq63700018s9vm6dqhcj78"},{"post_id":"ck8vq63630007s9vmc8cxftq4","tag_id":"ck8vq636z0015s9vm5so0gjny","_id":"ck8vq6372001fs9vm69il4wnb"},{"post_id":"ck8vq63630007s9vmc8cxftq4","tag_id":"ck8vq6370001as9vme89sgser","_id":"ck8vq6373001hs9vm8chzcmeg"},{"post_id":"ck8vq63650008s9vmf20fdp8q","tag_id":"ck8vq6372001es9vmgsy6dbni","_id":"ck8vq6376001ns9vmd4v04917"},{"post_id":"ck8vq63650008s9vmf20fdp8q","tag_id":"ck8vq6373001js9vm6tjd5mou","_id":"ck8vq6376001ps9vmgtz8ehqb"},{"post_id":"ck8vq6367000bs9vmhl3afsge","tag_id":"ck8vq6372001es9vmgsy6dbni","_id":"ck8vq637e001zs9vmgj6zb13q"},{"post_id":"ck8vq6367000bs9vmhl3afsge","tag_id":"ck8vq6373001js9vm6tjd5mou","_id":"ck8vq637e0021s9vm4kxu6zhf"},{"post_id":"ck8vq6367000bs9vmhl3afsge","tag_id":"ck8vq637a001us9vm6feug4dg","_id":"ck8vq637f0023s9vmad9501w0"},{"post_id":"ck8vq6368000cs9vm2csv9zs8","tag_id":"ck8vq637d001xs9vm5fpxcof2","_id":"ck8vq637h0028s9vm4j8v2ami"},{"post_id":"ck8vq6368000cs9vm2csv9zs8","tag_id":"ck8vq637e0022s9vmhxmlcng2","_id":"ck8vq637h0029s9vm8n1t9gcf"},{"post_id":"ck8vq6368000cs9vm2csv9zs8","tag_id":"ck8vq637f0025s9vm5492fkus","_id":"ck8vq637h002bs9vm6k0o6yce"},{"post_id":"ck8vq6368000cs9vm2csv9zs8","tag_id":"ck8vq637g0026s9vm61ap9lgv","_id":"ck8vq637h002cs9vm3so5bh70"},{"post_id":"ck8vq636b000gs9vm5hh5611t","tag_id":"ck8vq637g0027s9vmhxsuc7ox","_id":"ck8vq637i002es9vmeh56ctzh"},{"post_id":"ck8vq636b000gs9vm5hh5611t","tag_id":"ck8vq637h002as9vm43rx2a8a","_id":"ck8vq637i002fs9vm0ktt5o2h"},{"post_id":"ck8vq636h000is9vm78619f6x","tag_id":"ck8vq637i002ds9vmc4vpfd17","_id":"ck8vq637k002js9vm5h2igph1"},{"post_id":"ck8vq636h000is9vm78619f6x","tag_id":"ck8vq637i002gs9vm78f95lfk","_id":"ck8vq637k002ks9vm8ax18h8g"},{"post_id":"ck8vq636h000is9vm78619f6x","tag_id":"ck8vq637j002hs9vm18jq0n3d","_id":"ck8vq637l002ms9vmhy6834bk"},{"post_id":"ck8vq636j000ms9vm8p4qf5yd","tag_id":"ck8vq637k002is9vm2930ddiv","_id":"ck8vq637l002ns9vm9y7o0b4n"},{"post_id":"ck8vq636m000ns9vm5bct2p36","tag_id":"ck8vq637k002ls9vm3zzx55jk","_id":"ck8vq637o002ps9vmgp87fytd"},{"post_id":"ck8vq636o000rs9vm4xrogw1f","tag_id":"ck8vq637l002os9vm5oe44q11","_id":"ck8vq637s002ss9vm02exg3cw"},{"post_id":"ck8vq636o000rs9vm4xrogw1f","tag_id":"ck8vq637o002qs9vm7p3n50v3","_id":"ck8vq637t002ts9vm3ep5dx16"},{"post_id":"ck8vq636o000rs9vm4xrogw1f","tag_id":"ck8vq636j000ls9vm2edeh5fo","_id":"ck8vq637u002vs9vmda0y6ozz"},{"post_id":"ck8vq636p000ss9vm2d313z3i","tag_id":"ck8vq637r002rs9vm9wfa0ldm","_id":"ck8vq637v002xs9vman7w8d9l"},{"post_id":"ck8vq636p000ss9vm2d313z3i","tag_id":"ck8vq637t002us9vm7qy19q6c","_id":"ck8vq637v002ys9vmbi42755v"},{"post_id":"ck8vq636q000us9vm7gqbd32g","tag_id":"ck8vq6373001js9vm6tjd5mou","_id":"ck8vq637x0030s9vm7vmu55bx"},{"post_id":"ck8vq636q000us9vm7gqbd32g","tag_id":"ck8vq637v002zs9vm0j80hjvc","_id":"ck8vq637x0031s9vmejvn9lx4"},{"post_id":"ck8vq63850032s9vm1obn4cxg","tag_id":"ck8vq637k002ls9vm3zzx55jk","_id":"ck8vq63870034s9vmc7p8d5k2"},{"post_id":"ck8vq63860033s9vmb62mfzhv","tag_id":"ck8vq6373001js9vm6tjd5mou","_id":"ck8vq638n003bs9vmee18fe7a"},{"post_id":"ck8vq63860033s9vmb62mfzhv","tag_id":"ck8vq638k0036s9vm3dvx9kjv","_id":"ck8vq638n003cs9vmdirk8o6i"},{"post_id":"ck8vq63890035s9vm9cuy5qx6","tag_id":"ck8vq63610005s9vm95jqcgjy","_id":"ck8vq638n003ds9vm6l4sc21l"},{"post_id":"ck8vq63890035s9vm9cuy5qx6","tag_id":"ck8vq638m003as9vmcms6avop","_id":"ck8vq638o003fs9vmhae94zq2"}],"Tag":[{"name":"Ant-Design-Form","_id":"ck8vq63610005s9vm95jqcgjy"},{"name":"Ant-Design","_id":"ck8vq6366000as9vm2sclas01"},{"name":"Spring-Boot-2.0","_id":"ck8vq636a000fs9vm8flb3v3w"},{"name":"Java","_id":"ck8vq636j000ls9vm2edeh5fo"},{"name":"JWT","_id":"ck8vq636o000qs9vm6a97eqjq"},{"name":"Hexo","_id":"ck8vq636r000ws9vm65xo6jhu"},{"name":"GitHub","_id":"ck8vq636y0011s9vm3vro446l"},{"name":"深拷贝","_id":"ck8vq636z0015s9vm5so0gjny"},{"name":"浅拷贝","_id":"ck8vq6370001as9vme89sgser"},{"name":"ReactHook","_id":"ck8vq6372001es9vmgsy6dbni"},{"name":"React","_id":"ck8vq6373001js9vm6tjd5mou"},{"name":"倒计时","_id":"ck8vq637a001us9vm6feug4dg"},{"name":"系统性的学习","_id":"ck8vq637d001xs9vm5fpxcof2"},{"name":"学习目录","_id":"ck8vq637e0022s9vmhxmlcng2"},{"name":"Web前端","_id":"ck8vq637f0025s9vm5492fkus"},{"name":"学习框架","_id":"ck8vq637g0026s9vm61ap9lgv"},{"name":"WebPack","_id":"ck8vq637g0027s9vmhxsuc7ox"},{"name":"clean-webpack-plugin","_id":"ck8vq637h002as9vm43rx2a8a"},{"name":"React-Router","_id":"ck8vq637i002ds9vmc4vpfd17"},{"name":"UMI","_id":"ck8vq637i002gs9vm78f95lfk"},{"name":"Ant-Design-Pro","_id":"ck8vq637j002hs9vm18jq0n3d"},{"name":"CSS-Module","_id":"ck8vq637k002is9vm2930ddiv"},{"name":"HTTP","_id":"ck8vq637k002ls9vm3zzx55jk"},{"name":"Spring-Boot","_id":"ck8vq637l002os9vm5oe44q11"},{"name":"跨域","_id":"ck8vq637o002qs9vm7p3n50v3"},{"name":"HTML","_id":"ck8vq637r002rs9vm9wfa0ldm"},{"name":"JavaScript","_id":"ck8vq637t002us9vm7qy19q6c"},{"name":"ES6","_id":"ck8vq637v002zs9vm0j80hjvc"},{"name":"State","_id":"ck8vq638k0036s9vm3dvx9kjv"},{"name":"Ant-Design组件合集","_id":"ck8vq638m003as9vmcms6avop"}]}}